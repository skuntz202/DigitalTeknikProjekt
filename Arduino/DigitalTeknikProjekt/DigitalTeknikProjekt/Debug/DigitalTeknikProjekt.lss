
DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000e12  00000ea6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007ec  0080020e  0080020e  00000eb4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001854  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000119d  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b64  00000000  00000000  00003a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  000045bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085d  00000000  00000000  00004870  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a2  00000000  00000000  000050cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000576f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	93 c0       	rjmp	.+294    	; 0x170 <__vector_18>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	fc c2       	rjmp	.+1528   	; 0x65a <__vector_24>
  62:	00 00       	nop
  64:	98 c3       	rjmp	.+1840   	; 0x796 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	b7 c0       	rjmp	.+366    	; 0x1e4 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e1       	ldi	r30, 0x12	; 18
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 30       	cpi	r26, 0x0E	; 14
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	29 e0       	ldi	r18, 0x09	; 9
 110:	ae e0       	ldi	r26, 0x0E	; 14
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 3f       	cpi	r26, 0xFA	; 250
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d3 d1       	rcall	.+934    	; 0x4c6 <main>
 120:	76 c6       	rjmp	.+3308   	; 0xe0e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer1>:
float voltage = 0.f;
volatile int ADCSampleFlag = 0;
unsigned int recordLength = 30;

int initTimer1(){
	TCCR1B = (1<<WGM12)|(1<<CS10)|(1<<CS11);	    //Sets mode to CTC, Sets prescaler to 64
 124:	8b e0       	ldi	r24, 0x0B	; 11
 126:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	OCR1A =	0x18;				//Sets compare value to 24
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 132:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B =	0x18;				//Sets compare value to 24
 136:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 13a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	TIMSK1 = (1<<OCIE1B);
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
	TIFR1 = (1<<OCF1B);
 144:	86 bb       	out	0x16, r24	; 22
	return 1;
}
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret

0000014c <ADC_init>:

void ADC_init(){
	sei();
 14c:	78 94       	sei
	initTimer1();
 14e:	ea df       	rcall	.-44     	; 0x124 <initTimer1>
	ADMUX |= (1<<ADLAR);
 150:	ec e7       	ldi	r30, 0x7C	; 124
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 62       	ori	r24, 0x20	; 32
 158:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADEN)|(1<<ADATE)|(1<<ADIE);
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8c 6a       	ori	r24, 0xAC	; 172
 162:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS2)|(1<<ADTS0);
 164:	eb e7       	ldi	r30, 0x7B	; 123
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	85 60       	ori	r24, 0x05	; 5
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <__vector_18>:
}

ISR(TIMER1_COMPB_vect){
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	packetReceiveFlag = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <packetReceiveFlag+0x1>
 19e:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <packetReceiveFlag>
	static int timer = 0;
	if(timer == 100){
 1a2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end>
 1a6:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <__data_end+0x1>
 1aa:	84 36       	cpi	r24, 0x64	; 100
 1ac:	91 05       	cpc	r25, r1
 1ae:	11 f4       	brne	.+4      	; 0x1b4 <__vector_18+0x44>
		dims();
 1b0:	82 d2       	rcall	.+1284   	; 0x6b6 <dims>
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <__vector_18+0x4e>
	} else{
		timer += 1;
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <__data_end+0x1>
 1ba:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__data_end>
	}
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0b be       	out	0x3b, r0	; 59
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_29>:

ISR(ADC_vect){
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	0b b6       	in	r0, 0x3b	; 59
 1f0:	0f 92       	push	r0
 1f2:	2f 93       	push	r18
 1f4:	3f 93       	push	r19
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	adcSample = ADCH;
 1fe:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <adcSample+0x1>
 20a:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <adcSample>
	ADCWriteBuffer[ADCBufferIndex] = adcSample;
 20e:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <ADCBufferIndex>
 212:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <ADCBufferIndex+0x1>
 216:	ee 5d       	subi	r30, 0xDE	; 222
 218:	fd 4f       	sbci	r31, 0xFD	; 253
 21a:	80 83       	st	Z, r24
	if(ADCBufferIndex == recordLength){
 21c:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <ADCBufferIndex>
 220:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <ADCBufferIndex+0x1>
 224:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <recordLength>
 228:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <recordLength+0x1>
 22c:	28 17       	cp	r18, r24
 22e:	39 07       	cpc	r19, r25
 230:	59 f4       	brne	.+22     	; 0x248 <__vector_29+0x64>
		ADCBufferIndex = 0;
 232:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <ADCBufferIndex+0x1>
 236:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <ADCBufferIndex>
		ADCSampleFlag = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <ADCSampleFlag+0x1>
 242:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <ADCSampleFlag>
 246:	09 c0       	rjmp	.+18     	; 0x25a <__vector_29+0x76>
	} else{
		ADCBufferIndex += 1;
 248:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <ADCBufferIndex>
 24c:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <ADCBufferIndex+0x1>
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <ADCBufferIndex+0x1>
 256:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <ADCBufferIndex>
 	}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0b be       	out	0x3b, r0	; 59
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <input_makePacket>:
#include <avr/io.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int input_makePacket(UARTPacket* returnData, char* packet){
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	9c 01       	movw	r18, r24
	if(packet[0] != 0x55 || packet[1] != 0xAA){
 27e:	fb 01       	movw	r30, r22
 280:	90 81       	ld	r25, Z
 282:	95 35       	cpi	r25, 0x55	; 85
 284:	09 f0       	breq	.+2      	; 0x288 <input_makePacket+0x14>
 286:	d8 c0       	rjmp	.+432    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 288:	81 81       	ldd	r24, Z+1	; 0x01
 28a:	8a 3a       	cpi	r24, 0xAA	; 170
 28c:	09 f0       	breq	.+2      	; 0x290 <input_makePacket+0x1c>
 28e:	d7 c0       	rjmp	.+430    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 290:	eb 01       	movw	r28, r22
 292:	89 01       	movw	r16, r18
		return -1;
	}
	if(packet[4] == GENERATOR){
 294:	94 81       	ldd	r25, Z+4	; 0x04
 296:	91 30       	cpi	r25, 0x01	; 1
 298:	c1 f4       	brne	.+48     	; 0x2ca <input_makePacket+0x56>
		if(packet[7] != 0x00 || packet[8] != 0x00){
 29a:	87 81       	ldd	r24, Z+7	; 0x07
 29c:	81 11       	cpse	r24, r1
 29e:	d2 c0       	rjmp	.+420    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 2a0:	80 85       	ldd	r24, Z+8	; 0x08
 2a2:	81 11       	cpse	r24, r1
 2a4:	d2 c0       	rjmp	.+420    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			return -1;
		}
		returnData->type = packet[4];
 2a6:	f9 01       	movw	r30, r18
 2a8:	90 83       	st	Z, r25
		returnData->data = (char*)calloc(2, sizeof(char));
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	6b d4       	rcall	.+2262   	; 0xb8a <calloc>
 2b4:	f8 01       	movw	r30, r16
 2b6:	92 83       	std	Z+2, r25	; 0x02
 2b8:	81 83       	std	Z+1, r24	; 0x01
		returnData->data[0] = packet[5];
 2ba:	2d 81       	ldd	r18, Y+5	; 0x05
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
		returnData->data[1] = packet[6];
 2c0:	2e 81       	ldd	r18, Y+6	; 0x06
 2c2:	21 83       	std	Z+1, r18	; 0x01
		returnData->type = packet[4];
		strcpy(ADCWriteBuffer, "");
		ADCBufferIndex = 0;
		recordLength = 255;
	}
	return 1;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	d1 c0       	rjmp	.+418    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		returnData->type = packet[4];
		returnData->data = (char*)calloc(2, sizeof(char));
		returnData->data[0] = packet[5];
		returnData->data[1] = packet[6];
	}
	else if(packet[4] == OSCILLOSCOPE){
 2ca:	92 30       	cpi	r25, 0x02	; 2
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <input_makePacket+0x5c>
 2ce:	9b c0       	rjmp	.+310    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		if(packet[9] != 0x00 || packet[10] != 0x00){
 2d0:	81 85       	ldd	r24, Z+9	; 0x09
 2d2:	81 11       	cpse	r24, r1
 2d4:	bd c0       	rjmp	.+378    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 2d6:	82 85       	ldd	r24, Z+10	; 0x0a
 2d8:	81 11       	cpse	r24, r1
 2da:	bd c0       	rjmp	.+378    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			return -1;
		}
		returnData->type = packet[4];
 2dc:	f9 01       	movw	r30, r18
 2de:	90 83       	st	Z, r25
		returnData->data = (char*)calloc(4, sizeof(char));
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	50 d4       	rcall	.+2208   	; 0xb8a <calloc>
 2ea:	f8 01       	movw	r30, r16
 2ec:	92 83       	std	Z+2, r25	; 0x02
 2ee:	81 83       	std	Z+1, r24	; 0x01
		int inputSampleRate = ((packet[5]<<8)&0x7F00) + packet[6];
 2f0:	6d 81       	ldd	r22, Y+5	; 0x05
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	76 2f       	mov	r23, r22
 2f6:	66 27       	eor	r22, r22
 2f8:	66 27       	eor	r22, r22
 2fa:	7f 77       	andi	r23, 0x7F	; 127
 2fc:	8e 81       	ldd	r24, Y+6	; 0x06
 2fe:	68 0f       	add	r22, r24
 300:	71 1d       	adc	r23, r1
		if(inputSampleRate < 10){
 302:	6a 30       	cpi	r22, 0x0A	; 10
 304:	71 05       	cpc	r23, r1
 306:	6c f4       	brge	.+26     	; 0x322 <input_makePacket+0xae>
			sampleRate = 24999;
 308:	87 ea       	ldi	r24, 0xA7	; 167
 30a:	91 e6       	ldi	r25, 0x61	; 97
 30c:	a0 e0       	ldi	r26, 0x00	; 0
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <sampleRate>
 314:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <sampleRate+0x1>
 318:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <sampleRate+0x2>
 31c:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <sampleRate+0x3>
 320:	35 c0       	rjmp	.+106    	; 0x38c <input_makePacket+0x118>
		} else if(inputSampleRate > 10000){
 322:	61 31       	cpi	r22, 0x11	; 17
 324:	f7 e2       	ldi	r31, 0x27	; 39
 326:	7f 07       	cpc	r23, r31
 328:	6c f0       	brlt	.+26     	; 0x344 <input_makePacket+0xd0>
			sampleRate = 24;
 32a:	88 e1       	ldi	r24, 0x18	; 24
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	a0 e0       	ldi	r26, 0x00	; 0
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <sampleRate>
 336:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <sampleRate+0x1>
 33a:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <sampleRate+0x2>
 33e:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <sampleRate+0x3>
 342:	24 c0       	rjmp	.+72     	; 0x38c <input_makePacket+0x118>
		} else{
			sampleRate = (unsigned long)((16000000.f*(1.f/(float)inputSampleRate)-64.f)/64.f);	
 344:	07 2e       	mov	r0, r23
 346:	00 0c       	add	r0, r0
 348:	88 0b       	sbc	r24, r24
 34a:	99 0b       	sbc	r25, r25
 34c:	2f d3       	rcall	.+1630   	; 0x9ac <__floatsisf>
 34e:	9b 01       	movw	r18, r22
 350:	ac 01       	movw	r20, r24
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	9f e3       	ldi	r25, 0x3F	; 63
 35a:	92 d2       	rcall	.+1316   	; 0x880 <__divsf3>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	34 e2       	ldi	r19, 0x24	; 36
 360:	44 e7       	ldi	r20, 0x74	; 116
 362:	5b e4       	ldi	r21, 0x4B	; 75
 364:	af d3       	rcall	.+1886   	; 0xac4 <__mulsf3>
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	40 e8       	ldi	r20, 0x80	; 128
 36c:	52 e4       	ldi	r21, 0x42	; 66
 36e:	23 d2       	rcall	.+1094   	; 0x7b6 <__subsf3>
 370:	20 e0       	ldi	r18, 0x00	; 0
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e8       	ldi	r20, 0x80	; 128
 376:	5c e3       	ldi	r21, 0x3C	; 60
 378:	a5 d3       	rcall	.+1866   	; 0xac4 <__mulsf3>
 37a:	ea d2       	rcall	.+1492   	; 0x950 <__fixunssfsi>
 37c:	60 93 08 02 	sts	0x0208, r22	; 0x800208 <sampleRate>
 380:	70 93 09 02 	sts	0x0209, r23	; 0x800209 <sampleRate+0x1>
 384:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <sampleRate+0x2>
 388:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <sampleRate+0x3>
		}
		OCR1B = sampleRate;
 38c:	e8 e0       	ldi	r30, 0x08	; 8
 38e:	f2 e0       	ldi	r31, 0x02	; 2
 390:	80 81       	ld	r24, Z
 392:	91 81       	ldd	r25, Z+1	; 0x01
 394:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 398:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		OCR1A = sampleRate;
 39c:	80 81       	ld	r24, Z
 39e:	91 81       	ldd	r25, Z+1	; 0x01
 3a0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 3a4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		int inputRecordLength = ((packet[7]<<8)&0x7F00) + packet[8];
 3a8:	8f 81       	ldd	r24, Y+7	; 0x07
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	98 2f       	mov	r25, r24
 3ae:	88 27       	eor	r24, r24
 3b0:	88 27       	eor	r24, r24
 3b2:	9f 77       	andi	r25, 0x7F	; 127
 3b4:	28 85       	ldd	r18, Y+8	; 0x08
 3b6:	82 0f       	add	r24, r18
 3b8:	91 1d       	adc	r25, r1
		strcpy(ADCWriteBuffer, "");
 3ba:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <ADCWriteBuffer>
		ADCBufferIndex = 0;
 3be:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <ADCBufferIndex+0x1>
 3c2:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <ADCBufferIndex>
		if(inputRecordLength > 10000){
 3c6:	81 31       	cpi	r24, 0x11	; 17
 3c8:	27 e2       	ldi	r18, 0x27	; 39
 3ca:	92 07       	cpc	r25, r18
 3cc:	4c f0       	brlt	.+18     	; 0x3e0 <input_makePacket+0x16c>
			recordLength = 10000;
 3ce:	80 e1       	ldi	r24, 0x10	; 16
 3d0:	97 e2       	ldi	r25, 0x27	; 39
 3d2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <recordLength+0x1>
 3d6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <recordLength>
		returnData->type = packet[4];
		strcpy(ADCWriteBuffer, "");
		ADCBufferIndex = 0;
		recordLength = 255;
	}
	return 1;
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	46 c0       	rjmp	.+140    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		int inputRecordLength = ((packet[7]<<8)&0x7F00) + packet[8];
		strcpy(ADCWriteBuffer, "");
		ADCBufferIndex = 0;
		if(inputRecordLength > 10000){
			recordLength = 10000;
		} else if(inputRecordLength < 10){
 3e0:	8a 30       	cpi	r24, 0x0A	; 10
 3e2:	91 05       	cpc	r25, r1
 3e4:	4c f4       	brge	.+18     	; 0x3f8 <input_makePacket+0x184>
			recordLength = 10;
 3e6:	8a e0       	ldi	r24, 0x0A	; 10
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <recordLength+0x1>
 3ee:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <recordLength>
		returnData->type = packet[4];
		strcpy(ADCWriteBuffer, "");
		ADCBufferIndex = 0;
		recordLength = 255;
	}
	return 1;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	3a c0       	rjmp	.+116    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		if(inputRecordLength > 10000){
			recordLength = 10000;
		} else if(inputRecordLength < 10){
			recordLength = 10;
		} else{
			recordLength = inputRecordLength;
 3f8:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <recordLength+0x1>
 3fc:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <recordLength>
		returnData->type = packet[4];
		strcpy(ADCWriteBuffer, "");
		ADCBufferIndex = 0;
		recordLength = 255;
	}
	return 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	33 c0       	rjmp	.+102    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			recordLength = 10;
		} else{
			recordLength = inputRecordLength;
		}
	}
	else if(packet[4] == BODEPLOT){
 406:	93 30       	cpi	r25, 0x03	; 3
 408:	49 f5       	brne	.+82     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
		if(packet[5] != 0x00 || packet[6] != 0x00){
 40a:	85 81       	ldd	r24, Z+5	; 0x05
 40c:	81 11       	cpse	r24, r1
 40e:	29 c0       	rjmp	.+82     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 410:	86 81       	ldd	r24, Z+6	; 0x06
 412:	81 11       	cpse	r24, r1
 414:	29 c0       	rjmp	.+82     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
			return -1;
		}
		returnData->type = packet[4];
 416:	f9 01       	movw	r30, r18
 418:	90 83       	st	Z, r25
		strcpy(ADCWriteBuffer, "");
 41a:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <ADCWriteBuffer>
		ADCBufferIndex = 0;
 41e:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <ADCBufferIndex+0x1>
 422:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <ADCBufferIndex>
		recordLength = 255;
 426:	8f ef       	ldi	r24, 0xFF	; 255
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <recordLength+0x1>
 42e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <recordLength>
	}
	return 1;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	1a c0       	rjmp	.+52     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
#include <stdlib.h>
#include <string.h>

int input_makePacket(UARTPacket* returnData, char* packet){
	if(packet[0] != 0x55 || packet[1] != 0xAA){
		return -1;
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	17 c0       	rjmp	.+46     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	9f ef       	ldi	r25, 0xFF	; 255
 442:	14 c0       	rjmp	.+40     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	}
	if(packet[4] == GENERATOR){
		if(packet[7] != 0x00 || packet[8] != 0x00){
			return -1;
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	9f ef       	ldi	r25, 0xFF	; 255
 448:	11 c0       	rjmp	.+34     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	9f ef       	ldi	r25, 0xFF	; 255
 44e:	0e c0       	rjmp	.+28     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		returnData->data[0] = packet[5];
		returnData->data[1] = packet[6];
	}
	else if(packet[4] == OSCILLOSCOPE){
		if(packet[9] != 0x00 || packet[10] != 0x00){
			return -1;
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	9f ef       	ldi	r25, 0xFF	; 255
 454:	0b c0       	rjmp	.+22     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 456:	8f ef       	ldi	r24, 0xFF	; 255
 458:	9f ef       	ldi	r25, 0xFF	; 255
 45a:	08 c0       	rjmp	.+16     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		returnData->type = packet[4];
		strcpy(ADCWriteBuffer, "");
		ADCBufferIndex = 0;
		recordLength = 255;
	}
	return 1;
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	05 c0       	rjmp	.+10     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
			recordLength = inputRecordLength;
		}
	}
	else if(packet[4] == BODEPLOT){
		if(packet[5] != 0x00 || packet[6] != 0x00){
			return -1;
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	9f ef       	ldi	r25, 0xFF	; 255
 466:	02 c0       	rjmp	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 468:	8f ef       	ldi	r24, 0xFF	; 255
 46a:	9f ef       	ldi	r25, 0xFF	; 255
		strcpy(ADCWriteBuffer, "");
		ADCBufferIndex = 0;
		recordLength = 255;
	}
	return 1;
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <transmitSPIPacket>:
	UART_transChar(0x00);
	//UART_transChar('\n');
	//UART_transChar('\r');
	//for(int timer = 0; timer < 200; timer++){}
	return 1;
}
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	ec 01       	movw	r28, r24
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	70 e0       	ldi	r23, 0x00	; 0
 480:	88 81       	ld	r24, Y
 482:	cf d0       	rcall	.+414    	; 0x622 <SPI_transmit>
 484:	8b 83       	std	Y+3, r24	; 0x03
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	70 e0       	ldi	r23, 0x00	; 0
 48a:	89 81       	ldd	r24, Y+1	; 0x01
 48c:	ca d0       	rcall	.+404    	; 0x622 <SPI_transmit>
 48e:	8b 83       	std	Y+3, r24	; 0x03
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	8a 81       	ldd	r24, Y+2	; 0x02
 496:	c5 d0       	rcall	.+394    	; 0x622 <SPI_transmit>
 498:	8b 83       	std	Y+3, r24	; 0x03
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <transmitSPIPacket+0x2c>
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	84 31       	cpi	r24, 0x14	; 20
 4a4:	91 05       	cpc	r25, r1
 4a6:	e4 f3       	brlt	.-8      	; 0x4a0 <transmitSPIPacket+0x2a>
 4a8:	61 e0       	ldi	r22, 0x01	; 1
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	b9 d0       	rcall	.+370    	; 0x622 <SPI_transmit>
 4b0:	8b 83       	std	Y+3, r24	; 0x03
 4b2:	8f 3f       	cpi	r24, 0xFF	; 255
 4b4:	19 f0       	breq	.+6      	; 0x4bc <transmitSPIPacket+0x46>
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	9f ef       	ldi	r25, 0xFF	; 255
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <transmitSPIPacket+0x4a>
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <main>:

int main(void){
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
 4ce:	27 97       	sbiw	r28, 0x07	; 7
 4d0:	0f b6       	in	r0, 0x3f	; 63
 4d2:	f8 94       	cli
 4d4:	de bf       	out	0x3e, r29	; 62
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	cd bf       	out	0x3d, r28	; 61
	UARTPacket OscPacket;
	OscPacket.type = GENERATOR;
 4da:	11 e0       	ldi	r17, 0x01	; 1
 4dc:	19 83       	std	Y+1, r17	; 0x01
	SPIPacket genPacket;
	genPacket.ADDR = 0x00;
 4de:	1c 82       	std	Y+4, r1	; 0x04
	genPacket.DATA = 0x00;
 4e0:	1d 82       	std	Y+5, r1	; 0x05
	genPacket.CRC = 0xFF;
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	8e 83       	std	Y+6, r24	; 0x06
	SPI_init(MASTER);
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	81 d0       	rcall	.+258    	; 0x5ec <SPI_init>
	UART_init();
 4ea:	cb d0       	rcall	.+406    	; 0x682 <UART_init>
	ADC_init();
 4ec:	2f de       	rcall	.-930    	; 0x14c <ADC_init>
 4ee:	e0 91 f4 09 	lds	r30, 0x09F4	; 0x8009f4 <buffer>
	
//Type 0x01 button 0x00
	buffer[0] = 0x55;
 4f2:	f0 91 f5 09 	lds	r31, 0x09F5	; 0x8009f5 <buffer+0x1>
 4f6:	85 e5       	ldi	r24, 0x55	; 85
 4f8:	80 83       	st	Z, r24
 4fa:	e0 91 f4 09 	lds	r30, 0x09F4	; 0x8009f4 <buffer>
	buffer[1] = 0xAA;
 4fe:	f0 91 f5 09 	lds	r31, 0x09F5	; 0x8009f5 <buffer+0x1>
 502:	8a ea       	ldi	r24, 0xAA	; 170
 504:	81 83       	std	Z+1, r24	; 0x01
 506:	e0 91 f4 09 	lds	r30, 0x09F4	; 0x8009f4 <buffer>
	buffer[2] = 0x00;
 50a:	f0 91 f5 09 	lds	r31, 0x09F5	; 0x8009f5 <buffer+0x1>
 50e:	12 82       	std	Z+2, r1	; 0x02
 510:	89 e0       	ldi	r24, 0x09	; 9
	buffer[3] = 0x09;
 512:	83 83       	std	Z+3, r24	; 0x03
 514:	14 83       	std	Z+4, r17	; 0x04
	buffer[4] = 0x01;
 516:	15 82       	std	Z+5, r1	; 0x05
	buffer[5] = 0x00;
 518:	8f e3       	ldi	r24, 0x3F	; 63
	buffer[6] = 0x3F;
 51a:	86 83       	std	Z+6, r24	; 0x06
 51c:	17 82       	std	Z+7, r1	; 0x07
	buffer[7] = 0x00;
 51e:	10 86       	std	Z+8, r1	; 0x08
	buffer[8] = 0x00;
 520:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <packetReceiveFlag>
// 	buffer[6] = 0x00;
	
    while(1){
		//Make packet for SPI and transmission of packet
		//Remove dims and paste code into RX ISR, remove code in CTC ISR
		if(packetReceiveFlag){
 524:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <packetReceiveFlag+0x1>
 528:	89 2b       	or	r24, r25
 52a:	d1 f3       	breq	.-12     	; 0x520 <main+0x5a>
 52c:	60 91 f4 09 	lds	r22, 0x09F4	; 0x8009f4 <buffer>
			input_makePacket(&OscPacket, buffer);
 530:	70 91 f5 09 	lds	r23, 0x09F5	; 0x8009f5 <buffer+0x1>
 534:	ce 01       	movw	r24, r28
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	9d de       	rcall	.-710    	; 0x274 <input_makePacket>
 53a:	be 01       	movw	r22, r28
			packet_makeSPIPacket(&genPacket, &OscPacket);
 53c:	6f 5f       	subi	r22, 0xFF	; 255
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	ce 01       	movw	r24, r28
 542:	04 96       	adiw	r24, 0x04	; 4
 544:	15 d0       	rcall	.+42     	; 0x570 <packet_makeSPIPacket>
 546:	e0 91 f4 09 	lds	r30, 0x09F4	; 0x8009f4 <buffer>
 			
// 			Clear buffer or it wont work after time, buffer should only be left uncleared when testing
 			strcpy(buffer, "");
 54a:	f0 91 f5 09 	lds	r31, 0x09F5	; 0x8009f5 <buffer+0x1>
 54e:	10 82       	st	Z, r1
 550:	89 81       	ldd	r24, Y+1	; 0x01
 			if(OscPacket.type == GENERATOR){
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	21 f4       	brne	.+8      	; 0x55e <main+0x98>
 				if(transmitSPIPacket(&genPacket)){}
 556:	ce 01       	movw	r24, r28
 558:	04 96       	adiw	r24, 0x04	; 4
 55a:	8d df       	rcall	.-230    	; 0x476 <transmitSPIPacket>
 55c:	04 c0       	rjmp	.+8      	; 0x566 <main+0xa0>
 55e:	82 30       	cpi	r24, 0x02	; 2
 			} 
 			else if(OscPacket.type == OSCILLOSCOPE){continue;} 
 560:	f9 f2       	breq	.-66     	; 0x520 <main+0x5a>
 562:	83 30       	cpi	r24, 0x03	; 3
 			else if(OscPacket.type == BODEPLOT){continue;}
 564:	e9 f2       	breq	.-70     	; 0x520 <main+0x5a>
 566:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <packetReceiveFlag+0x1>
			packetReceiveFlag = 0;
 56a:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <packetReceiveFlag>
 56e:	d8 cf       	rjmp	.-80     	; 0x520 <main+0x5a>

00000570 <packet_makeSPIPacket>:
#include "packet.h"
#include "ADC.h"
#include <string.h>
#include <stdlib.h>

int packet_makeSPIPacket(SPIPacket* packet, UARTPacket* inputPacket){
 570:	cf 93       	push	r28
 572:	df 93       	push	r29
 574:	fc 01       	movw	r30, r24
	if(inputPacket->type == 0x01){
 576:	db 01       	movw	r26, r22
 578:	8c 91       	ld	r24, X
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	79 f5       	brne	.+94     	; 0x5dc <packet_makeSPIPacket+0x6c>
		//Enter pressed
		if(inputPacket->data[0] == 0x00){
 57e:	11 96       	adiw	r26, 0x01	; 1
 580:	0d 90       	ld	r0, X+
 582:	bc 91       	ld	r27, X
 584:	a0 2d       	mov	r26, r0
 586:	8c 91       	ld	r24, X
 588:	81 11       	cpse	r24, r1
 58a:	03 c0       	rjmp	.+6      	; 0x592 <packet_makeSPIPacket+0x22>
			packet->DATA = inputPacket->data[1];
 58c:	11 96       	adiw	r26, 0x01	; 1
 58e:	8c 91       	ld	r24, X
 590:	81 83       	std	Z+1, r24	; 0x01
		}
		//Select pressed
		if(inputPacket->data[0] == 0x01){
 592:	eb 01       	movw	r28, r22
 594:	a9 81       	ldd	r26, Y+1	; 0x01
 596:	ba 81       	ldd	r27, Y+2	; 0x02
 598:	8c 91       	ld	r24, X
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	21 f4       	brne	.+8      	; 0x5a6 <packet_makeSPIPacket+0x36>
			packet->ADDR = inputPacket->data[1];
 59e:	11 96       	adiw	r26, 0x01	; 1
 5a0:	8c 91       	ld	r24, X
 5a2:	80 83       	st	Z, r24
 5a4:	1b c0       	rjmp	.+54     	; 0x5dc <packet_makeSPIPacket+0x6c>
		}
		//Run/Stop pressed
		else if(inputPacket->data[0] == 0x02){
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	49 f4       	brne	.+18     	; 0x5bc <packet_makeSPIPacket+0x4c>
			packet->ADDR = 0x04;
 5aa:	84 e0       	ldi	r24, 0x04	; 4
 5ac:	80 83       	st	Z, r24
			packet->DATA = inputPacket->data[1];
 5ae:	eb 01       	movw	r28, r22
 5b0:	a9 81       	ldd	r26, Y+1	; 0x01
 5b2:	ba 81       	ldd	r27, Y+2	; 0x02
 5b4:	11 96       	adiw	r26, 0x01	; 1
 5b6:	8c 91       	ld	r24, X
 5b8:	81 83       	std	Z+1, r24	; 0x01
 5ba:	10 c0       	rjmp	.+32     	; 0x5dc <packet_makeSPIPacket+0x6c>
		}
		//Reset
		else if(inputPacket->data[0] == 0x03){
 5bc:	83 30       	cpi	r24, 0x03	; 3
 5be:	71 f4       	brne	.+28     	; 0x5dc <packet_makeSPIPacket+0x6c>
			packet->ADDR = 0x00;
 5c0:	10 82       	st	Z, r1
			packet->DATA = 0x00;
 5c2:	11 82       	std	Z+1, r1	; 0x01
			strcpy(ADCWriteBuffer, "");
 5c4:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <ADCWriteBuffer>
			ADCBufferIndex = 0;
 5c8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <ADCBufferIndex+0x1>
 5cc:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <ADCBufferIndex>
			recordLength = 255;
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <recordLength+0x1>
 5d8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <recordLength>
		}
	}
	packet->CRC = 255 - packet->DATA;
 5dc:	91 81       	ldd	r25, Z+1	; 0x01
 5de:	90 95       	com	r25
 5e0:	92 83       	std	Z+2, r25	; 0x02
	return 1;
}
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	08 95       	ret

000005ec <SPI_init>:

static int SPITransmitFlag = 0;

/* Replace with your library code */
int SPI_init(char role){
	sei();
 5ec:	78 94       	sei
	if(role == MASTER){
 5ee:	81 11       	cpse	r24, r1
 5f0:	0a c0       	rjmp	.+20     	; 0x606 <SPI_init+0x1a>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 5f2:	87 e0       	ldi	r24, 0x07	; 7
 5f4:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0);
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
 5fa:	92 ed       	ldi	r25, 0xD2	; 210
 5fc:	9c bd       	out	0x2c, r25	; 44
		SPSR = (1<<SPI2X);
 5fe:	8d bd       	out	0x2d, r24	; 45
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	08 95       	ret
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = (1<<PB0);
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
		SPSR = (1<<SPI2X);
	}
	else if(role == SLAVE){
 606:	8f 3f       	cpi	r24, 0xFF	; 255
 608:	49 f4       	brne	.+18     	; 0x61c <SPI_init+0x30>
		DDRB = (1<<PB3); //Sets MISO as output
 60a:	88 e0       	ldi	r24, 0x08	; 8
 60c:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE); //Initiates control register
 612:	80 e4       	ldi	r24, 0x40	; 64
 614:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 620:	08 95       	ret

00000622 <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	PORTB &= 0b11111110;
 622:	95 b1       	in	r25, 0x05	; 5
 624:	9e 7f       	andi	r25, 0xFE	; 254
 626:	95 b9       	out	0x05, r25	; 5
	SPDR = transmitionCode;
 628:	8e bd       	out	0x2e, r24	; 46
	while(!SPITransmitFlag){} //Waits for transmition to finish
 62a:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <SPITransmitFlag>
 62e:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <SPITransmitFlag+0x1>
 632:	89 2b       	or	r24, r25
 634:	d1 f3       	breq	.-12     	; 0x62a <SPI_transmit+0x8>
	SPITransmitFlag = 0;
 636:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <SPITransmitFlag+0x1>
 63a:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <SPITransmitFlag>
	if(toggleRecieve == 1){
 63e:	61 30       	cpi	r22, 0x01	; 1
 640:	71 05       	cpc	r23, r1
 642:	11 f4       	brne	.+4      	; 0x648 <SPI_transmit+0x26>
		return SPDR;
 644:	8e b5       	in	r24, 0x2e	; 46
 646:	08 95       	ret
	}
	else if(toggleRecieve == 0){
 648:	67 2b       	or	r22, r23
 64a:	29 f0       	breq	.+10     	; 0x656 <SPI_transmit+0x34>
		return 1;
	}
	PORTB |= 0b00000001;
 64c:	85 b1       	in	r24, 0x05	; 5
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	85 b9       	out	0x05, r24	; 5
	return 0;
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	08 95       	ret
	SPITransmitFlag = 0;
	if(toggleRecieve == 1){
		return SPDR;
	}
	else if(toggleRecieve == 0){
		return 1;
 656:	81 e0       	ldi	r24, 0x01	; 1
	}
	PORTB |= 0b00000001;
	return 0;
}
 658:	08 95       	ret

0000065a <__vector_24>:

ISR(SPI_STC_vect){
 65a:	1f 92       	push	r1
 65c:	0f 92       	push	r0
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	0f 92       	push	r0
 662:	11 24       	eor	r1, r1
 664:	8f 93       	push	r24
 666:	9f 93       	push	r25
	SPITransmitFlag = 1;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <SPITransmitFlag+0x1>
 670:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <SPITransmitFlag>
}
 674:	9f 91       	pop	r25
 676:	8f 91       	pop	r24
 678:	0f 90       	pop	r0
 67a:	0f be       	out	0x3f, r0	; 63
 67c:	0f 90       	pop	r0
 67e:	1f 90       	pop	r1
 680:	18 95       	reti

00000682 <UART_init>:
	if(RX == '\r'){
		carriageReturn = 1;
	}
	else if(carriageReturn && RX == '\n'){
		receiveComplete = 1;
		bufferIndex = 0;
 682:	61 e0       	ldi	r22, 0x01	; 1
 684:	70 e0       	ldi	r23, 0x00	; 0
 686:	84 e6       	ldi	r24, 0x64	; 100
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	7f d2       	rcall	.+1278   	; 0xb8a <calloc>
 68c:	90 93 f5 09 	sts	0x09F5, r25	; 0x8009f5 <buffer+0x1>
 690:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <buffer>
 694:	78 94       	sei
 696:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 69a:	83 e3       	ldi	r24, 0x33	; 51
 69c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 6a0:	e1 ec       	ldi	r30, 0xC1	; 193
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	88 69       	ori	r24, 0x98	; 152
 6a8:	80 83       	st	Z, r24
 6aa:	e2 ec       	ldi	r30, 0xC2	; 194
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	86 60       	ori	r24, 0x06	; 6
 6b2:	80 83       	st	Z, r24
 6b4:	08 95       	ret

000006b6 <dims>:
	}
}

void dims(){
	if(bufferIndex == 3){
 6b6:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <bufferIndex>
 6ba:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <bufferIndex+0x1>
 6be:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <bufferIndex+0x2>
 6c2:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <bufferIndex+0x3>
 6c6:	03 97       	sbiw	r24, 0x03	; 3
 6c8:	a1 05       	cpc	r26, r1
 6ca:	b1 05       	cpc	r27, r1
 6cc:	e9 f4       	brne	.+58     	; 0x708 <dims+0x52>
		if(buffer[0] == 0x55 && buffer[1] == 0xAA){
 6ce:	e0 91 f4 09 	lds	r30, 0x09F4	; 0x8009f4 <buffer>
 6d2:	f0 91 f5 09 	lds	r31, 0x09F5	; 0x8009f5 <buffer+0x1>
 6d6:	80 81       	ld	r24, Z
 6d8:	85 35       	cpi	r24, 0x55	; 85
 6da:	b1 f4       	brne	.+44     	; 0x708 <dims+0x52>
 6dc:	81 81       	ldd	r24, Z+1	; 0x01
 6de:	8a 3a       	cpi	r24, 0xAA	; 170
 6e0:	99 f4       	brne	.+38     	; 0x708 <dims+0x52>
			packetLength = (buffer[2]<<8) + buffer[3];
 6e2:	82 81       	ldd	r24, Z+2	; 0x02
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	98 2f       	mov	r25, r24
 6e8:	88 27       	eor	r24, r24
 6ea:	23 81       	ldd	r18, Z+3	; 0x03
 6ec:	82 0f       	add	r24, r18
 6ee:	91 1d       	adc	r25, r1
 6f0:	09 2e       	mov	r0, r25
 6f2:	00 0c       	add	r0, r0
 6f4:	aa 0b       	sbc	r26, r26
 6f6:	bb 0b       	sbc	r27, r27
 6f8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <packetLength>
 6fc:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <packetLength+0x1>
 700:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <packetLength+0x2>
 704:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <packetLength+0x3>
		}
	}
	if(bufferIndex == (packetLength - 1) && bufferIndex > 3){
 708:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <packetLength>
 70c:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <packetLength+0x1>
 710:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <packetLength+0x2>
 714:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <packetLength+0x3>
 718:	01 97       	sbiw	r24, 0x01	; 1
 71a:	a1 09       	sbc	r26, r1
 71c:	b1 09       	sbc	r27, r1
 71e:	40 91 1e 02 	lds	r20, 0x021E	; 0x80021e <bufferIndex>
 722:	50 91 1f 02 	lds	r21, 0x021F	; 0x80021f <bufferIndex+0x1>
 726:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <bufferIndex+0x2>
 72a:	70 91 21 02 	lds	r23, 0x0221	; 0x800221 <bufferIndex+0x3>
 72e:	84 17       	cp	r24, r20
 730:	95 07       	cpc	r25, r21
 732:	a6 07       	cpc	r26, r22
 734:	b7 07       	cpc	r27, r23
 736:	d9 f4       	brne	.+54     	; 0x76e <dims+0xb8>
 738:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <bufferIndex>
 73c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <bufferIndex+0x1>
 740:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <bufferIndex+0x2>
 744:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <bufferIndex+0x3>
 748:	04 97       	sbiw	r24, 0x04	; 4
 74a:	a1 05       	cpc	r26, r1
 74c:	b1 05       	cpc	r27, r1
 74e:	78 f0       	brcs	.+30     	; 0x76e <dims+0xb8>
		packetReceiveFlag = 1;
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <packetReceiveFlag+0x1>
 758:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <packetReceiveFlag>
		bufferIndex = 0;
 75c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <bufferIndex>
 760:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <bufferIndex+0x1>
 764:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <bufferIndex+0x2>
 768:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <bufferIndex+0x3>
 76c:	08 95       	ret
	} else{
		bufferIndex += 1;
 76e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <bufferIndex>
 772:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <bufferIndex+0x1>
 776:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <bufferIndex+0x2>
 77a:	b0 91 21 02 	lds	r27, 0x0221	; 0x800221 <bufferIndex+0x3>
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	a1 1d       	adc	r26, r1
 782:	b1 1d       	adc	r27, r1
 784:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <bufferIndex>
 788:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <bufferIndex+0x1>
 78c:	a0 93 20 02 	sts	0x0220, r26	; 0x800220 <bufferIndex+0x2>
 790:	b0 93 21 02 	sts	0x0221, r27	; 0x800221 <bufferIndex+0x3>
 794:	08 95       	ret

00000796 <__vector_25>:
	}
}

ISR(USART0_RX_vect){
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	8f 93       	push	r24
	RX = UDR0;
 7a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 7a6:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <RX>
	//buffer[bufferIndex] = RX;
	
 7aa:	8f 91       	pop	r24
 7ac:	0f 90       	pop	r0
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	0f 90       	pop	r0
 7b2:	1f 90       	pop	r1
 7b4:	18 95       	reti

000007b6 <__subsf3>:
 7b6:	50 58       	subi	r21, 0x80	; 128

000007b8 <__addsf3>:
 7b8:	bb 27       	eor	r27, r27
 7ba:	aa 27       	eor	r26, r26
 7bc:	0e d0       	rcall	.+28     	; 0x7da <__addsf3x>
 7be:	48 c1       	rjmp	.+656    	; 0xa50 <__fp_round>
 7c0:	39 d1       	rcall	.+626    	; 0xa34 <__fp_pscA>
 7c2:	30 f0       	brcs	.+12     	; 0x7d0 <__addsf3+0x18>
 7c4:	3e d1       	rcall	.+636    	; 0xa42 <__fp_pscB>
 7c6:	20 f0       	brcs	.+8      	; 0x7d0 <__addsf3+0x18>
 7c8:	31 f4       	brne	.+12     	; 0x7d6 <__addsf3+0x1e>
 7ca:	9f 3f       	cpi	r25, 0xFF	; 255
 7cc:	11 f4       	brne	.+4      	; 0x7d2 <__addsf3+0x1a>
 7ce:	1e f4       	brtc	.+6      	; 0x7d6 <__addsf3+0x1e>
 7d0:	2e c1       	rjmp	.+604    	; 0xa2e <__fp_nan>
 7d2:	0e f4       	brtc	.+2      	; 0x7d6 <__addsf3+0x1e>
 7d4:	e0 95       	com	r30
 7d6:	e7 fb       	bst	r30, 7
 7d8:	24 c1       	rjmp	.+584    	; 0xa22 <__fp_inf>

000007da <__addsf3x>:
 7da:	e9 2f       	mov	r30, r25
 7dc:	4a d1       	rcall	.+660    	; 0xa72 <__fp_split3>
 7de:	80 f3       	brcs	.-32     	; 0x7c0 <__addsf3+0x8>
 7e0:	ba 17       	cp	r27, r26
 7e2:	62 07       	cpc	r22, r18
 7e4:	73 07       	cpc	r23, r19
 7e6:	84 07       	cpc	r24, r20
 7e8:	95 07       	cpc	r25, r21
 7ea:	18 f0       	brcs	.+6      	; 0x7f2 <__addsf3x+0x18>
 7ec:	71 f4       	brne	.+28     	; 0x80a <__addsf3x+0x30>
 7ee:	9e f5       	brtc	.+102    	; 0x856 <__addsf3x+0x7c>
 7f0:	62 c1       	rjmp	.+708    	; 0xab6 <__fp_zero>
 7f2:	0e f4       	brtc	.+2      	; 0x7f6 <__addsf3x+0x1c>
 7f4:	e0 95       	com	r30
 7f6:	0b 2e       	mov	r0, r27
 7f8:	ba 2f       	mov	r27, r26
 7fa:	a0 2d       	mov	r26, r0
 7fc:	0b 01       	movw	r0, r22
 7fe:	b9 01       	movw	r22, r18
 800:	90 01       	movw	r18, r0
 802:	0c 01       	movw	r0, r24
 804:	ca 01       	movw	r24, r20
 806:	a0 01       	movw	r20, r0
 808:	11 24       	eor	r1, r1
 80a:	ff 27       	eor	r31, r31
 80c:	59 1b       	sub	r21, r25
 80e:	99 f0       	breq	.+38     	; 0x836 <__addsf3x+0x5c>
 810:	59 3f       	cpi	r21, 0xF9	; 249
 812:	50 f4       	brcc	.+20     	; 0x828 <__addsf3x+0x4e>
 814:	50 3e       	cpi	r21, 0xE0	; 224
 816:	68 f1       	brcs	.+90     	; 0x872 <__addsf3x+0x98>
 818:	1a 16       	cp	r1, r26
 81a:	f0 40       	sbci	r31, 0x00	; 0
 81c:	a2 2f       	mov	r26, r18
 81e:	23 2f       	mov	r18, r19
 820:	34 2f       	mov	r19, r20
 822:	44 27       	eor	r20, r20
 824:	58 5f       	subi	r21, 0xF8	; 248
 826:	f3 cf       	rjmp	.-26     	; 0x80e <__addsf3x+0x34>
 828:	46 95       	lsr	r20
 82a:	37 95       	ror	r19
 82c:	27 95       	ror	r18
 82e:	a7 95       	ror	r26
 830:	f0 40       	sbci	r31, 0x00	; 0
 832:	53 95       	inc	r21
 834:	c9 f7       	brne	.-14     	; 0x828 <__addsf3x+0x4e>
 836:	7e f4       	brtc	.+30     	; 0x856 <__addsf3x+0x7c>
 838:	1f 16       	cp	r1, r31
 83a:	ba 0b       	sbc	r27, r26
 83c:	62 0b       	sbc	r22, r18
 83e:	73 0b       	sbc	r23, r19
 840:	84 0b       	sbc	r24, r20
 842:	ba f0       	brmi	.+46     	; 0x872 <__addsf3x+0x98>
 844:	91 50       	subi	r25, 0x01	; 1
 846:	a1 f0       	breq	.+40     	; 0x870 <__addsf3x+0x96>
 848:	ff 0f       	add	r31, r31
 84a:	bb 1f       	adc	r27, r27
 84c:	66 1f       	adc	r22, r22
 84e:	77 1f       	adc	r23, r23
 850:	88 1f       	adc	r24, r24
 852:	c2 f7       	brpl	.-16     	; 0x844 <__addsf3x+0x6a>
 854:	0e c0       	rjmp	.+28     	; 0x872 <__addsf3x+0x98>
 856:	ba 0f       	add	r27, r26
 858:	62 1f       	adc	r22, r18
 85a:	73 1f       	adc	r23, r19
 85c:	84 1f       	adc	r24, r20
 85e:	48 f4       	brcc	.+18     	; 0x872 <__addsf3x+0x98>
 860:	87 95       	ror	r24
 862:	77 95       	ror	r23
 864:	67 95       	ror	r22
 866:	b7 95       	ror	r27
 868:	f7 95       	ror	r31
 86a:	9e 3f       	cpi	r25, 0xFE	; 254
 86c:	08 f0       	brcs	.+2      	; 0x870 <__addsf3x+0x96>
 86e:	b3 cf       	rjmp	.-154    	; 0x7d6 <__addsf3+0x1e>
 870:	93 95       	inc	r25
 872:	88 0f       	add	r24, r24
 874:	08 f0       	brcs	.+2      	; 0x878 <__addsf3x+0x9e>
 876:	99 27       	eor	r25, r25
 878:	ee 0f       	add	r30, r30
 87a:	97 95       	ror	r25
 87c:	87 95       	ror	r24
 87e:	08 95       	ret

00000880 <__divsf3>:
 880:	0c d0       	rcall	.+24     	; 0x89a <__divsf3x>
 882:	e6 c0       	rjmp	.+460    	; 0xa50 <__fp_round>
 884:	de d0       	rcall	.+444    	; 0xa42 <__fp_pscB>
 886:	40 f0       	brcs	.+16     	; 0x898 <__divsf3+0x18>
 888:	d5 d0       	rcall	.+426    	; 0xa34 <__fp_pscA>
 88a:	30 f0       	brcs	.+12     	; 0x898 <__divsf3+0x18>
 88c:	21 f4       	brne	.+8      	; 0x896 <__divsf3+0x16>
 88e:	5f 3f       	cpi	r21, 0xFF	; 255
 890:	19 f0       	breq	.+6      	; 0x898 <__divsf3+0x18>
 892:	c7 c0       	rjmp	.+398    	; 0xa22 <__fp_inf>
 894:	51 11       	cpse	r21, r1
 896:	10 c1       	rjmp	.+544    	; 0xab8 <__fp_szero>
 898:	ca c0       	rjmp	.+404    	; 0xa2e <__fp_nan>

0000089a <__divsf3x>:
 89a:	eb d0       	rcall	.+470    	; 0xa72 <__fp_split3>
 89c:	98 f3       	brcs	.-26     	; 0x884 <__divsf3+0x4>

0000089e <__divsf3_pse>:
 89e:	99 23       	and	r25, r25
 8a0:	c9 f3       	breq	.-14     	; 0x894 <__divsf3+0x14>
 8a2:	55 23       	and	r21, r21
 8a4:	b1 f3       	breq	.-20     	; 0x892 <__divsf3+0x12>
 8a6:	95 1b       	sub	r25, r21
 8a8:	55 0b       	sbc	r21, r21
 8aa:	bb 27       	eor	r27, r27
 8ac:	aa 27       	eor	r26, r26
 8ae:	62 17       	cp	r22, r18
 8b0:	73 07       	cpc	r23, r19
 8b2:	84 07       	cpc	r24, r20
 8b4:	38 f0       	brcs	.+14     	; 0x8c4 <__divsf3_pse+0x26>
 8b6:	9f 5f       	subi	r25, 0xFF	; 255
 8b8:	5f 4f       	sbci	r21, 0xFF	; 255
 8ba:	22 0f       	add	r18, r18
 8bc:	33 1f       	adc	r19, r19
 8be:	44 1f       	adc	r20, r20
 8c0:	aa 1f       	adc	r26, r26
 8c2:	a9 f3       	breq	.-22     	; 0x8ae <__divsf3_pse+0x10>
 8c4:	33 d0       	rcall	.+102    	; 0x92c <__divsf3_pse+0x8e>
 8c6:	0e 2e       	mov	r0, r30
 8c8:	3a f0       	brmi	.+14     	; 0x8d8 <__divsf3_pse+0x3a>
 8ca:	e0 e8       	ldi	r30, 0x80	; 128
 8cc:	30 d0       	rcall	.+96     	; 0x92e <__divsf3_pse+0x90>
 8ce:	91 50       	subi	r25, 0x01	; 1
 8d0:	50 40       	sbci	r21, 0x00	; 0
 8d2:	e6 95       	lsr	r30
 8d4:	00 1c       	adc	r0, r0
 8d6:	ca f7       	brpl	.-14     	; 0x8ca <__divsf3_pse+0x2c>
 8d8:	29 d0       	rcall	.+82     	; 0x92c <__divsf3_pse+0x8e>
 8da:	fe 2f       	mov	r31, r30
 8dc:	27 d0       	rcall	.+78     	; 0x92c <__divsf3_pse+0x8e>
 8de:	66 0f       	add	r22, r22
 8e0:	77 1f       	adc	r23, r23
 8e2:	88 1f       	adc	r24, r24
 8e4:	bb 1f       	adc	r27, r27
 8e6:	26 17       	cp	r18, r22
 8e8:	37 07       	cpc	r19, r23
 8ea:	48 07       	cpc	r20, r24
 8ec:	ab 07       	cpc	r26, r27
 8ee:	b0 e8       	ldi	r27, 0x80	; 128
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <__divsf3_pse+0x56>
 8f2:	bb 0b       	sbc	r27, r27
 8f4:	80 2d       	mov	r24, r0
 8f6:	bf 01       	movw	r22, r30
 8f8:	ff 27       	eor	r31, r31
 8fa:	93 58       	subi	r25, 0x83	; 131
 8fc:	5f 4f       	sbci	r21, 0xFF	; 255
 8fe:	2a f0       	brmi	.+10     	; 0x90a <__divsf3_pse+0x6c>
 900:	9e 3f       	cpi	r25, 0xFE	; 254
 902:	51 05       	cpc	r21, r1
 904:	68 f0       	brcs	.+26     	; 0x920 <__divsf3_pse+0x82>
 906:	8d c0       	rjmp	.+282    	; 0xa22 <__fp_inf>
 908:	d7 c0       	rjmp	.+430    	; 0xab8 <__fp_szero>
 90a:	5f 3f       	cpi	r21, 0xFF	; 255
 90c:	ec f3       	brlt	.-6      	; 0x908 <__divsf3_pse+0x6a>
 90e:	98 3e       	cpi	r25, 0xE8	; 232
 910:	dc f3       	brlt	.-10     	; 0x908 <__divsf3_pse+0x6a>
 912:	86 95       	lsr	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	b7 95       	ror	r27
 91a:	f7 95       	ror	r31
 91c:	9f 5f       	subi	r25, 0xFF	; 255
 91e:	c9 f7       	brne	.-14     	; 0x912 <__divsf3_pse+0x74>
 920:	88 0f       	add	r24, r24
 922:	91 1d       	adc	r25, r1
 924:	96 95       	lsr	r25
 926:	87 95       	ror	r24
 928:	97 f9       	bld	r25, 7
 92a:	08 95       	ret
 92c:	e1 e0       	ldi	r30, 0x01	; 1
 92e:	66 0f       	add	r22, r22
 930:	77 1f       	adc	r23, r23
 932:	88 1f       	adc	r24, r24
 934:	bb 1f       	adc	r27, r27
 936:	62 17       	cp	r22, r18
 938:	73 07       	cpc	r23, r19
 93a:	84 07       	cpc	r24, r20
 93c:	ba 07       	cpc	r27, r26
 93e:	20 f0       	brcs	.+8      	; 0x948 <__divsf3_pse+0xaa>
 940:	62 1b       	sub	r22, r18
 942:	73 0b       	sbc	r23, r19
 944:	84 0b       	sbc	r24, r20
 946:	ba 0b       	sbc	r27, r26
 948:	ee 1f       	adc	r30, r30
 94a:	88 f7       	brcc	.-30     	; 0x92e <__divsf3_pse+0x90>
 94c:	e0 95       	com	r30
 94e:	08 95       	ret

00000950 <__fixunssfsi>:
 950:	98 d0       	rcall	.+304    	; 0xa82 <__fp_splitA>
 952:	88 f0       	brcs	.+34     	; 0x976 <__fixunssfsi+0x26>
 954:	9f 57       	subi	r25, 0x7F	; 127
 956:	90 f0       	brcs	.+36     	; 0x97c <__fixunssfsi+0x2c>
 958:	b9 2f       	mov	r27, r25
 95a:	99 27       	eor	r25, r25
 95c:	b7 51       	subi	r27, 0x17	; 23
 95e:	a0 f0       	brcs	.+40     	; 0x988 <__fixunssfsi+0x38>
 960:	d1 f0       	breq	.+52     	; 0x996 <__fixunssfsi+0x46>
 962:	66 0f       	add	r22, r22
 964:	77 1f       	adc	r23, r23
 966:	88 1f       	adc	r24, r24
 968:	99 1f       	adc	r25, r25
 96a:	1a f0       	brmi	.+6      	; 0x972 <__fixunssfsi+0x22>
 96c:	ba 95       	dec	r27
 96e:	c9 f7       	brne	.-14     	; 0x962 <__fixunssfsi+0x12>
 970:	12 c0       	rjmp	.+36     	; 0x996 <__fixunssfsi+0x46>
 972:	b1 30       	cpi	r27, 0x01	; 1
 974:	81 f0       	breq	.+32     	; 0x996 <__fixunssfsi+0x46>
 976:	9f d0       	rcall	.+318    	; 0xab6 <__fp_zero>
 978:	b1 e0       	ldi	r27, 0x01	; 1
 97a:	08 95       	ret
 97c:	9c c0       	rjmp	.+312    	; 0xab6 <__fp_zero>
 97e:	67 2f       	mov	r22, r23
 980:	78 2f       	mov	r23, r24
 982:	88 27       	eor	r24, r24
 984:	b8 5f       	subi	r27, 0xF8	; 248
 986:	39 f0       	breq	.+14     	; 0x996 <__fixunssfsi+0x46>
 988:	b9 3f       	cpi	r27, 0xF9	; 249
 98a:	cc f3       	brlt	.-14     	; 0x97e <__fixunssfsi+0x2e>
 98c:	86 95       	lsr	r24
 98e:	77 95       	ror	r23
 990:	67 95       	ror	r22
 992:	b3 95       	inc	r27
 994:	d9 f7       	brne	.-10     	; 0x98c <__fixunssfsi+0x3c>
 996:	3e f4       	brtc	.+14     	; 0x9a6 <__fixunssfsi+0x56>
 998:	90 95       	com	r25
 99a:	80 95       	com	r24
 99c:	70 95       	com	r23
 99e:	61 95       	neg	r22
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255
 9a2:	8f 4f       	sbci	r24, 0xFF	; 255
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	08 95       	ret

000009a8 <__floatunsisf>:
 9a8:	e8 94       	clt
 9aa:	09 c0       	rjmp	.+18     	; 0x9be <__floatsisf+0x12>

000009ac <__floatsisf>:
 9ac:	97 fb       	bst	r25, 7
 9ae:	3e f4       	brtc	.+14     	; 0x9be <__floatsisf+0x12>
 9b0:	90 95       	com	r25
 9b2:	80 95       	com	r24
 9b4:	70 95       	com	r23
 9b6:	61 95       	neg	r22
 9b8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ba:	8f 4f       	sbci	r24, 0xFF	; 255
 9bc:	9f 4f       	sbci	r25, 0xFF	; 255
 9be:	99 23       	and	r25, r25
 9c0:	a9 f0       	breq	.+42     	; 0x9ec <__floatsisf+0x40>
 9c2:	f9 2f       	mov	r31, r25
 9c4:	96 e9       	ldi	r25, 0x96	; 150
 9c6:	bb 27       	eor	r27, r27
 9c8:	93 95       	inc	r25
 9ca:	f6 95       	lsr	r31
 9cc:	87 95       	ror	r24
 9ce:	77 95       	ror	r23
 9d0:	67 95       	ror	r22
 9d2:	b7 95       	ror	r27
 9d4:	f1 11       	cpse	r31, r1
 9d6:	f8 cf       	rjmp	.-16     	; 0x9c8 <__floatsisf+0x1c>
 9d8:	fa f4       	brpl	.+62     	; 0xa18 <__floatsisf+0x6c>
 9da:	bb 0f       	add	r27, r27
 9dc:	11 f4       	brne	.+4      	; 0x9e2 <__floatsisf+0x36>
 9de:	60 ff       	sbrs	r22, 0
 9e0:	1b c0       	rjmp	.+54     	; 0xa18 <__floatsisf+0x6c>
 9e2:	6f 5f       	subi	r22, 0xFF	; 255
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	16 c0       	rjmp	.+44     	; 0xa18 <__floatsisf+0x6c>
 9ec:	88 23       	and	r24, r24
 9ee:	11 f0       	breq	.+4      	; 0x9f4 <__floatsisf+0x48>
 9f0:	96 e9       	ldi	r25, 0x96	; 150
 9f2:	11 c0       	rjmp	.+34     	; 0xa16 <__floatsisf+0x6a>
 9f4:	77 23       	and	r23, r23
 9f6:	21 f0       	breq	.+8      	; 0xa00 <__floatsisf+0x54>
 9f8:	9e e8       	ldi	r25, 0x8E	; 142
 9fa:	87 2f       	mov	r24, r23
 9fc:	76 2f       	mov	r23, r22
 9fe:	05 c0       	rjmp	.+10     	; 0xa0a <__floatsisf+0x5e>
 a00:	66 23       	and	r22, r22
 a02:	71 f0       	breq	.+28     	; 0xa20 <__floatsisf+0x74>
 a04:	96 e8       	ldi	r25, 0x86	; 134
 a06:	86 2f       	mov	r24, r22
 a08:	70 e0       	ldi	r23, 0x00	; 0
 a0a:	60 e0       	ldi	r22, 0x00	; 0
 a0c:	2a f0       	brmi	.+10     	; 0xa18 <__floatsisf+0x6c>
 a0e:	9a 95       	dec	r25
 a10:	66 0f       	add	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	88 1f       	adc	r24, r24
 a16:	da f7       	brpl	.-10     	; 0xa0e <__floatsisf+0x62>
 a18:	88 0f       	add	r24, r24
 a1a:	96 95       	lsr	r25
 a1c:	87 95       	ror	r24
 a1e:	97 f9       	bld	r25, 7
 a20:	08 95       	ret

00000a22 <__fp_inf>:
 a22:	97 f9       	bld	r25, 7
 a24:	9f 67       	ori	r25, 0x7F	; 127
 a26:	80 e8       	ldi	r24, 0x80	; 128
 a28:	70 e0       	ldi	r23, 0x00	; 0
 a2a:	60 e0       	ldi	r22, 0x00	; 0
 a2c:	08 95       	ret

00000a2e <__fp_nan>:
 a2e:	9f ef       	ldi	r25, 0xFF	; 255
 a30:	80 ec       	ldi	r24, 0xC0	; 192
 a32:	08 95       	ret

00000a34 <__fp_pscA>:
 a34:	00 24       	eor	r0, r0
 a36:	0a 94       	dec	r0
 a38:	16 16       	cp	r1, r22
 a3a:	17 06       	cpc	r1, r23
 a3c:	18 06       	cpc	r1, r24
 a3e:	09 06       	cpc	r0, r25
 a40:	08 95       	ret

00000a42 <__fp_pscB>:
 a42:	00 24       	eor	r0, r0
 a44:	0a 94       	dec	r0
 a46:	12 16       	cp	r1, r18
 a48:	13 06       	cpc	r1, r19
 a4a:	14 06       	cpc	r1, r20
 a4c:	05 06       	cpc	r0, r21
 a4e:	08 95       	ret

00000a50 <__fp_round>:
 a50:	09 2e       	mov	r0, r25
 a52:	03 94       	inc	r0
 a54:	00 0c       	add	r0, r0
 a56:	11 f4       	brne	.+4      	; 0xa5c <__fp_round+0xc>
 a58:	88 23       	and	r24, r24
 a5a:	52 f0       	brmi	.+20     	; 0xa70 <__fp_round+0x20>
 a5c:	bb 0f       	add	r27, r27
 a5e:	40 f4       	brcc	.+16     	; 0xa70 <__fp_round+0x20>
 a60:	bf 2b       	or	r27, r31
 a62:	11 f4       	brne	.+4      	; 0xa68 <__fp_round+0x18>
 a64:	60 ff       	sbrs	r22, 0
 a66:	04 c0       	rjmp	.+8      	; 0xa70 <__fp_round+0x20>
 a68:	6f 5f       	subi	r22, 0xFF	; 255
 a6a:	7f 4f       	sbci	r23, 0xFF	; 255
 a6c:	8f 4f       	sbci	r24, 0xFF	; 255
 a6e:	9f 4f       	sbci	r25, 0xFF	; 255
 a70:	08 95       	ret

00000a72 <__fp_split3>:
 a72:	57 fd       	sbrc	r21, 7
 a74:	90 58       	subi	r25, 0x80	; 128
 a76:	44 0f       	add	r20, r20
 a78:	55 1f       	adc	r21, r21
 a7a:	59 f0       	breq	.+22     	; 0xa92 <__fp_splitA+0x10>
 a7c:	5f 3f       	cpi	r21, 0xFF	; 255
 a7e:	71 f0       	breq	.+28     	; 0xa9c <__fp_splitA+0x1a>
 a80:	47 95       	ror	r20

00000a82 <__fp_splitA>:
 a82:	88 0f       	add	r24, r24
 a84:	97 fb       	bst	r25, 7
 a86:	99 1f       	adc	r25, r25
 a88:	61 f0       	breq	.+24     	; 0xaa2 <__fp_splitA+0x20>
 a8a:	9f 3f       	cpi	r25, 0xFF	; 255
 a8c:	79 f0       	breq	.+30     	; 0xaac <__fp_splitA+0x2a>
 a8e:	87 95       	ror	r24
 a90:	08 95       	ret
 a92:	12 16       	cp	r1, r18
 a94:	13 06       	cpc	r1, r19
 a96:	14 06       	cpc	r1, r20
 a98:	55 1f       	adc	r21, r21
 a9a:	f2 cf       	rjmp	.-28     	; 0xa80 <__fp_split3+0xe>
 a9c:	46 95       	lsr	r20
 a9e:	f1 df       	rcall	.-30     	; 0xa82 <__fp_splitA>
 aa0:	08 c0       	rjmp	.+16     	; 0xab2 <__fp_splitA+0x30>
 aa2:	16 16       	cp	r1, r22
 aa4:	17 06       	cpc	r1, r23
 aa6:	18 06       	cpc	r1, r24
 aa8:	99 1f       	adc	r25, r25
 aaa:	f1 cf       	rjmp	.-30     	; 0xa8e <__fp_splitA+0xc>
 aac:	86 95       	lsr	r24
 aae:	71 05       	cpc	r23, r1
 ab0:	61 05       	cpc	r22, r1
 ab2:	08 94       	sec
 ab4:	08 95       	ret

00000ab6 <__fp_zero>:
 ab6:	e8 94       	clt

00000ab8 <__fp_szero>:
 ab8:	bb 27       	eor	r27, r27
 aba:	66 27       	eor	r22, r22
 abc:	77 27       	eor	r23, r23
 abe:	cb 01       	movw	r24, r22
 ac0:	97 f9       	bld	r25, 7
 ac2:	08 95       	ret

00000ac4 <__mulsf3>:
 ac4:	0b d0       	rcall	.+22     	; 0xadc <__mulsf3x>
 ac6:	c4 cf       	rjmp	.-120    	; 0xa50 <__fp_round>
 ac8:	b5 df       	rcall	.-150    	; 0xa34 <__fp_pscA>
 aca:	28 f0       	brcs	.+10     	; 0xad6 <__mulsf3+0x12>
 acc:	ba df       	rcall	.-140    	; 0xa42 <__fp_pscB>
 ace:	18 f0       	brcs	.+6      	; 0xad6 <__mulsf3+0x12>
 ad0:	95 23       	and	r25, r21
 ad2:	09 f0       	breq	.+2      	; 0xad6 <__mulsf3+0x12>
 ad4:	a6 cf       	rjmp	.-180    	; 0xa22 <__fp_inf>
 ad6:	ab cf       	rjmp	.-170    	; 0xa2e <__fp_nan>
 ad8:	11 24       	eor	r1, r1
 ada:	ee cf       	rjmp	.-36     	; 0xab8 <__fp_szero>

00000adc <__mulsf3x>:
 adc:	ca df       	rcall	.-108    	; 0xa72 <__fp_split3>
 ade:	a0 f3       	brcs	.-24     	; 0xac8 <__mulsf3+0x4>

00000ae0 <__mulsf3_pse>:
 ae0:	95 9f       	mul	r25, r21
 ae2:	d1 f3       	breq	.-12     	; 0xad8 <__mulsf3+0x14>
 ae4:	95 0f       	add	r25, r21
 ae6:	50 e0       	ldi	r21, 0x00	; 0
 ae8:	55 1f       	adc	r21, r21
 aea:	62 9f       	mul	r22, r18
 aec:	f0 01       	movw	r30, r0
 aee:	72 9f       	mul	r23, r18
 af0:	bb 27       	eor	r27, r27
 af2:	f0 0d       	add	r31, r0
 af4:	b1 1d       	adc	r27, r1
 af6:	63 9f       	mul	r22, r19
 af8:	aa 27       	eor	r26, r26
 afa:	f0 0d       	add	r31, r0
 afc:	b1 1d       	adc	r27, r1
 afe:	aa 1f       	adc	r26, r26
 b00:	64 9f       	mul	r22, r20
 b02:	66 27       	eor	r22, r22
 b04:	b0 0d       	add	r27, r0
 b06:	a1 1d       	adc	r26, r1
 b08:	66 1f       	adc	r22, r22
 b0a:	82 9f       	mul	r24, r18
 b0c:	22 27       	eor	r18, r18
 b0e:	b0 0d       	add	r27, r0
 b10:	a1 1d       	adc	r26, r1
 b12:	62 1f       	adc	r22, r18
 b14:	73 9f       	mul	r23, r19
 b16:	b0 0d       	add	r27, r0
 b18:	a1 1d       	adc	r26, r1
 b1a:	62 1f       	adc	r22, r18
 b1c:	83 9f       	mul	r24, r19
 b1e:	a0 0d       	add	r26, r0
 b20:	61 1d       	adc	r22, r1
 b22:	22 1f       	adc	r18, r18
 b24:	74 9f       	mul	r23, r20
 b26:	33 27       	eor	r19, r19
 b28:	a0 0d       	add	r26, r0
 b2a:	61 1d       	adc	r22, r1
 b2c:	23 1f       	adc	r18, r19
 b2e:	84 9f       	mul	r24, r20
 b30:	60 0d       	add	r22, r0
 b32:	21 1d       	adc	r18, r1
 b34:	82 2f       	mov	r24, r18
 b36:	76 2f       	mov	r23, r22
 b38:	6a 2f       	mov	r22, r26
 b3a:	11 24       	eor	r1, r1
 b3c:	9f 57       	subi	r25, 0x7F	; 127
 b3e:	50 40       	sbci	r21, 0x00	; 0
 b40:	8a f0       	brmi	.+34     	; 0xb64 <__mulsf3_pse+0x84>
 b42:	e1 f0       	breq	.+56     	; 0xb7c <__mulsf3_pse+0x9c>
 b44:	88 23       	and	r24, r24
 b46:	4a f0       	brmi	.+18     	; 0xb5a <__mulsf3_pse+0x7a>
 b48:	ee 0f       	add	r30, r30
 b4a:	ff 1f       	adc	r31, r31
 b4c:	bb 1f       	adc	r27, r27
 b4e:	66 1f       	adc	r22, r22
 b50:	77 1f       	adc	r23, r23
 b52:	88 1f       	adc	r24, r24
 b54:	91 50       	subi	r25, 0x01	; 1
 b56:	50 40       	sbci	r21, 0x00	; 0
 b58:	a9 f7       	brne	.-22     	; 0xb44 <__mulsf3_pse+0x64>
 b5a:	9e 3f       	cpi	r25, 0xFE	; 254
 b5c:	51 05       	cpc	r21, r1
 b5e:	70 f0       	brcs	.+28     	; 0xb7c <__mulsf3_pse+0x9c>
 b60:	60 cf       	rjmp	.-320    	; 0xa22 <__fp_inf>
 b62:	aa cf       	rjmp	.-172    	; 0xab8 <__fp_szero>
 b64:	5f 3f       	cpi	r21, 0xFF	; 255
 b66:	ec f3       	brlt	.-6      	; 0xb62 <__mulsf3_pse+0x82>
 b68:	98 3e       	cpi	r25, 0xE8	; 232
 b6a:	dc f3       	brlt	.-10     	; 0xb62 <__mulsf3_pse+0x82>
 b6c:	86 95       	lsr	r24
 b6e:	77 95       	ror	r23
 b70:	67 95       	ror	r22
 b72:	b7 95       	ror	r27
 b74:	f7 95       	ror	r31
 b76:	e7 95       	ror	r30
 b78:	9f 5f       	subi	r25, 0xFF	; 255
 b7a:	c1 f7       	brne	.-16     	; 0xb6c <__mulsf3_pse+0x8c>
 b7c:	fe 2b       	or	r31, r30
 b7e:	88 0f       	add	r24, r24
 b80:	91 1d       	adc	r25, r1
 b82:	96 95       	lsr	r25
 b84:	87 95       	ror	r24
 b86:	97 f9       	bld	r25, 7
 b88:	08 95       	ret

00000b8a <calloc>:
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	86 9f       	mul	r24, r22
 b94:	80 01       	movw	r16, r0
 b96:	87 9f       	mul	r24, r23
 b98:	10 0d       	add	r17, r0
 b9a:	96 9f       	mul	r25, r22
 b9c:	10 0d       	add	r17, r0
 b9e:	11 24       	eor	r1, r1
 ba0:	c8 01       	movw	r24, r16
 ba2:	0d d0       	rcall	.+26     	; 0xbbe <malloc>
 ba4:	ec 01       	movw	r28, r24
 ba6:	00 97       	sbiw	r24, 0x00	; 0
 ba8:	21 f0       	breq	.+8      	; 0xbb2 <calloc+0x28>
 baa:	a8 01       	movw	r20, r16
 bac:	60 e0       	ldi	r22, 0x00	; 0
 bae:	70 e0       	ldi	r23, 0x00	; 0
 bb0:	27 d1       	rcall	.+590    	; 0xe00 <memset>
 bb2:	ce 01       	movw	r24, r28
 bb4:	df 91       	pop	r29
 bb6:	cf 91       	pop	r28
 bb8:	1f 91       	pop	r17
 bba:	0f 91       	pop	r16
 bbc:	08 95       	ret

00000bbe <malloc>:
 bbe:	0f 93       	push	r16
 bc0:	1f 93       	push	r17
 bc2:	cf 93       	push	r28
 bc4:	df 93       	push	r29
 bc6:	82 30       	cpi	r24, 0x02	; 2
 bc8:	91 05       	cpc	r25, r1
 bca:	10 f4       	brcc	.+4      	; 0xbd0 <malloc+0x12>
 bcc:	82 e0       	ldi	r24, 0x02	; 2
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	e0 91 f8 09 	lds	r30, 0x09F8	; 0x8009f8 <__flp>
 bd4:	f0 91 f9 09 	lds	r31, 0x09F9	; 0x8009f9 <__flp+0x1>
 bd8:	20 e0       	ldi	r18, 0x00	; 0
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	a0 e0       	ldi	r26, 0x00	; 0
 bde:	b0 e0       	ldi	r27, 0x00	; 0
 be0:	30 97       	sbiw	r30, 0x00	; 0
 be2:	19 f1       	breq	.+70     	; 0xc2a <malloc+0x6c>
 be4:	40 81       	ld	r20, Z
 be6:	51 81       	ldd	r21, Z+1	; 0x01
 be8:	02 81       	ldd	r16, Z+2	; 0x02
 bea:	13 81       	ldd	r17, Z+3	; 0x03
 bec:	48 17       	cp	r20, r24
 bee:	59 07       	cpc	r21, r25
 bf0:	c8 f0       	brcs	.+50     	; 0xc24 <malloc+0x66>
 bf2:	84 17       	cp	r24, r20
 bf4:	95 07       	cpc	r25, r21
 bf6:	69 f4       	brne	.+26     	; 0xc12 <malloc+0x54>
 bf8:	10 97       	sbiw	r26, 0x00	; 0
 bfa:	31 f0       	breq	.+12     	; 0xc08 <malloc+0x4a>
 bfc:	12 96       	adiw	r26, 0x02	; 2
 bfe:	0c 93       	st	X, r16
 c00:	12 97       	sbiw	r26, 0x02	; 2
 c02:	13 96       	adiw	r26, 0x03	; 3
 c04:	1c 93       	st	X, r17
 c06:	27 c0       	rjmp	.+78     	; 0xc56 <malloc+0x98>
 c08:	00 93 f8 09 	sts	0x09F8, r16	; 0x8009f8 <__flp>
 c0c:	10 93 f9 09 	sts	0x09F9, r17	; 0x8009f9 <__flp+0x1>
 c10:	22 c0       	rjmp	.+68     	; 0xc56 <malloc+0x98>
 c12:	21 15       	cp	r18, r1
 c14:	31 05       	cpc	r19, r1
 c16:	19 f0       	breq	.+6      	; 0xc1e <malloc+0x60>
 c18:	42 17       	cp	r20, r18
 c1a:	53 07       	cpc	r21, r19
 c1c:	18 f4       	brcc	.+6      	; 0xc24 <malloc+0x66>
 c1e:	9a 01       	movw	r18, r20
 c20:	bd 01       	movw	r22, r26
 c22:	ef 01       	movw	r28, r30
 c24:	df 01       	movw	r26, r30
 c26:	f8 01       	movw	r30, r16
 c28:	db cf       	rjmp	.-74     	; 0xbe0 <malloc+0x22>
 c2a:	21 15       	cp	r18, r1
 c2c:	31 05       	cpc	r19, r1
 c2e:	f9 f0       	breq	.+62     	; 0xc6e <malloc+0xb0>
 c30:	28 1b       	sub	r18, r24
 c32:	39 0b       	sbc	r19, r25
 c34:	24 30       	cpi	r18, 0x04	; 4
 c36:	31 05       	cpc	r19, r1
 c38:	80 f4       	brcc	.+32     	; 0xc5a <malloc+0x9c>
 c3a:	8a 81       	ldd	r24, Y+2	; 0x02
 c3c:	9b 81       	ldd	r25, Y+3	; 0x03
 c3e:	61 15       	cp	r22, r1
 c40:	71 05       	cpc	r23, r1
 c42:	21 f0       	breq	.+8      	; 0xc4c <malloc+0x8e>
 c44:	fb 01       	movw	r30, r22
 c46:	93 83       	std	Z+3, r25	; 0x03
 c48:	82 83       	std	Z+2, r24	; 0x02
 c4a:	04 c0       	rjmp	.+8      	; 0xc54 <malloc+0x96>
 c4c:	90 93 f9 09 	sts	0x09F9, r25	; 0x8009f9 <__flp+0x1>
 c50:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <__flp>
 c54:	fe 01       	movw	r30, r28
 c56:	32 96       	adiw	r30, 0x02	; 2
 c58:	44 c0       	rjmp	.+136    	; 0xce2 <malloc+0x124>
 c5a:	fe 01       	movw	r30, r28
 c5c:	e2 0f       	add	r30, r18
 c5e:	f3 1f       	adc	r31, r19
 c60:	81 93       	st	Z+, r24
 c62:	91 93       	st	Z+, r25
 c64:	22 50       	subi	r18, 0x02	; 2
 c66:	31 09       	sbc	r19, r1
 c68:	39 83       	std	Y+1, r19	; 0x01
 c6a:	28 83       	st	Y, r18
 c6c:	3a c0       	rjmp	.+116    	; 0xce2 <malloc+0x124>
 c6e:	20 91 f6 09 	lds	r18, 0x09F6	; 0x8009f6 <__brkval>
 c72:	30 91 f7 09 	lds	r19, 0x09F7	; 0x8009f7 <__brkval+0x1>
 c76:	23 2b       	or	r18, r19
 c78:	41 f4       	brne	.+16     	; 0xc8a <malloc+0xcc>
 c7a:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 c7e:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 c82:	30 93 f7 09 	sts	0x09F7, r19	; 0x8009f7 <__brkval+0x1>
 c86:	20 93 f6 09 	sts	0x09F6, r18	; 0x8009f6 <__brkval>
 c8a:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 c8e:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 c92:	21 15       	cp	r18, r1
 c94:	31 05       	cpc	r19, r1
 c96:	41 f4       	brne	.+16     	; 0xca8 <malloc+0xea>
 c98:	2d b7       	in	r18, 0x3d	; 61
 c9a:	3e b7       	in	r19, 0x3e	; 62
 c9c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 ca0:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 ca4:	24 1b       	sub	r18, r20
 ca6:	35 0b       	sbc	r19, r21
 ca8:	e0 91 f6 09 	lds	r30, 0x09F6	; 0x8009f6 <__brkval>
 cac:	f0 91 f7 09 	lds	r31, 0x09F7	; 0x8009f7 <__brkval+0x1>
 cb0:	e2 17       	cp	r30, r18
 cb2:	f3 07       	cpc	r31, r19
 cb4:	a0 f4       	brcc	.+40     	; 0xcde <malloc+0x120>
 cb6:	2e 1b       	sub	r18, r30
 cb8:	3f 0b       	sbc	r19, r31
 cba:	28 17       	cp	r18, r24
 cbc:	39 07       	cpc	r19, r25
 cbe:	78 f0       	brcs	.+30     	; 0xcde <malloc+0x120>
 cc0:	ac 01       	movw	r20, r24
 cc2:	4e 5f       	subi	r20, 0xFE	; 254
 cc4:	5f 4f       	sbci	r21, 0xFF	; 255
 cc6:	24 17       	cp	r18, r20
 cc8:	35 07       	cpc	r19, r21
 cca:	48 f0       	brcs	.+18     	; 0xcde <malloc+0x120>
 ccc:	4e 0f       	add	r20, r30
 cce:	5f 1f       	adc	r21, r31
 cd0:	50 93 f7 09 	sts	0x09F7, r21	; 0x8009f7 <__brkval+0x1>
 cd4:	40 93 f6 09 	sts	0x09F6, r20	; 0x8009f6 <__brkval>
 cd8:	81 93       	st	Z+, r24
 cda:	91 93       	st	Z+, r25
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <malloc+0x124>
 cde:	e0 e0       	ldi	r30, 0x00	; 0
 ce0:	f0 e0       	ldi	r31, 0x00	; 0
 ce2:	cf 01       	movw	r24, r30
 ce4:	df 91       	pop	r29
 ce6:	cf 91       	pop	r28
 ce8:	1f 91       	pop	r17
 cea:	0f 91       	pop	r16
 cec:	08 95       	ret

00000cee <free>:
 cee:	cf 93       	push	r28
 cf0:	df 93       	push	r29
 cf2:	00 97       	sbiw	r24, 0x00	; 0
 cf4:	09 f4       	brne	.+2      	; 0xcf8 <free+0xa>
 cf6:	81 c0       	rjmp	.+258    	; 0xdfa <free+0x10c>
 cf8:	fc 01       	movw	r30, r24
 cfa:	32 97       	sbiw	r30, 0x02	; 2
 cfc:	13 82       	std	Z+3, r1	; 0x03
 cfe:	12 82       	std	Z+2, r1	; 0x02
 d00:	a0 91 f8 09 	lds	r26, 0x09F8	; 0x8009f8 <__flp>
 d04:	b0 91 f9 09 	lds	r27, 0x09F9	; 0x8009f9 <__flp+0x1>
 d08:	10 97       	sbiw	r26, 0x00	; 0
 d0a:	81 f4       	brne	.+32     	; 0xd2c <free+0x3e>
 d0c:	20 81       	ld	r18, Z
 d0e:	31 81       	ldd	r19, Z+1	; 0x01
 d10:	82 0f       	add	r24, r18
 d12:	93 1f       	adc	r25, r19
 d14:	20 91 f6 09 	lds	r18, 0x09F6	; 0x8009f6 <__brkval>
 d18:	30 91 f7 09 	lds	r19, 0x09F7	; 0x8009f7 <__brkval+0x1>
 d1c:	28 17       	cp	r18, r24
 d1e:	39 07       	cpc	r19, r25
 d20:	51 f5       	brne	.+84     	; 0xd76 <free+0x88>
 d22:	f0 93 f7 09 	sts	0x09F7, r31	; 0x8009f7 <__brkval+0x1>
 d26:	e0 93 f6 09 	sts	0x09F6, r30	; 0x8009f6 <__brkval>
 d2a:	67 c0       	rjmp	.+206    	; 0xdfa <free+0x10c>
 d2c:	ed 01       	movw	r28, r26
 d2e:	20 e0       	ldi	r18, 0x00	; 0
 d30:	30 e0       	ldi	r19, 0x00	; 0
 d32:	ce 17       	cp	r28, r30
 d34:	df 07       	cpc	r29, r31
 d36:	40 f4       	brcc	.+16     	; 0xd48 <free+0x5a>
 d38:	4a 81       	ldd	r20, Y+2	; 0x02
 d3a:	5b 81       	ldd	r21, Y+3	; 0x03
 d3c:	9e 01       	movw	r18, r28
 d3e:	41 15       	cp	r20, r1
 d40:	51 05       	cpc	r21, r1
 d42:	f1 f0       	breq	.+60     	; 0xd80 <free+0x92>
 d44:	ea 01       	movw	r28, r20
 d46:	f5 cf       	rjmp	.-22     	; 0xd32 <free+0x44>
 d48:	d3 83       	std	Z+3, r29	; 0x03
 d4a:	c2 83       	std	Z+2, r28	; 0x02
 d4c:	40 81       	ld	r20, Z
 d4e:	51 81       	ldd	r21, Z+1	; 0x01
 d50:	84 0f       	add	r24, r20
 d52:	95 1f       	adc	r25, r21
 d54:	c8 17       	cp	r28, r24
 d56:	d9 07       	cpc	r29, r25
 d58:	59 f4       	brne	.+22     	; 0xd70 <free+0x82>
 d5a:	88 81       	ld	r24, Y
 d5c:	99 81       	ldd	r25, Y+1	; 0x01
 d5e:	84 0f       	add	r24, r20
 d60:	95 1f       	adc	r25, r21
 d62:	02 96       	adiw	r24, 0x02	; 2
 d64:	91 83       	std	Z+1, r25	; 0x01
 d66:	80 83       	st	Z, r24
 d68:	8a 81       	ldd	r24, Y+2	; 0x02
 d6a:	9b 81       	ldd	r25, Y+3	; 0x03
 d6c:	93 83       	std	Z+3, r25	; 0x03
 d6e:	82 83       	std	Z+2, r24	; 0x02
 d70:	21 15       	cp	r18, r1
 d72:	31 05       	cpc	r19, r1
 d74:	29 f4       	brne	.+10     	; 0xd80 <free+0x92>
 d76:	f0 93 f9 09 	sts	0x09F9, r31	; 0x8009f9 <__flp+0x1>
 d7a:	e0 93 f8 09 	sts	0x09F8, r30	; 0x8009f8 <__flp>
 d7e:	3d c0       	rjmp	.+122    	; 0xdfa <free+0x10c>
 d80:	e9 01       	movw	r28, r18
 d82:	fb 83       	std	Y+3, r31	; 0x03
 d84:	ea 83       	std	Y+2, r30	; 0x02
 d86:	49 91       	ld	r20, Y+
 d88:	59 91       	ld	r21, Y+
 d8a:	c4 0f       	add	r28, r20
 d8c:	d5 1f       	adc	r29, r21
 d8e:	ec 17       	cp	r30, r28
 d90:	fd 07       	cpc	r31, r29
 d92:	61 f4       	brne	.+24     	; 0xdac <free+0xbe>
 d94:	80 81       	ld	r24, Z
 d96:	91 81       	ldd	r25, Z+1	; 0x01
 d98:	84 0f       	add	r24, r20
 d9a:	95 1f       	adc	r25, r21
 d9c:	02 96       	adiw	r24, 0x02	; 2
 d9e:	e9 01       	movw	r28, r18
 da0:	99 83       	std	Y+1, r25	; 0x01
 da2:	88 83       	st	Y, r24
 da4:	82 81       	ldd	r24, Z+2	; 0x02
 da6:	93 81       	ldd	r25, Z+3	; 0x03
 da8:	9b 83       	std	Y+3, r25	; 0x03
 daa:	8a 83       	std	Y+2, r24	; 0x02
 dac:	e0 e0       	ldi	r30, 0x00	; 0
 dae:	f0 e0       	ldi	r31, 0x00	; 0
 db0:	12 96       	adiw	r26, 0x02	; 2
 db2:	8d 91       	ld	r24, X+
 db4:	9c 91       	ld	r25, X
 db6:	13 97       	sbiw	r26, 0x03	; 3
 db8:	00 97       	sbiw	r24, 0x00	; 0
 dba:	19 f0       	breq	.+6      	; 0xdc2 <free+0xd4>
 dbc:	fd 01       	movw	r30, r26
 dbe:	dc 01       	movw	r26, r24
 dc0:	f7 cf       	rjmp	.-18     	; 0xdb0 <free+0xc2>
 dc2:	8d 91       	ld	r24, X+
 dc4:	9c 91       	ld	r25, X
 dc6:	11 97       	sbiw	r26, 0x01	; 1
 dc8:	9d 01       	movw	r18, r26
 dca:	2e 5f       	subi	r18, 0xFE	; 254
 dcc:	3f 4f       	sbci	r19, 0xFF	; 255
 dce:	82 0f       	add	r24, r18
 dd0:	93 1f       	adc	r25, r19
 dd2:	20 91 f6 09 	lds	r18, 0x09F6	; 0x8009f6 <__brkval>
 dd6:	30 91 f7 09 	lds	r19, 0x09F7	; 0x8009f7 <__brkval+0x1>
 dda:	28 17       	cp	r18, r24
 ddc:	39 07       	cpc	r19, r25
 dde:	69 f4       	brne	.+26     	; 0xdfa <free+0x10c>
 de0:	30 97       	sbiw	r30, 0x00	; 0
 de2:	29 f4       	brne	.+10     	; 0xdee <free+0x100>
 de4:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <__flp+0x1>
 de8:	10 92 f8 09 	sts	0x09F8, r1	; 0x8009f8 <__flp>
 dec:	02 c0       	rjmp	.+4      	; 0xdf2 <free+0x104>
 dee:	13 82       	std	Z+3, r1	; 0x03
 df0:	12 82       	std	Z+2, r1	; 0x02
 df2:	b0 93 f7 09 	sts	0x09F7, r27	; 0x8009f7 <__brkval+0x1>
 df6:	a0 93 f6 09 	sts	0x09F6, r26	; 0x8009f6 <__brkval>
 dfa:	df 91       	pop	r29
 dfc:	cf 91       	pop	r28
 dfe:	08 95       	ret

00000e00 <memset>:
 e00:	dc 01       	movw	r26, r24
 e02:	01 c0       	rjmp	.+2      	; 0xe06 <memset+0x6>
 e04:	6d 93       	st	X+, r22
 e06:	41 50       	subi	r20, 0x01	; 1
 e08:	50 40       	sbci	r21, 0x00	; 0
 e0a:	e0 f7       	brcc	.-8      	; 0xe04 <memset+0x4>
 e0c:	08 95       	ret

00000e0e <_exit>:
 e0e:	f8 94       	cli

00000e10 <__stop_program>:
 e10:	ff cf       	rjmp	.-2      	; 0xe10 <__stop_program>


DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  00000980  00000a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800236  00800236  00000a4a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ac6  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001138  00000000  00000000  000026d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b08  00000000  00000000  0000380a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00004314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000085d  00000000  00000000  000045dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000542  00000000  00000000  00004e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000537b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	87 c0       	rjmp	.+270    	; 0x164 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	5a c2       	rjmp	.+1204   	; 0x516 <__vector_24>
  62:	00 00       	nop
  64:	fc c2       	rjmp	.+1528   	; 0x65e <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	0c c3       	rjmp	.+1560   	; 0x686 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	81 c0       	rjmp	.+258    	; 0x178 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e8       	ldi	r30, 0x80	; 128
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e3       	ldi	r26, 0x36	; 54
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 34       	cpi	r26, 0x46	; 70
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	6c d1       	rcall	.+728    	; 0x3f8 <main>
 120:	2d c4       	rjmp	.+2138   	; 0x97c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer0>:
int ADCBufferIndex = 0;
float voltage = 0.f;
int ADCSampleFlag = 0;

int initTimer0(){
	TCCR0A = (1<<WGM01);	    //Sets mode to CTC
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02);			//Sets prescaler to 512
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	95 bd       	out	0x25, r25	; 37
	OCR0A =	0x7C;				//Sets compare value to 124
 12c:	9c e7       	ldi	r25, 0x7C	; 124
 12e:	97 bd       	out	0x27, r25	; 39
	OCR0B =	0x7C;
 130:	98 bd       	out	0x28, r25	; 40
	TIMSK0 = (1<<OCIE0A);
 132:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	TIFR0 = (1<<OCF0A);
 136:	85 bb       	out	0x15, r24	; 21
	return 1;
}
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <ADC_init>:

void ADC_init(){
	initTimer0();
 13e:	f2 df       	rcall	.-28     	; 0x124 <initTimer0>
	ADMUX = (1<<REFS0)|(1<<ADLAR);
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS0);
 146:	8d ea       	ldi	r24, 0xAD	; 173
 148:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	ADCSRB = (1<<ADTS1)|(1<<ADTS0);
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 152:	08 95       	ret

00000154 <ADC_storeSample>:
}

void ADC_storeSample(){
	adcSample = ADCH;
 154:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__data_end+0x1>
 15e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__data_end>
 162:	08 95       	ret

00000164 <__vector_21>:
	} else{
		ADCBufferIndex += 1;
	}*/
}

ISR(TIMER0_COMPA_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
	
}
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_29>:

ISR(ADC_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	0b b6       	in	r0, 0x3b	; 59
 184:	0f 92       	push	r0
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	ADC_storeSample();
 19e:	da df       	rcall	.-76     	; 0x154 <ADC_storeSample>
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0b be       	out	0x3b, r0	; 59
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <input_makePacket>:
#include "input.h"
#include <stdio.h>
#include <stdlib.h>

UARTPacket input_makePacket(char* packet){
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	2a 97       	sbiw	r28, 0x0a	; 10
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	8c 01       	movw	r16, r24
	UARTPacket returnData;
	returnData.type = packet[4];
 1e0:	dc 01       	movw	r26, r24
 1e2:	14 96       	adiw	r26, 0x04	; 4
 1e4:	8c 91       	ld	r24, X
 1e6:	88 87       	std	Y+8, r24	; 0x08
	if(returnData.type == 0x01){
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	79 f4       	brne	.+30     	; 0x20a <input_makePacket+0x44>
		returnData.data = (char*)calloc(2, sizeof(char));
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	5c d2       	rcall	.+1208   	; 0x6ae <calloc>
 1f6:	9a 87       	std	Y+10, r25	; 0x0a
 1f8:	89 87       	std	Y+9, r24	; 0x09
		returnData.data[0] = packet[5];
 1fa:	f8 01       	movw	r30, r16
 1fc:	25 81       	ldd	r18, Z+5	; 0x05
 1fe:	dc 01       	movw	r26, r24
 200:	2c 93       	st	X, r18
		returnData.data[1] = packet[6];
 202:	26 81       	ldd	r18, Z+6	; 0x06
 204:	11 96       	adiw	r26, 0x01	; 1
 206:	2c 93       	st	X, r18
 208:	1a c0       	rjmp	.+52     	; 0x23e <input_makePacket+0x78>
	}
	else if(returnData.type == 0x02){
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	c1 f4       	brne	.+48     	; 0x23e <input_makePacket+0x78>
		returnData.data = (char*)calloc(4, sizeof(char));
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	84 e0       	ldi	r24, 0x04	; 4
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	4b d2       	rcall	.+1174   	; 0x6ae <calloc>
 218:	fc 01       	movw	r30, r24
 21a:	9a 87       	std	Y+10, r25	; 0x0a
 21c:	89 87       	std	Y+9, r24	; 0x09
		returnData.data[0] = packet[5];
 21e:	d8 01       	movw	r26, r16
 220:	15 96       	adiw	r26, 0x05	; 5
 222:	8c 91       	ld	r24, X
 224:	15 97       	sbiw	r26, 0x05	; 5
 226:	80 83       	st	Z, r24
		returnData.data[1] = packet[6];
 228:	16 96       	adiw	r26, 0x06	; 6
 22a:	8c 91       	ld	r24, X
 22c:	16 97       	sbiw	r26, 0x06	; 6
 22e:	81 83       	std	Z+1, r24	; 0x01
		returnData.data[2] = packet[7];
 230:	17 96       	adiw	r26, 0x07	; 7
 232:	8c 91       	ld	r24, X
 234:	17 97       	sbiw	r26, 0x07	; 7
 236:	82 83       	std	Z+2, r24	; 0x02
		returnData.data[3] = packet[8];
 238:	18 96       	adiw	r26, 0x08	; 8
 23a:	8c 91       	ld	r24, X
 23c:	83 83       	std	Z+3, r24	; 0x03
	}
	else if(returnData.type == 0x03){}
	return returnData;
 23e:	85 e0       	ldi	r24, 0x05	; 5
 240:	fe 01       	movw	r30, r28
 242:	36 96       	adiw	r30, 0x06	; 6
 244:	de 01       	movw	r26, r28
 246:	11 96       	adiw	r26, 0x01	; 1
 248:	01 90       	ld	r0, Z+
 24a:	0d 92       	st	X+, r0
 24c:	8a 95       	dec	r24
 24e:	e1 f7       	brne	.-8      	; 0x248 <input_makePacket+0x82>
 250:	29 81       	ldd	r18, Y+1	; 0x01
 252:	3a 81       	ldd	r19, Y+2	; 0x02
 254:	4b 81       	ldd	r20, Y+3	; 0x03
 256:	5c 81       	ldd	r21, Y+4	; 0x04
 258:	6d 81       	ldd	r22, Y+5	; 0x05
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2a 96       	adiw	r28, 0x0a	; 10
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <transmitSPIPacket>:
int transmitUARTPacket(UARTPacket packet){
	if(packet.data){

	}
	return 1;
}
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	96 2f       	mov	r25, r22
 27c:	c7 2f       	mov	r28, r23
 27e:	d8 2f       	mov	r29, r24
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	89 2f       	mov	r24, r25
 286:	2c d1       	rcall	.+600    	; 0x4e0 <SPI_transmit>
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	41 f4       	brne	.+16     	; 0x29c <transmitSPIPacket+0x26>
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	89 e0       	ldi	r24, 0x09	; 9
 292:	92 e0       	ldi	r25, 0x02	; 2
 294:	71 d1       	rcall	.+738    	; 0x578 <UART_transStr>
 296:	8f ef       	ldi	r24, 0xFF	; 255
 298:	9f ef       	ldi	r25, 0xFF	; 255
 29a:	ab c0       	rjmp	.+342    	; 0x3f2 <transmitSPIPacket+0x17c>
 29c:	82 30       	cpi	r24, 0x02	; 2
 29e:	41 f4       	brne	.+16     	; 0x2b0 <transmitSPIPacket+0x3a>
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	82 e1       	ldi	r24, 0x12	; 18
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	67 d1       	rcall	.+718    	; 0x578 <UART_transStr>
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	a1 c0       	rjmp	.+322    	; 0x3f2 <transmitSPIPacket+0x17c>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	41 f4       	brne	.+16     	; 0x2c4 <transmitSPIPacket+0x4e>
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	8b e1       	ldi	r24, 0x1B	; 27
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	5d d1       	rcall	.+698    	; 0x578 <UART_transStr>
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	9f ef       	ldi	r25, 0xFF	; 255
 2c2:	97 c0       	rjmp	.+302    	; 0x3f2 <transmitSPIPacket+0x17c>
 2c4:	88 23       	and	r24, r24
 2c6:	41 f0       	breq	.+16     	; 0x2d8 <transmitSPIPacket+0x62>
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	84 e2       	ldi	r24, 0x24	; 36
 2ce:	92 e0       	ldi	r25, 0x02	; 2
 2d0:	53 d1       	rcall	.+678    	; 0x578 <UART_transStr>
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	9f ef       	ldi	r25, 0xFF	; 255
 2d6:	8d c0       	rjmp	.+282    	; 0x3f2 <transmitSPIPacket+0x17c>
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	8c 2f       	mov	r24, r28
 2de:	00 d1       	rcall	.+512    	; 0x4e0 <SPI_transmit>
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	41 f4       	brne	.+16     	; 0x2f4 <transmitSPIPacket+0x7e>
 2e4:	61 e0       	ldi	r22, 0x01	; 1
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	89 e0       	ldi	r24, 0x09	; 9
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	45 d1       	rcall	.+650    	; 0x578 <UART_transStr>
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	9f ef       	ldi	r25, 0xFF	; 255
 2f2:	7f c0       	rjmp	.+254    	; 0x3f2 <transmitSPIPacket+0x17c>
 2f4:	82 30       	cpi	r24, 0x02	; 2
 2f6:	41 f4       	brne	.+16     	; 0x308 <transmitSPIPacket+0x92>
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	82 e1       	ldi	r24, 0x12	; 18
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	3b d1       	rcall	.+630    	; 0x578 <UART_transStr>
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	9f ef       	ldi	r25, 0xFF	; 255
 306:	75 c0       	rjmp	.+234    	; 0x3f2 <transmitSPIPacket+0x17c>
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	41 f4       	brne	.+16     	; 0x31c <transmitSPIPacket+0xa6>
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	8b e1       	ldi	r24, 0x1B	; 27
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	31 d1       	rcall	.+610    	; 0x578 <UART_transStr>
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	9f ef       	ldi	r25, 0xFF	; 255
 31a:	6b c0       	rjmp	.+214    	; 0x3f2 <transmitSPIPacket+0x17c>
 31c:	88 23       	and	r24, r24
 31e:	41 f0       	breq	.+16     	; 0x330 <transmitSPIPacket+0xba>
 320:	61 e0       	ldi	r22, 0x01	; 1
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	84 e2       	ldi	r24, 0x24	; 36
 326:	92 e0       	ldi	r25, 0x02	; 2
 328:	27 d1       	rcall	.+590    	; 0x578 <UART_transStr>
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	9f ef       	ldi	r25, 0xFF	; 255
 32e:	61 c0       	rjmp	.+194    	; 0x3f2 <transmitSPIPacket+0x17c>
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	8d 2f       	mov	r24, r29
 336:	d4 d0       	rcall	.+424    	; 0x4e0 <SPI_transmit>
 338:	83 30       	cpi	r24, 0x03	; 3
 33a:	41 f4       	brne	.+16     	; 0x34c <transmitSPIPacket+0xd6>
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	89 e0       	ldi	r24, 0x09	; 9
 342:	92 e0       	ldi	r25, 0x02	; 2
 344:	19 d1       	rcall	.+562    	; 0x578 <UART_transStr>
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	9f ef       	ldi	r25, 0xFF	; 255
 34a:	53 c0       	rjmp	.+166    	; 0x3f2 <transmitSPIPacket+0x17c>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	41 f4       	brne	.+16     	; 0x360 <transmitSPIPacket+0xea>
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	82 e1       	ldi	r24, 0x12	; 18
 356:	92 e0       	ldi	r25, 0x02	; 2
 358:	0f d1       	rcall	.+542    	; 0x578 <UART_transStr>
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	9f ef       	ldi	r25, 0xFF	; 255
 35e:	49 c0       	rjmp	.+146    	; 0x3f2 <transmitSPIPacket+0x17c>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	41 f4       	brne	.+16     	; 0x374 <transmitSPIPacket+0xfe>
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	8b e1       	ldi	r24, 0x1B	; 27
 36a:	92 e0       	ldi	r25, 0x02	; 2
 36c:	05 d1       	rcall	.+522    	; 0x578 <UART_transStr>
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	9f ef       	ldi	r25, 0xFF	; 255
 372:	3f c0       	rjmp	.+126    	; 0x3f2 <transmitSPIPacket+0x17c>
 374:	88 23       	and	r24, r24
 376:	51 f0       	breq	.+20     	; 0x38c <transmitSPIPacket+0x116>
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	84 e2       	ldi	r24, 0x24	; 36
 37e:	92 e0       	ldi	r25, 0x02	; 2
 380:	fb d0       	rcall	.+502    	; 0x578 <UART_transStr>
 382:	8f ef       	ldi	r24, 0xFF	; 255
 384:	9f ef       	ldi	r25, 0xFF	; 255
 386:	35 c0       	rjmp	.+106    	; 0x3f2 <transmitSPIPacket+0x17c>
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	02 c0       	rjmp	.+4      	; 0x390 <transmitSPIPacket+0x11a>
 38c:	80 e0       	ldi	r24, 0x00	; 0
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	88 3c       	cpi	r24, 0xC8	; 200
 392:	91 05       	cpc	r25, r1
 394:	cc f3       	brlt	.-14     	; 0x388 <transmitSPIPacket+0x112>
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	80 e0       	ldi	r24, 0x00	; 0
 39c:	a1 d0       	rcall	.+322    	; 0x4e0 <SPI_transmit>
 39e:	83 30       	cpi	r24, 0x03	; 3
 3a0:	41 f4       	brne	.+16     	; 0x3b2 <transmitSPIPacket+0x13c>
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	89 e0       	ldi	r24, 0x09	; 9
 3a8:	92 e0       	ldi	r25, 0x02	; 2
 3aa:	e6 d0       	rcall	.+460    	; 0x578 <UART_transStr>
 3ac:	8f ef       	ldi	r24, 0xFF	; 255
 3ae:	9f ef       	ldi	r25, 0xFF	; 255
 3b0:	20 c0       	rjmp	.+64     	; 0x3f2 <transmitSPIPacket+0x17c>
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	41 f4       	brne	.+16     	; 0x3c6 <transmitSPIPacket+0x150>
 3b6:	61 e0       	ldi	r22, 0x01	; 1
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	82 e1       	ldi	r24, 0x12	; 18
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	dc d0       	rcall	.+440    	; 0x578 <UART_transStr>
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	9f ef       	ldi	r25, 0xFF	; 255
 3c4:	16 c0       	rjmp	.+44     	; 0x3f2 <transmitSPIPacket+0x17c>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	91 f0       	breq	.+36     	; 0x3ee <transmitSPIPacket+0x178>
 3ca:	81 11       	cpse	r24, r1
 3cc:	08 c0       	rjmp	.+16     	; 0x3de <transmitSPIPacket+0x168>
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	8d e2       	ldi	r24, 0x2D	; 45
 3d4:	92 e0       	ldi	r25, 0x02	; 2
 3d6:	d0 d0       	rcall	.+416    	; 0x578 <UART_transStr>
 3d8:	8f ef       	ldi	r24, 0xFF	; 255
 3da:	9f ef       	ldi	r25, 0xFF	; 255
 3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <transmitSPIPacket+0x17c>
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	70 e0       	ldi	r23, 0x00	; 0
 3e2:	84 e2       	ldi	r24, 0x24	; 36
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	c8 d0       	rcall	.+400    	; 0x578 <UART_transStr>
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	9f ef       	ldi	r25, 0xFF	; 255
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <transmitSPIPacket+0x17c>
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <main>:

int main(void){
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
 400:	29 97       	sbiw	r28, 0x09	; 9
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	f8 94       	cli
 406:	de bf       	out	0x3e, r29	; 62
 408:	0f be       	out	0x3f, r0	; 63
 40a:	cd bf       	out	0x3d, r28	; 61
	UARTPacket OscPacket;
	SPIPacket genPacket;
	SPI_init(MASTER);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	4d d0       	rcall	.+154    	; 0x4aa <SPI_init>
	UART_init();
 410:	8c d0       	rcall	.+280    	; 0x52a <UART_init>
	ADC_init();
 412:	95 de       	rcall	.-726    	; 0x13e <ADC_init>
 414:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <receiveCompleteFlag>
    while(1){
		if(receiveCompleteFlag){
 418:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <receiveCompleteFlag+0x1>
 41c:	89 2b       	or	r24, r25
 41e:	29 f0       	breq	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
			UART_receiveChar();
 420:	cb d0       	rcall	.+406    	; 0x5b8 <UART_receiveChar>
 422:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <receiveCompleteFlag+0x1>
			receiveCompleteFlag = 0;
 426:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <receiveCompleteFlag>
 42a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <packetReceiveFlag>
		}
		if(packetReceiveFlag){
 42e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <packetReceiveFlag+0x1>
 432:	89 2b       	or	r24, r25
 434:	e9 f0       	breq	.+58     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 436:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <buffer>
			OscPacket = input_makePacket(buffer);
 43a:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <buffer+0x1>
 43e:	c3 de       	rcall	.-634    	; 0x1c6 <input_makePacket>
 440:	29 83       	std	Y+1, r18	; 0x01
 442:	3a 83       	std	Y+2, r19	; 0x02
 444:	4b 83       	std	Y+3, r20	; 0x03
 446:	5c 83       	std	Y+4, r21	; 0x04
 448:	6d 83       	std	Y+5, r22	; 0x05
 44a:	00 91 40 02 	lds	r16, 0x0240	; 0x800240 <buffer>
			char* temp = buffer;
 44e:	10 91 41 02 	lds	r17, 0x0241	; 0x800241 <buffer+0x1>
			buffer = (char*)calloc(100, sizeof(char));
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	84 e6       	ldi	r24, 0x64	; 100
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	29 d1       	rcall	.+594    	; 0x6ae <calloc>
 45c:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <buffer+0x1>
 460:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <buffer>
			free(temp);
 464:	c8 01       	movw	r24, r16
 466:	d5 d1       	rcall	.+938    	; 0x812 <free>
 468:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <packetReceiveFlag+0x1>
			packetReceiveFlag = 0;
 46c:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <packetReceiveFlag>
		}
		packet_makeSPIPacket(AMPLITUDE, 0x3F, &genPacket);
 470:	ae 01       	movw	r20, r28
 472:	4a 5f       	subi	r20, 0xFA	; 250
 474:	5f 4f       	sbci	r21, 0xFF	; 255
 476:	6f e3       	ldi	r22, 0x3F	; 63
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	0f d0       	rcall	.+30     	; 0x49a <packet_makeSPIPacket>
		transmitSPIPacket(genPacket);
 47c:	6e 81       	ldd	r22, Y+6	; 0x06
 47e:	7f 81       	ldd	r23, Y+7	; 0x07
 480:	88 85       	ldd	r24, Y+8	; 0x08
 482:	99 85       	ldd	r25, Y+9	; 0x09
 484:	f8 de       	rcall	.-528    	; 0x276 <transmitSPIPacket>
		packet_makeOSCPacket(AMPLITUDE, 0x3F, &OscPacket);
 486:	ae 01       	movw	r20, r28
 488:	4f 5f       	subi	r20, 0xFF	; 255
 48a:	5f 4f       	sbci	r21, 0xFF	; 255
 48c:	6f e3       	ldi	r22, 0x3F	; 63
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	0b d0       	rcall	.+22     	; 0x4a8 <packet_makeOSCPacket>
 492:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
		transmitUARTPacket(OscPacket);
		UART_transChar(adcSample);
 496:	63 d0       	rcall	.+198    	; 0x55e <UART_transChar>
 498:	bd cf       	rjmp	.-134    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>

0000049a <packet_makeSPIPacket>:
#include "packet.h"

void packet_makeSPIPacket(char ADDR, char DATA, SPIPacket* packet){
 49a:	fa 01       	movw	r30, r20
	char CRC = 255 - DATA;
 49c:	96 2f       	mov	r25, r22
 49e:	90 95       	com	r25
	packet->ADDR = ADDR;
 4a0:	80 83       	st	Z, r24
	packet->DATA = DATA;
 4a2:	61 83       	std	Z+1, r22	; 0x01
	packet->CRC = CRC;
 4a4:	92 83       	std	Z+2, r25	; 0x02
 4a6:	08 95       	ret

000004a8 <packet_makeOSCPacket>:
}

void packet_makeOSCPacket(char ADDR, char DATA, UARTPacket* packet){
 4a8:	08 95       	ret

000004aa <SPI_init>:
#include <avr/interrupt.h>
#include "./SPILib.h"

/* Replace with your library code */
int SPI_init(char role){
	sei();
 4aa:	78 94       	sei
	if(role == MASTER){
 4ac:	81 11       	cpse	r24, r1
 4ae:	0a c0       	rjmp	.+20     	; 0x4c4 <SPI_init+0x1a>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 4b0:	87 e0       	ldi	r24, 0x07	; 7
 4b2:	84 b9       	out	0x04, r24	; 4
		PORTB = 0x00;
 4b4:	15 b8       	out	0x05, r1	; 5
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
 4b6:	82 e5       	ldi	r24, 0x52	; 82
 4b8:	8c bd       	out	0x2c, r24	; 44
		SPSR = (1<<SPI2X);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	8d bd       	out	0x2d, r24	; 45
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	08 95       	ret
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = 0x00;
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
		SPSR = (1<<SPI2X);
	}
	else if(role == SLAVE){
 4c4:	8f 3f       	cpi	r24, 0xFF	; 255
 4c6:	49 f4       	brne	.+18     	; 0x4da <SPI_init+0x30>
		DDRB = (1<<PB3); //Sets MISO as output
 4c8:	88 e0       	ldi	r24, 0x08	; 8
 4ca:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE); //Initiates control register
 4d0:	80 e4       	ldi	r24, 0x40	; 64
 4d2:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 4de:	08 95       	ret

000004e0 <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	if((DDRB & 0b00000111) == 0b00000111){
 4e0:	94 b1       	in	r25, 0x04	; 4
 4e2:	97 70       	andi	r25, 0x07	; 7
 4e4:	97 30       	cpi	r25, 0x07	; 7
 4e6:	99 f4       	brne	.+38     	; 0x50e <SPI_transmit+0x2e>
		PORTB &= 0b11111110;
 4e8:	95 b1       	in	r25, 0x05	; 5
 4ea:	9e 7f       	andi	r25, 0xFE	; 254
 4ec:	95 b9       	out	0x05, r25	; 5
		SPDR = transmitionCode;
 4ee:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & 0b10000000) != 0b10000000){} //Waits for transmition to finish
 4f0:	0d b4       	in	r0, 0x2d	; 45
 4f2:	07 fe       	sbrs	r0, 7
 4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <SPI_transmit+0x10>
		PORTB |= 0b00000001;
 4f6:	85 b1       	in	r24, 0x05	; 5
 4f8:	81 60       	ori	r24, 0x01	; 1
 4fa:	85 b9       	out	0x05, r24	; 5
		if(toggleRecieve == 1){
 4fc:	61 30       	cpi	r22, 0x01	; 1
 4fe:	71 05       	cpc	r23, r1
 500:	11 f4       	brne	.+4      	; 0x506 <SPI_transmit+0x26>
			return SPDR;
 502:	8e b5       	in	r24, 0x2e	; 46
 504:	08 95       	ret
		}
		else if(toggleRecieve == 0){
 506:	67 2b       	or	r22, r23
 508:	21 f4       	brne	.+8      	; 0x512 <SPI_transmit+0x32>
			return 1;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	08 95       	ret
		}
	}
	return 0;
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	08 95       	ret
 512:	80 e0       	ldi	r24, 0x00	; 0
}
 514:	08 95       	ret

00000516 <__vector_24>:

ISR(SPI_STC_vect){
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
	
}
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <UART_init>:
	if(RX == '\r'){
		carriageReturn = 1;
	}
	else if(carriageReturn && RX == '\n'){
		receiveComplete = 1;
		bufferIndex = 0;
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	70 e0       	ldi	r23, 0x00	; 0
 52e:	84 e6       	ldi	r24, 0x64	; 100
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	bd d0       	rcall	.+378    	; 0x6ae <calloc>
 534:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <buffer+0x1>
 538:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <buffer>
 53c:	78 94       	sei
 53e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 542:	83 e3       	ldi	r24, 0x33	; 51
 544:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 548:	e1 ec       	ldi	r30, 0xC1	; 193
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	88 6d       	ori	r24, 0xD8	; 216
 550:	80 83       	st	Z, r24
 552:	e2 ec       	ldi	r30, 0xC2	; 194
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	86 60       	ori	r24, 0x06	; 6
 55a:	80 83       	st	Z, r24
 55c:	08 95       	ret

0000055e <UART_transChar>:
 55e:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <transmitComplete>
 562:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <transmitComplete+0x1>
 566:	23 2b       	or	r18, r19
 568:	d1 f3       	breq	.-12     	; 0x55e <UART_transChar>
 56a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <transmitComplete+0x1>
 56e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <transmitComplete>
 572:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 576:	08 95       	ret

00000578 <UART_transStr>:
 578:	ef 92       	push	r14
 57a:	ff 92       	push	r15
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	8c 01       	movw	r16, r24
 586:	7b 01       	movw	r14, r22
 588:	c0 e0       	ldi	r28, 0x00	; 0
 58a:	d0 e0       	ldi	r29, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <UART_transStr+0x1a>
 58e:	e7 df       	rcall	.-50     	; 0x55e <UART_transChar>
 590:	21 96       	adiw	r28, 0x01	; 1
 592:	f8 01       	movw	r30, r16
 594:	ec 0f       	add	r30, r28
 596:	fd 1f       	adc	r31, r29
 598:	80 81       	ld	r24, Z
 59a:	81 11       	cpse	r24, r1
 59c:	f8 cf       	rjmp	.-16     	; 0x58e <UART_transStr+0x16>
 59e:	ef 28       	or	r14, r15
 5a0:	21 f0       	breq	.+8      	; 0x5aa <UART_transStr+0x32>
 5a2:	8d e0       	ldi	r24, 0x0D	; 13
 5a4:	dc df       	rcall	.-72     	; 0x55e <UART_transChar>
 5a6:	8a e0       	ldi	r24, 0x0A	; 10
 5a8:	da df       	rcall	.-76     	; 0x55e <UART_transChar>
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	ff 90       	pop	r15
 5b4:	ef 90       	pop	r14
 5b6:	08 95       	ret

000005b8 <UART_receiveChar>:
	}
}

int UART_receiveChar(){
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	1f 92       	push	r1
 5be:	1f 92       	push	r1
 5c0:	cd b7       	in	r28, 0x3d	; 61
 5c2:	de b7       	in	r29, 0x3e	; 62
	char tempBuffer[2];
	RX = UDR0;
 5c4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 5c8:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <RX>
	buffer[bufferIndex] = RX;
 5cc:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <bufferIndex>
 5d0:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <bufferIndex+0x1>
 5d4:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <buffer>
 5d8:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <buffer+0x1>
 5dc:	e8 0f       	add	r30, r24
 5de:	f9 1f       	adc	r31, r25
 5e0:	20 83       	st	Z, r18
	if(bufferIndex == 3){
 5e2:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <bufferIndex>
 5e6:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <bufferIndex+0x1>
 5ea:	03 97       	sbiw	r24, 0x03	; 3
 5ec:	a9 f4       	brne	.+42     	; 0x618 <UART_receiveChar+0x60>
		if(buffer[0] == 0x55 && buffer[1] == 0xAA){
 5ee:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <buffer>
 5f2:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <buffer+0x1>
 5f6:	80 81       	ld	r24, Z
 5f8:	85 35       	cpi	r24, 0x55	; 85
 5fa:	71 f4       	brne	.+28     	; 0x618 <UART_receiveChar+0x60>
 5fc:	81 81       	ldd	r24, Z+1	; 0x01
 5fe:	8a 3a       	cpi	r24, 0xAA	; 170
 600:	59 f4       	brne	.+22     	; 0x618 <UART_receiveChar+0x60>
			tempBuffer[0] = buffer[2];
 602:	82 81       	ldd	r24, Z+2	; 0x02
 604:	89 83       	std	Y+1, r24	; 0x01
			tempBuffer[1] = buffer[3];
 606:	83 81       	ldd	r24, Z+3	; 0x03
 608:	8a 83       	std	Y+2, r24	; 0x02
			packetLength = atoi(tempBuffer);
 60a:	ce 01       	movw	r24, r28
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	8a d1       	rcall	.+788    	; 0x924 <atoi>
 610:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <packetLength+0x1>
 614:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <packetLength>
		}
	}
	if(bufferIndex == packetLength && packetLength != 0){
 618:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <bufferIndex>
 61c:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <bufferIndex+0x1>
 620:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <packetLength>
 624:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <packetLength+0x1>
 628:	28 17       	cp	r18, r24
 62a:	39 07       	cpc	r19, r25
 62c:	41 f4       	brne	.+16     	; 0x63e <UART_receiveChar+0x86>
 62e:	89 2b       	or	r24, r25
 630:	31 f0       	breq	.+12     	; 0x63e <UART_receiveChar+0x86>
		packetReceiveFlag = 1;
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <packetReceiveFlag+0x1>
 63a:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <packetReceiveFlag>
	}
	bufferIndex += 1;
 63e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <bufferIndex>
 642:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <bufferIndex+0x1>
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <bufferIndex+0x1>
 64c:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <bufferIndex>
	//checkCarriageReturn();
	return 1;
}
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0f 90       	pop	r0
 656:	0f 90       	pop	r0
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <__vector_25>:


ISR(USART0_RX_vect){
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	0f 92       	push	r0
 666:	11 24       	eor	r1, r1
 668:	8f 93       	push	r24
 66a:	9f 93       	push	r25
	receiveCompleteFlag = 1;
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <receiveCompleteFlag+0x1>
 674:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <receiveCompleteFlag>
};
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <__vector_27>:

ISR(USART0_TX_vect){
 686:	1f 92       	push	r1
 688:	0f 92       	push	r0
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	0f 92       	push	r0
 68e:	11 24       	eor	r1, r1
 690:	8f 93       	push	r24
 692:	9f 93       	push	r25
	transmitComplete = 1;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <transmitComplete+0x1>
 69c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <transmitComplete>
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

000006ae <calloc>:
 6ae:	0f 93       	push	r16
 6b0:	1f 93       	push	r17
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	86 9f       	mul	r24, r22
 6b8:	80 01       	movw	r16, r0
 6ba:	87 9f       	mul	r24, r23
 6bc:	10 0d       	add	r17, r0
 6be:	96 9f       	mul	r25, r22
 6c0:	10 0d       	add	r17, r0
 6c2:	11 24       	eor	r1, r1
 6c4:	c8 01       	movw	r24, r16
 6c6:	0d d0       	rcall	.+26     	; 0x6e2 <malloc>
 6c8:	ec 01       	movw	r28, r24
 6ca:	00 97       	sbiw	r24, 0x00	; 0
 6cc:	21 f0       	breq	.+8      	; 0x6d6 <calloc+0x28>
 6ce:	a8 01       	movw	r20, r16
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	44 d1       	rcall	.+648    	; 0x95e <memset>
 6d6:	ce 01       	movw	r24, r28
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	08 95       	ret

000006e2 <malloc>:
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	82 30       	cpi	r24, 0x02	; 2
 6ec:	91 05       	cpc	r25, r1
 6ee:	10 f4       	brcc	.+4      	; 0x6f4 <malloc+0x12>
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	e0 91 44 02 	lds	r30, 0x0244	; 0x800244 <__flp>
 6f8:	f0 91 45 02 	lds	r31, 0x0245	; 0x800245 <__flp+0x1>
 6fc:	20 e0       	ldi	r18, 0x00	; 0
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	a0 e0       	ldi	r26, 0x00	; 0
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	30 97       	sbiw	r30, 0x00	; 0
 706:	19 f1       	breq	.+70     	; 0x74e <malloc+0x6c>
 708:	40 81       	ld	r20, Z
 70a:	51 81       	ldd	r21, Z+1	; 0x01
 70c:	02 81       	ldd	r16, Z+2	; 0x02
 70e:	13 81       	ldd	r17, Z+3	; 0x03
 710:	48 17       	cp	r20, r24
 712:	59 07       	cpc	r21, r25
 714:	c8 f0       	brcs	.+50     	; 0x748 <malloc+0x66>
 716:	84 17       	cp	r24, r20
 718:	95 07       	cpc	r25, r21
 71a:	69 f4       	brne	.+26     	; 0x736 <malloc+0x54>
 71c:	10 97       	sbiw	r26, 0x00	; 0
 71e:	31 f0       	breq	.+12     	; 0x72c <malloc+0x4a>
 720:	12 96       	adiw	r26, 0x02	; 2
 722:	0c 93       	st	X, r16
 724:	12 97       	sbiw	r26, 0x02	; 2
 726:	13 96       	adiw	r26, 0x03	; 3
 728:	1c 93       	st	X, r17
 72a:	27 c0       	rjmp	.+78     	; 0x77a <malloc+0x98>
 72c:	00 93 44 02 	sts	0x0244, r16	; 0x800244 <__flp>
 730:	10 93 45 02 	sts	0x0245, r17	; 0x800245 <__flp+0x1>
 734:	22 c0       	rjmp	.+68     	; 0x77a <malloc+0x98>
 736:	21 15       	cp	r18, r1
 738:	31 05       	cpc	r19, r1
 73a:	19 f0       	breq	.+6      	; 0x742 <malloc+0x60>
 73c:	42 17       	cp	r20, r18
 73e:	53 07       	cpc	r21, r19
 740:	18 f4       	brcc	.+6      	; 0x748 <malloc+0x66>
 742:	9a 01       	movw	r18, r20
 744:	bd 01       	movw	r22, r26
 746:	ef 01       	movw	r28, r30
 748:	df 01       	movw	r26, r30
 74a:	f8 01       	movw	r30, r16
 74c:	db cf       	rjmp	.-74     	; 0x704 <malloc+0x22>
 74e:	21 15       	cp	r18, r1
 750:	31 05       	cpc	r19, r1
 752:	f9 f0       	breq	.+62     	; 0x792 <malloc+0xb0>
 754:	28 1b       	sub	r18, r24
 756:	39 0b       	sbc	r19, r25
 758:	24 30       	cpi	r18, 0x04	; 4
 75a:	31 05       	cpc	r19, r1
 75c:	80 f4       	brcc	.+32     	; 0x77e <malloc+0x9c>
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	9b 81       	ldd	r25, Y+3	; 0x03
 762:	61 15       	cp	r22, r1
 764:	71 05       	cpc	r23, r1
 766:	21 f0       	breq	.+8      	; 0x770 <malloc+0x8e>
 768:	fb 01       	movw	r30, r22
 76a:	93 83       	std	Z+3, r25	; 0x03
 76c:	82 83       	std	Z+2, r24	; 0x02
 76e:	04 c0       	rjmp	.+8      	; 0x778 <malloc+0x96>
 770:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__flp+0x1>
 774:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__flp>
 778:	fe 01       	movw	r30, r28
 77a:	32 96       	adiw	r30, 0x02	; 2
 77c:	44 c0       	rjmp	.+136    	; 0x806 <malloc+0x124>
 77e:	fe 01       	movw	r30, r28
 780:	e2 0f       	add	r30, r18
 782:	f3 1f       	adc	r31, r19
 784:	81 93       	st	Z+, r24
 786:	91 93       	st	Z+, r25
 788:	22 50       	subi	r18, 0x02	; 2
 78a:	31 09       	sbc	r19, r1
 78c:	39 83       	std	Y+1, r19	; 0x01
 78e:	28 83       	st	Y, r18
 790:	3a c0       	rjmp	.+116    	; 0x806 <malloc+0x124>
 792:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <__brkval>
 796:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <__brkval+0x1>
 79a:	23 2b       	or	r18, r19
 79c:	41 f4       	brne	.+16     	; 0x7ae <malloc+0xcc>
 79e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 7a2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 7a6:	30 93 43 02 	sts	0x0243, r19	; 0x800243 <__brkval+0x1>
 7aa:	20 93 42 02 	sts	0x0242, r18	; 0x800242 <__brkval>
 7ae:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 7b2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 7b6:	21 15       	cp	r18, r1
 7b8:	31 05       	cpc	r19, r1
 7ba:	41 f4       	brne	.+16     	; 0x7cc <malloc+0xea>
 7bc:	2d b7       	in	r18, 0x3d	; 61
 7be:	3e b7       	in	r19, 0x3e	; 62
 7c0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 7c4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 7c8:	24 1b       	sub	r18, r20
 7ca:	35 0b       	sbc	r19, r21
 7cc:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__brkval>
 7d0:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <__brkval+0x1>
 7d4:	e2 17       	cp	r30, r18
 7d6:	f3 07       	cpc	r31, r19
 7d8:	a0 f4       	brcc	.+40     	; 0x802 <malloc+0x120>
 7da:	2e 1b       	sub	r18, r30
 7dc:	3f 0b       	sbc	r19, r31
 7de:	28 17       	cp	r18, r24
 7e0:	39 07       	cpc	r19, r25
 7e2:	78 f0       	brcs	.+30     	; 0x802 <malloc+0x120>
 7e4:	ac 01       	movw	r20, r24
 7e6:	4e 5f       	subi	r20, 0xFE	; 254
 7e8:	5f 4f       	sbci	r21, 0xFF	; 255
 7ea:	24 17       	cp	r18, r20
 7ec:	35 07       	cpc	r19, r21
 7ee:	48 f0       	brcs	.+18     	; 0x802 <malloc+0x120>
 7f0:	4e 0f       	add	r20, r30
 7f2:	5f 1f       	adc	r21, r31
 7f4:	50 93 43 02 	sts	0x0243, r21	; 0x800243 <__brkval+0x1>
 7f8:	40 93 42 02 	sts	0x0242, r20	; 0x800242 <__brkval>
 7fc:	81 93       	st	Z+, r24
 7fe:	91 93       	st	Z+, r25
 800:	02 c0       	rjmp	.+4      	; 0x806 <malloc+0x124>
 802:	e0 e0       	ldi	r30, 0x00	; 0
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	cf 01       	movw	r24, r30
 808:	df 91       	pop	r29
 80a:	cf 91       	pop	r28
 80c:	1f 91       	pop	r17
 80e:	0f 91       	pop	r16
 810:	08 95       	ret

00000812 <free>:
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	00 97       	sbiw	r24, 0x00	; 0
 818:	09 f4       	brne	.+2      	; 0x81c <free+0xa>
 81a:	81 c0       	rjmp	.+258    	; 0x91e <free+0x10c>
 81c:	fc 01       	movw	r30, r24
 81e:	32 97       	sbiw	r30, 0x02	; 2
 820:	13 82       	std	Z+3, r1	; 0x03
 822:	12 82       	std	Z+2, r1	; 0x02
 824:	a0 91 44 02 	lds	r26, 0x0244	; 0x800244 <__flp>
 828:	b0 91 45 02 	lds	r27, 0x0245	; 0x800245 <__flp+0x1>
 82c:	10 97       	sbiw	r26, 0x00	; 0
 82e:	81 f4       	brne	.+32     	; 0x850 <free+0x3e>
 830:	20 81       	ld	r18, Z
 832:	31 81       	ldd	r19, Z+1	; 0x01
 834:	82 0f       	add	r24, r18
 836:	93 1f       	adc	r25, r19
 838:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <__brkval>
 83c:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <__brkval+0x1>
 840:	28 17       	cp	r18, r24
 842:	39 07       	cpc	r19, r25
 844:	51 f5       	brne	.+84     	; 0x89a <free+0x88>
 846:	f0 93 43 02 	sts	0x0243, r31	; 0x800243 <__brkval+0x1>
 84a:	e0 93 42 02 	sts	0x0242, r30	; 0x800242 <__brkval>
 84e:	67 c0       	rjmp	.+206    	; 0x91e <free+0x10c>
 850:	ed 01       	movw	r28, r26
 852:	20 e0       	ldi	r18, 0x00	; 0
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	ce 17       	cp	r28, r30
 858:	df 07       	cpc	r29, r31
 85a:	40 f4       	brcc	.+16     	; 0x86c <free+0x5a>
 85c:	4a 81       	ldd	r20, Y+2	; 0x02
 85e:	5b 81       	ldd	r21, Y+3	; 0x03
 860:	9e 01       	movw	r18, r28
 862:	41 15       	cp	r20, r1
 864:	51 05       	cpc	r21, r1
 866:	f1 f0       	breq	.+60     	; 0x8a4 <free+0x92>
 868:	ea 01       	movw	r28, r20
 86a:	f5 cf       	rjmp	.-22     	; 0x856 <free+0x44>
 86c:	d3 83       	std	Z+3, r29	; 0x03
 86e:	c2 83       	std	Z+2, r28	; 0x02
 870:	40 81       	ld	r20, Z
 872:	51 81       	ldd	r21, Z+1	; 0x01
 874:	84 0f       	add	r24, r20
 876:	95 1f       	adc	r25, r21
 878:	c8 17       	cp	r28, r24
 87a:	d9 07       	cpc	r29, r25
 87c:	59 f4       	brne	.+22     	; 0x894 <free+0x82>
 87e:	88 81       	ld	r24, Y
 880:	99 81       	ldd	r25, Y+1	; 0x01
 882:	84 0f       	add	r24, r20
 884:	95 1f       	adc	r25, r21
 886:	02 96       	adiw	r24, 0x02	; 2
 888:	91 83       	std	Z+1, r25	; 0x01
 88a:	80 83       	st	Z, r24
 88c:	8a 81       	ldd	r24, Y+2	; 0x02
 88e:	9b 81       	ldd	r25, Y+3	; 0x03
 890:	93 83       	std	Z+3, r25	; 0x03
 892:	82 83       	std	Z+2, r24	; 0x02
 894:	21 15       	cp	r18, r1
 896:	31 05       	cpc	r19, r1
 898:	29 f4       	brne	.+10     	; 0x8a4 <free+0x92>
 89a:	f0 93 45 02 	sts	0x0245, r31	; 0x800245 <__flp+0x1>
 89e:	e0 93 44 02 	sts	0x0244, r30	; 0x800244 <__flp>
 8a2:	3d c0       	rjmp	.+122    	; 0x91e <free+0x10c>
 8a4:	e9 01       	movw	r28, r18
 8a6:	fb 83       	std	Y+3, r31	; 0x03
 8a8:	ea 83       	std	Y+2, r30	; 0x02
 8aa:	49 91       	ld	r20, Y+
 8ac:	59 91       	ld	r21, Y+
 8ae:	c4 0f       	add	r28, r20
 8b0:	d5 1f       	adc	r29, r21
 8b2:	ec 17       	cp	r30, r28
 8b4:	fd 07       	cpc	r31, r29
 8b6:	61 f4       	brne	.+24     	; 0x8d0 <free+0xbe>
 8b8:	80 81       	ld	r24, Z
 8ba:	91 81       	ldd	r25, Z+1	; 0x01
 8bc:	84 0f       	add	r24, r20
 8be:	95 1f       	adc	r25, r21
 8c0:	02 96       	adiw	r24, 0x02	; 2
 8c2:	e9 01       	movw	r28, r18
 8c4:	99 83       	std	Y+1, r25	; 0x01
 8c6:	88 83       	st	Y, r24
 8c8:	82 81       	ldd	r24, Z+2	; 0x02
 8ca:	93 81       	ldd	r25, Z+3	; 0x03
 8cc:	9b 83       	std	Y+3, r25	; 0x03
 8ce:	8a 83       	std	Y+2, r24	; 0x02
 8d0:	e0 e0       	ldi	r30, 0x00	; 0
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	12 96       	adiw	r26, 0x02	; 2
 8d6:	8d 91       	ld	r24, X+
 8d8:	9c 91       	ld	r25, X
 8da:	13 97       	sbiw	r26, 0x03	; 3
 8dc:	00 97       	sbiw	r24, 0x00	; 0
 8de:	19 f0       	breq	.+6      	; 0x8e6 <free+0xd4>
 8e0:	fd 01       	movw	r30, r26
 8e2:	dc 01       	movw	r26, r24
 8e4:	f7 cf       	rjmp	.-18     	; 0x8d4 <free+0xc2>
 8e6:	8d 91       	ld	r24, X+
 8e8:	9c 91       	ld	r25, X
 8ea:	11 97       	sbiw	r26, 0x01	; 1
 8ec:	9d 01       	movw	r18, r26
 8ee:	2e 5f       	subi	r18, 0xFE	; 254
 8f0:	3f 4f       	sbci	r19, 0xFF	; 255
 8f2:	82 0f       	add	r24, r18
 8f4:	93 1f       	adc	r25, r19
 8f6:	20 91 42 02 	lds	r18, 0x0242	; 0x800242 <__brkval>
 8fa:	30 91 43 02 	lds	r19, 0x0243	; 0x800243 <__brkval+0x1>
 8fe:	28 17       	cp	r18, r24
 900:	39 07       	cpc	r19, r25
 902:	69 f4       	brne	.+26     	; 0x91e <free+0x10c>
 904:	30 97       	sbiw	r30, 0x00	; 0
 906:	29 f4       	brne	.+10     	; 0x912 <free+0x100>
 908:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <__flp+0x1>
 90c:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <__flp>
 910:	02 c0       	rjmp	.+4      	; 0x916 <free+0x104>
 912:	13 82       	std	Z+3, r1	; 0x03
 914:	12 82       	std	Z+2, r1	; 0x02
 916:	b0 93 43 02 	sts	0x0243, r27	; 0x800243 <__brkval+0x1>
 91a:	a0 93 42 02 	sts	0x0242, r26	; 0x800242 <__brkval>
 91e:	df 91       	pop	r29
 920:	cf 91       	pop	r28
 922:	08 95       	ret

00000924 <atoi>:
 924:	fc 01       	movw	r30, r24
 926:	88 27       	eor	r24, r24
 928:	99 27       	eor	r25, r25
 92a:	e8 94       	clt
 92c:	21 91       	ld	r18, Z+
 92e:	20 32       	cpi	r18, 0x20	; 32
 930:	e9 f3       	breq	.-6      	; 0x92c <atoi+0x8>
 932:	29 30       	cpi	r18, 0x09	; 9
 934:	10 f0       	brcs	.+4      	; 0x93a <atoi+0x16>
 936:	2e 30       	cpi	r18, 0x0E	; 14
 938:	c8 f3       	brcs	.-14     	; 0x92c <atoi+0x8>
 93a:	2b 32       	cpi	r18, 0x2B	; 43
 93c:	39 f0       	breq	.+14     	; 0x94c <atoi+0x28>
 93e:	2d 32       	cpi	r18, 0x2D	; 45
 940:	31 f4       	brne	.+12     	; 0x94e <atoi+0x2a>
 942:	68 94       	set
 944:	03 c0       	rjmp	.+6      	; 0x94c <atoi+0x28>
 946:	12 d0       	rcall	.+36     	; 0x96c <__mulhi_const_10>
 948:	82 0f       	add	r24, r18
 94a:	91 1d       	adc	r25, r1
 94c:	21 91       	ld	r18, Z+
 94e:	20 53       	subi	r18, 0x30	; 48
 950:	2a 30       	cpi	r18, 0x0A	; 10
 952:	c8 f3       	brcs	.-14     	; 0x946 <atoi+0x22>
 954:	1e f4       	brtc	.+6      	; 0x95c <atoi+0x38>
 956:	90 95       	com	r25
 958:	81 95       	neg	r24
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	08 95       	ret

0000095e <memset>:
 95e:	dc 01       	movw	r26, r24
 960:	01 c0       	rjmp	.+2      	; 0x964 <memset+0x6>
 962:	6d 93       	st	X+, r22
 964:	41 50       	subi	r20, 0x01	; 1
 966:	50 40       	sbci	r21, 0x00	; 0
 968:	e0 f7       	brcc	.-8      	; 0x962 <memset+0x4>
 96a:	08 95       	ret

0000096c <__mulhi_const_10>:
 96c:	7a e0       	ldi	r23, 0x0A	; 10
 96e:	97 9f       	mul	r25, r23
 970:	90 2d       	mov	r25, r0
 972:	87 9f       	mul	r24, r23
 974:	80 2d       	mov	r24, r0
 976:	91 0d       	add	r25, r1
 978:	11 24       	eor	r1, r1
 97a:	08 95       	ret

0000097c <_exit>:
 97c:	f8 94       	cli

0000097e <__stop_program>:
 97e:	ff cf       	rjmp	.-2      	; 0x97e <__stop_program>

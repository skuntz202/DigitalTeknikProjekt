
DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000007ca  0000085e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080020c  0080020c  0000086a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001951  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a6  00000000  00000000  0000237d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ada  00000000  00000000  00003523  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00004000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088a  00000000  00000000  00004294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c2  00000000  00000000  00004b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000050e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	7e c0       	rjmp	.+252    	; 0x152 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9b c1       	rjmp	.+822    	; 0x398 <__vector_24>
  62:	00 00       	nop
  64:	1a c2       	rjmp	.+1076   	; 0x49a <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2a c2       	rjmp	.+1108   	; 0x4c2 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	78 c0       	rjmp	.+240    	; 0x166 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ec       	ldi	r30, 0xCA	; 202
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 31       	cpi	r26, 0x1C	; 28
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b9 d0       	rcall	.+370    	; 0x292 <main>
 120:	52 c3       	rjmp	.+1700   	; 0x7c6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer0>:
	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS0);
	ADCSRB = (1<<ADTS1)|(1<<ADTS0);
}

void ADC_storeSample(){
	adcSample = ADCH;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	84 bd       	out	0x24, r24	; 36
 128:	85 bd       	out	0x25, r24	; 37
 12a:	97 ec       	ldi	r25, 0xC7	; 199
 12c:	97 bd       	out	0x27, r25	; 39
 12e:	98 bd       	out	0x28, r25	; 40
 130:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
 134:	85 bb       	out	0x15, r24	; 21
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret

0000013c <ADC_init>:
 13c:	f3 df       	rcall	.-26     	; 0x124 <initTimer0>
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 144:	8d ea       	ldi	r24, 0xAD	; 173
 146:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 150:	08 95       	ret

00000152 <__vector_21>:
	} else{
		ADCBufferIndex += 1;
	}*/
}

ISR(TIMER0_COMPA_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
	
}
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_29>:

ISR(ADC_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
	//ADC_storeSample();
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <input_makePacket>:
#include "input.h"
#include <stdio.h>
#include <stdlib.h>

UARTPacket input_makePacket(char* packet){
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	8c 01       	movw	r16, r24
	UARTPacket returnData;
	returnData.type = packet[4];
 182:	dc 01       	movw	r26, r24
 184:	14 96       	adiw	r26, 0x04	; 4
 186:	cc 91       	ld	r28, X
	if(returnData.type == 0x01){
 188:	c1 30       	cpi	r28, 0x01	; 1
 18a:	79 f4       	brne	.+30     	; 0x1aa <input_makePacket+0x30>
		returnData.data = (char*)calloc(2, sizeof(char));
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	aa d1       	rcall	.+852    	; 0x4ea <calloc>
 196:	38 2f       	mov	r19, r24
 198:	29 2f       	mov	r18, r25
		returnData.data[0] = packet[5];
 19a:	f8 01       	movw	r30, r16
 19c:	45 81       	ldd	r20, Z+5	; 0x05
 19e:	dc 01       	movw	r26, r24
 1a0:	4c 93       	st	X, r20
		returnData.data[1] = packet[6];
 1a2:	46 81       	ldd	r20, Z+6	; 0x06
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	4c 93       	st	X, r20
 1a8:	1a c0       	rjmp	.+52     	; 0x1de <input_makePacket+0x64>
	}
	else if(returnData.type == 0x02){
 1aa:	c2 30       	cpi	r28, 0x02	; 2
 1ac:	c1 f4       	brne	.+48     	; 0x1de <input_makePacket+0x64>
		returnData.data = (char*)calloc(4, sizeof(char));
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	99 d1       	rcall	.+818    	; 0x4ea <calloc>
 1b8:	fc 01       	movw	r30, r24
 1ba:	38 2f       	mov	r19, r24
 1bc:	2f 2f       	mov	r18, r31
		returnData.data[0] = packet[5];
 1be:	d8 01       	movw	r26, r16
 1c0:	15 96       	adiw	r26, 0x05	; 5
 1c2:	8c 91       	ld	r24, X
 1c4:	15 97       	sbiw	r26, 0x05	; 5
 1c6:	80 83       	st	Z, r24
		returnData.data[1] = packet[6];
 1c8:	16 96       	adiw	r26, 0x06	; 6
 1ca:	8c 91       	ld	r24, X
 1cc:	16 97       	sbiw	r26, 0x06	; 6
 1ce:	81 83       	std	Z+1, r24	; 0x01
		returnData.data[2] = packet[7];
 1d0:	17 96       	adiw	r26, 0x07	; 7
 1d2:	8c 91       	ld	r24, X
 1d4:	17 97       	sbiw	r26, 0x07	; 7
 1d6:	82 83       	std	Z+2, r24	; 0x02
		returnData.data[3] = packet[8];
 1d8:	18 96       	adiw	r26, 0x08	; 8
 1da:	8c 91       	ld	r24, X
 1dc:	83 83       	std	Z+3, r24	; 0x03
	}
	else if(returnData.type == 0x03){}
	return returnData;
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	7c 2f       	mov	r23, r28
 1e2:	83 2f       	mov	r24, r19
 1e4:	92 2f       	mov	r25, r18
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	08 95       	ret

000001ee <transmitUARTPacket>:
		return -1;
	}*/
	return 0;
}

int transmitUARTPacket(UARTPacket* packet){
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	8c 01       	movw	r16, r24
	char recordLengthL = (packet->recordLength+7) & 0x00FF;
 1fa:	dc 01       	movw	r26, r24
 1fc:	cc 91       	ld	r28, X
 1fe:	c3 70       	andi	r28, 0x03	; 3
 200:	0f 2e       	mov	r0, r31
 202:	f7 e0       	ldi	r31, 0x07	; 7
 204:	ff 2e       	mov	r15, r31
 206:	f0 2d       	mov	r31, r0
 208:	fc 0e       	add	r15, r28
	char recordLengthH = (packet->recordLength+7)>>8;
 20a:	d0 e0       	ldi	r29, 0x00	; 0
 20c:	27 96       	adiw	r28, 0x07	; 7
	SPI_transmit(0x55, 0);
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	85 e5       	ldi	r24, 0x55	; 85
 214:	a5 d0       	rcall	.+330    	; 0x360 <SPI_transmit>
	SPI_transmit(0xAA, 0);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	8a ea       	ldi	r24, 0xAA	; 170
 21c:	a1 d0       	rcall	.+322    	; 0x360 <SPI_transmit>
	SPI_transmit(recordLengthH, 0);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	8d 2f       	mov	r24, r29
 224:	9d d0       	rcall	.+314    	; 0x360 <SPI_transmit>
	SPI_transmit(recordLengthL, 0);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	8f 2d       	mov	r24, r15
 22c:	99 d0       	rcall	.+306    	; 0x360 <SPI_transmit>
	SPI_transmit(packet->type, 0);
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	f8 01       	movw	r30, r16
 234:	81 81       	ldd	r24, Z+1	; 0x01
 236:	94 d0       	rcall	.+296    	; 0x360 <SPI_transmit>
	for(int i = 0; i < packet->recordLength; i++){
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	0c c0       	rjmp	.+24     	; 0x256 <transmitUARTPacket+0x68>
		SPI_transmit(packet->data[i], 0);
 23e:	d8 01       	movw	r26, r16
 240:	12 96       	adiw	r26, 0x02	; 2
 242:	ed 91       	ld	r30, X+
 244:	fc 91       	ld	r31, X
 246:	13 97       	sbiw	r26, 0x03	; 3
 248:	ec 0f       	add	r30, r28
 24a:	fd 1f       	adc	r31, r29
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	86 d0       	rcall	.+268    	; 0x360 <SPI_transmit>
	SPI_transmit(0x55, 0);
	SPI_transmit(0xAA, 0);
	SPI_transmit(recordLengthH, 0);
	SPI_transmit(recordLengthL, 0);
	SPI_transmit(packet->type, 0);
	for(int i = 0; i < packet->recordLength; i++){
 254:	21 96       	adiw	r28, 0x01	; 1
 256:	f8 01       	movw	r30, r16
 258:	80 81       	ld	r24, Z
 25a:	83 70       	andi	r24, 0x03	; 3
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	c8 17       	cp	r28, r24
 260:	d9 07       	cpc	r29, r25
		SPI_transmit(packet->data[i], 0);
	}
	SPI_transmit(0x00, 0);
 262:	6c f3       	brlt	.-38     	; 0x23e <transmitUARTPacket+0x50>
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
	SPI_transmit(0x00, 0);
 26a:	7a d0       	rcall	.+244    	; 0x360 <SPI_transmit>
 26c:	60 e0       	ldi	r22, 0x00	; 0
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	76 d0       	rcall	.+236    	; 0x360 <SPI_transmit>
	for(int timer = 0; timer < 200; timer++){}
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	01 c0       	rjmp	.+2      	; 0x27c <transmitUARTPacket+0x8e>
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	88 3c       	cpi	r24, 0xC8	; 200
 27e:	91 05       	cpc	r25, r1
 280:	e4 f3       	brlt	.-8      	; 0x27a <transmitUARTPacket+0x8c>
	return 1;
}
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	ff 90       	pop	r15
 290:	08 95       	ret

00000292 <main>:

int main(void){
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	00 d0       	rcall	.+0      	; 0x298 <main+0x6>
 298:	1f 92       	push	r1
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
	UARTPacket OscPacket;
	SPIPacket genPacket;
	SPI_init(MASTER);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	44 d0       	rcall	.+136    	; 0x32a <SPI_init>
	UART_init();
 2a2:	8e d0       	rcall	.+284    	; 0x3c0 <UART_init>
	ADC_init();
 2a4:	4b df       	rcall	.-362    	; 0x13c <ADC_init>
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
	char* data = "SS";
	OscPacket.recordLength = 2;
 2a8:	8c 7f       	andi	r24, 0xFC	; 252
 2aa:	82 60       	ori	r24, 0x02	; 2
 2ac:	89 83       	std	Y+1, r24	; 0x01
 2ae:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <receiveCompleteFlag>
    while(1){
		if(receiveCompleteFlag){
 2b2:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <receiveCompleteFlag+0x1>
 2b6:	89 2b       	or	r24, r25
 2b8:	29 f0       	breq	.+10     	; 0x2c4 <main+0x32>
			UART_receiveChar();
 2ba:	9c d0       	rcall	.+312    	; 0x3f4 <UART_receiveChar>
 2bc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <receiveCompleteFlag+0x1>
			receiveCompleteFlag = 0;
 2c0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <receiveCompleteFlag>
 2c4:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <packetReceiveFlag>
		}
		if(packetReceiveFlag){
 2c8:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <packetReceiveFlag+0x1>
 2cc:	89 2b       	or	r24, r25
 2ce:	e1 f0       	breq	.+56     	; 0x308 <main+0x76>
 2d0:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <buffer>
			OscPacket = input_makePacket(buffer);
 2d4:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <buffer+0x1>
 2d8:	50 df       	rcall	.-352    	; 0x17a <input_makePacket>
 2da:	69 83       	std	Y+1, r22	; 0x01
 2dc:	7a 83       	std	Y+2, r23	; 0x02
 2de:	8b 83       	std	Y+3, r24	; 0x03
 2e0:	9c 83       	std	Y+4, r25	; 0x04
 2e2:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <buffer>
			char* temp = buffer;
 2e6:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <buffer+0x1>
			buffer = (char*)calloc(100, sizeof(char));
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	84 e6       	ldi	r24, 0x64	; 100
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	fb d0       	rcall	.+502    	; 0x4ea <calloc>
 2f4:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <buffer+0x1>
 2f8:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <buffer>
			free(temp);
 2fc:	c8 01       	movw	r24, r16
 2fe:	a7 d1       	rcall	.+846    	; 0x64e <free>
 300:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <packetReceiveFlag+0x1>
			packetReceiveFlag = 0;
 304:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <packetReceiveFlag>
		}
		//packet_makeSPIPacket(AMPLITUDE, 0x3F, &genPacket);
		//transmitSPIPacket(&genPacket);
		packet_makeOSCPacket(OSCILLOSCOPE, data, &OscPacket);
 308:	ae 01       	movw	r20, r28
 30a:	4f 5f       	subi	r20, 0xFF	; 255
 30c:	5f 4f       	sbci	r21, 0xFF	; 255
 30e:	69 e0       	ldi	r22, 0x09	; 9
 310:	72 e0       	ldi	r23, 0x02	; 2
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	04 d0       	rcall	.+8      	; 0x31e <packet_makeOSCPacket>
		transmitUARTPacket(&OscPacket);
 316:	ce 01       	movw	r24, r28
 318:	01 96       	adiw	r24, 0x01	; 1
 31a:	69 df       	rcall	.-302    	; 0x1ee <transmitUARTPacket>
 31c:	c8 cf       	rjmp	.-112    	; 0x2ae <main+0x1c>

0000031e <packet_makeOSCPacket>:
		//UART_transChar(adcSample);
		if(ADCSampleFlag){
			//Send contents of ADCReadBuffer to computer.
		}
    }
 31e:	fa 01       	movw	r30, r20
	packet->DATA = DATA;
	packet->CRC = CRC;
}

void packet_makeOSCPacket(char type, char* DATA, UARTPacket* packet){
	packet->type = type;
 320:	81 83       	std	Z+1, r24	; 0x01
	strcpy(packet->data, DATA);
 322:	82 81       	ldd	r24, Z+2	; 0x02
 324:	93 81       	ldd	r25, Z+3	; 0x03
 326:	40 c2       	rjmp	.+1152   	; 0x7a8 <strcpy>
 328:	08 95       	ret

0000032a <SPI_init>:

static int SPITransmitFlag = 0;

/* Replace with your library code */
int SPI_init(char role){
	sei();
 32a:	78 94       	sei
	if(role == MASTER){
 32c:	81 11       	cpse	r24, r1
 32e:	0a c0       	rjmp	.+20     	; 0x344 <SPI_init+0x1a>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
 338:	92 ed       	ldi	r25, 0xD2	; 210
 33a:	9c bd       	out	0x2c, r25	; 44
		SPSR = (1<<SPI2X);
 33c:	8d bd       	out	0x2d, r24	; 45
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	08 95       	ret
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = (1<<PB0);
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
		SPSR = (1<<SPI2X);
	}
	else if(role == SLAVE){
 344:	8f 3f       	cpi	r24, 0xFF	; 255
 346:	49 f4       	brne	.+18     	; 0x35a <SPI_init+0x30>
		DDRB = (1<<PB3); //Sets MISO as output
 348:	88 e0       	ldi	r24, 0x08	; 8
 34a:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE); //Initiates control register
 350:	80 e4       	ldi	r24, 0x40	; 64
 352:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 35e:	08 95       	ret

00000360 <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	PORTB &= 0b11111110;
 360:	95 b1       	in	r25, 0x05	; 5
 362:	9e 7f       	andi	r25, 0xFE	; 254
 364:	95 b9       	out	0x05, r25	; 5
	SPDR = transmitionCode;
 366:	8e bd       	out	0x2e, r24	; 46
	while(!SPITransmitFlag){} //Waits for transmition to finish
 368:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <SPITransmitFlag>
 36c:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <SPITransmitFlag+0x1>
 370:	89 2b       	or	r24, r25
 372:	d1 f3       	breq	.-12     	; 0x368 <SPI_transmit+0x8>
	SPITransmitFlag = 0;
 374:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <SPITransmitFlag+0x1>
 378:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <SPITransmitFlag>
	if(toggleRecieve == 1){
 37c:	61 30       	cpi	r22, 0x01	; 1
 37e:	71 05       	cpc	r23, r1
 380:	11 f4       	brne	.+4      	; 0x386 <SPI_transmit+0x26>
		return SPDR;
 382:	8e b5       	in	r24, 0x2e	; 46
 384:	08 95       	ret
	}
	else if(toggleRecieve == 0){
 386:	67 2b       	or	r22, r23
 388:	29 f0       	breq	.+10     	; 0x394 <SPI_transmit+0x34>
		return 1;
	}
	PORTB |= 0b00000001;
 38a:	85 b1       	in	r24, 0x05	; 5
 38c:	81 60       	ori	r24, 0x01	; 1
 38e:	85 b9       	out	0x05, r24	; 5
	return 0;
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret
	SPITransmitFlag = 0;
	if(toggleRecieve == 1){
		return SPDR;
	}
	else if(toggleRecieve == 0){
		return 1;
 394:	81 e0       	ldi	r24, 0x01	; 1
	}
	PORTB |= 0b00000001;
	return 0;
}
 396:	08 95       	ret

00000398 <__vector_24>:

ISR(SPI_STC_vect){
 398:	1f 92       	push	r1
 39a:	0f 92       	push	r0
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	0f 92       	push	r0
 3a0:	11 24       	eor	r1, r1
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
	SPITransmitFlag = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <SPITransmitFlag+0x1>
 3ae:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <SPITransmitFlag>
}
 3b2:	9f 91       	pop	r25
 3b4:	8f 91       	pop	r24
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <UART_init>:
	if(RX == '\r'){
		carriageReturn = 1;
	}
	else if(carriageReturn && RX == '\n'){
		receiveComplete = 1;
		bufferIndex = 0;
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	84 e6       	ldi	r24, 0x64	; 100
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	90 d0       	rcall	.+288    	; 0x4ea <calloc>
 3ca:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <buffer+0x1>
 3ce:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <buffer>
 3d2:	78 94       	sei
 3d4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 3d8:	83 e3       	ldi	r24, 0x33	; 51
 3da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 3de:	e1 ec       	ldi	r30, 0xC1	; 193
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	88 6d       	ori	r24, 0xD8	; 216
 3e6:	80 83       	st	Z, r24
 3e8:	e2 ec       	ldi	r30, 0xC2	; 194
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	86 60       	ori	r24, 0x06	; 6
 3f0:	80 83       	st	Z, r24
 3f2:	08 95       	ret

000003f4 <UART_receiveChar>:
	}
}

int UART_receiveChar(){
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	1f 92       	push	r1
 3fa:	1f 92       	push	r1
 3fc:	cd b7       	in	r28, 0x3d	; 61
 3fe:	de b7       	in	r29, 0x3e	; 62
	char tempBuffer[2];
	RX = UDR0;
 400:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 404:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <RX>
	buffer[bufferIndex] = RX;
 408:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <bufferIndex>
 40c:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <bufferIndex+0x1>
 410:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <buffer>
 414:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <buffer+0x1>
 418:	e8 0f       	add	r30, r24
 41a:	f9 1f       	adc	r31, r25
 41c:	20 83       	st	Z, r18
	if(bufferIndex == 3){
 41e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <bufferIndex>
 422:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <bufferIndex+0x1>
 426:	03 97       	sbiw	r24, 0x03	; 3
 428:	a9 f4       	brne	.+42     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		if(buffer[0] == 0x55 && buffer[1] == 0xAA){
 42a:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <buffer>
 42e:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <buffer+0x1>
 432:	80 81       	ld	r24, Z
 434:	85 35       	cpi	r24, 0x55	; 85
 436:	71 f4       	brne	.+28     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 438:	81 81       	ldd	r24, Z+1	; 0x01
 43a:	8a 3a       	cpi	r24, 0xAA	; 170
 43c:	59 f4       	brne	.+22     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
			tempBuffer[0] = buffer[2];
 43e:	82 81       	ldd	r24, Z+2	; 0x02
 440:	89 83       	std	Y+1, r24	; 0x01
			tempBuffer[1] = buffer[3];
 442:	83 81       	ldd	r24, Z+3	; 0x03
 444:	8a 83       	std	Y+2, r24	; 0x02
			packetLength = atoi(tempBuffer);
 446:	ce 01       	movw	r24, r28
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	8a d1       	rcall	.+788    	; 0x760 <atoi>
 44c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 450:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		}
	}
	if(bufferIndex == packetLength && packetLength != 0){
 454:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <bufferIndex>
 458:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <bufferIndex+0x1>
 45c:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 460:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 464:	28 17       	cp	r18, r24
 466:	39 07       	cpc	r19, r25
 468:	41 f4       	brne	.+16     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 46a:	89 2b       	or	r24, r25
 46c:	31 f0       	breq	.+12     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		packetReceiveFlag = 1;
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <packetReceiveFlag+0x1>
 476:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <packetReceiveFlag>
	}
	bufferIndex += 1;
 47a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <bufferIndex>
 47e:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <bufferIndex+0x1>
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <bufferIndex+0x1>
 488:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <bufferIndex>
	//checkCarriageReturn();
	return 1;
}
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <__vector_25>:


ISR(USART0_RX_vect){
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
	receiveCompleteFlag = 1;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <receiveCompleteFlag+0x1>
 4b0:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <receiveCompleteFlag>
};
 4b4:	9f 91       	pop	r25
 4b6:	8f 91       	pop	r24
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <__vector_27>:

ISR(USART0_TX_vect){
 4c2:	1f 92       	push	r1
 4c4:	0f 92       	push	r0
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	0f 92       	push	r0
 4ca:	11 24       	eor	r1, r1
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
	transmitComplete = 1;
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <transmitComplete+0x1>
 4d8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <transmitComplete>
 4dc:	9f 91       	pop	r25
 4de:	8f 91       	pop	r24
 4e0:	0f 90       	pop	r0
 4e2:	0f be       	out	0x3f, r0	; 63
 4e4:	0f 90       	pop	r0
 4e6:	1f 90       	pop	r1
 4e8:	18 95       	reti

000004ea <calloc>:
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	86 9f       	mul	r24, r22
 4f4:	80 01       	movw	r16, r0
 4f6:	87 9f       	mul	r24, r23
 4f8:	10 0d       	add	r17, r0
 4fa:	96 9f       	mul	r25, r22
 4fc:	10 0d       	add	r17, r0
 4fe:	11 24       	eor	r1, r1
 500:	c8 01       	movw	r24, r16
 502:	0d d0       	rcall	.+26     	; 0x51e <malloc>
 504:	ec 01       	movw	r28, r24
 506:	00 97       	sbiw	r24, 0x00	; 0
 508:	21 f0       	breq	.+8      	; 0x512 <calloc+0x28>
 50a:	a8 01       	movw	r20, r16
 50c:	60 e0       	ldi	r22, 0x00	; 0
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	44 d1       	rcall	.+648    	; 0x79a <memset>
 512:	ce 01       	movw	r24, r28
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	08 95       	ret

0000051e <malloc>:
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	82 30       	cpi	r24, 0x02	; 2
 528:	91 05       	cpc	r25, r1
 52a:	10 f4       	brcc	.+4      	; 0x530 <malloc+0x12>
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__flp>
 534:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__flp+0x1>
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	a0 e0       	ldi	r26, 0x00	; 0
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	30 97       	sbiw	r30, 0x00	; 0
 542:	19 f1       	breq	.+70     	; 0x58a <malloc+0x6c>
 544:	40 81       	ld	r20, Z
 546:	51 81       	ldd	r21, Z+1	; 0x01
 548:	02 81       	ldd	r16, Z+2	; 0x02
 54a:	13 81       	ldd	r17, Z+3	; 0x03
 54c:	48 17       	cp	r20, r24
 54e:	59 07       	cpc	r21, r25
 550:	c8 f0       	brcs	.+50     	; 0x584 <malloc+0x66>
 552:	84 17       	cp	r24, r20
 554:	95 07       	cpc	r25, r21
 556:	69 f4       	brne	.+26     	; 0x572 <malloc+0x54>
 558:	10 97       	sbiw	r26, 0x00	; 0
 55a:	31 f0       	breq	.+12     	; 0x568 <malloc+0x4a>
 55c:	12 96       	adiw	r26, 0x02	; 2
 55e:	0c 93       	st	X, r16
 560:	12 97       	sbiw	r26, 0x02	; 2
 562:	13 96       	adiw	r26, 0x03	; 3
 564:	1c 93       	st	X, r17
 566:	27 c0       	rjmp	.+78     	; 0x5b6 <malloc+0x98>
 568:	00 93 1a 02 	sts	0x021A, r16	; 0x80021a <__flp>
 56c:	10 93 1b 02 	sts	0x021B, r17	; 0x80021b <__flp+0x1>
 570:	22 c0       	rjmp	.+68     	; 0x5b6 <malloc+0x98>
 572:	21 15       	cp	r18, r1
 574:	31 05       	cpc	r19, r1
 576:	19 f0       	breq	.+6      	; 0x57e <malloc+0x60>
 578:	42 17       	cp	r20, r18
 57a:	53 07       	cpc	r21, r19
 57c:	18 f4       	brcc	.+6      	; 0x584 <malloc+0x66>
 57e:	9a 01       	movw	r18, r20
 580:	bd 01       	movw	r22, r26
 582:	ef 01       	movw	r28, r30
 584:	df 01       	movw	r26, r30
 586:	f8 01       	movw	r30, r16
 588:	db cf       	rjmp	.-74     	; 0x540 <malloc+0x22>
 58a:	21 15       	cp	r18, r1
 58c:	31 05       	cpc	r19, r1
 58e:	f9 f0       	breq	.+62     	; 0x5ce <malloc+0xb0>
 590:	28 1b       	sub	r18, r24
 592:	39 0b       	sbc	r19, r25
 594:	24 30       	cpi	r18, 0x04	; 4
 596:	31 05       	cpc	r19, r1
 598:	80 f4       	brcc	.+32     	; 0x5ba <malloc+0x9c>
 59a:	8a 81       	ldd	r24, Y+2	; 0x02
 59c:	9b 81       	ldd	r25, Y+3	; 0x03
 59e:	61 15       	cp	r22, r1
 5a0:	71 05       	cpc	r23, r1
 5a2:	21 f0       	breq	.+8      	; 0x5ac <malloc+0x8e>
 5a4:	fb 01       	movw	r30, r22
 5a6:	93 83       	std	Z+3, r25	; 0x03
 5a8:	82 83       	std	Z+2, r24	; 0x02
 5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <malloc+0x96>
 5ac:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__flp+0x1>
 5b0:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__flp>
 5b4:	fe 01       	movw	r30, r28
 5b6:	32 96       	adiw	r30, 0x02	; 2
 5b8:	44 c0       	rjmp	.+136    	; 0x642 <malloc+0x124>
 5ba:	fe 01       	movw	r30, r28
 5bc:	e2 0f       	add	r30, r18
 5be:	f3 1f       	adc	r31, r19
 5c0:	81 93       	st	Z+, r24
 5c2:	91 93       	st	Z+, r25
 5c4:	22 50       	subi	r18, 0x02	; 2
 5c6:	31 09       	sbc	r19, r1
 5c8:	39 83       	std	Y+1, r19	; 0x01
 5ca:	28 83       	st	Y, r18
 5cc:	3a c0       	rjmp	.+116    	; 0x642 <malloc+0x124>
 5ce:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
 5d2:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
 5d6:	23 2b       	or	r18, r19
 5d8:	41 f4       	brne	.+16     	; 0x5ea <malloc+0xcc>
 5da:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 5de:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 5e2:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <__brkval+0x1>
 5e6:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <__brkval>
 5ea:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 5ee:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 5f2:	21 15       	cp	r18, r1
 5f4:	31 05       	cpc	r19, r1
 5f6:	41 f4       	brne	.+16     	; 0x608 <malloc+0xea>
 5f8:	2d b7       	in	r18, 0x3d	; 61
 5fa:	3e b7       	in	r19, 0x3e	; 62
 5fc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 600:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 604:	24 1b       	sub	r18, r20
 606:	35 0b       	sbc	r19, r21
 608:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__brkval>
 60c:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__brkval+0x1>
 610:	e2 17       	cp	r30, r18
 612:	f3 07       	cpc	r31, r19
 614:	a0 f4       	brcc	.+40     	; 0x63e <malloc+0x120>
 616:	2e 1b       	sub	r18, r30
 618:	3f 0b       	sbc	r19, r31
 61a:	28 17       	cp	r18, r24
 61c:	39 07       	cpc	r19, r25
 61e:	78 f0       	brcs	.+30     	; 0x63e <malloc+0x120>
 620:	ac 01       	movw	r20, r24
 622:	4e 5f       	subi	r20, 0xFE	; 254
 624:	5f 4f       	sbci	r21, 0xFF	; 255
 626:	24 17       	cp	r18, r20
 628:	35 07       	cpc	r19, r21
 62a:	48 f0       	brcs	.+18     	; 0x63e <malloc+0x120>
 62c:	4e 0f       	add	r20, r30
 62e:	5f 1f       	adc	r21, r31
 630:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <__brkval+0x1>
 634:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <__brkval>
 638:	81 93       	st	Z+, r24
 63a:	91 93       	st	Z+, r25
 63c:	02 c0       	rjmp	.+4      	; 0x642 <malloc+0x124>
 63e:	e0 e0       	ldi	r30, 0x00	; 0
 640:	f0 e0       	ldi	r31, 0x00	; 0
 642:	cf 01       	movw	r24, r30
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	1f 91       	pop	r17
 64a:	0f 91       	pop	r16
 64c:	08 95       	ret

0000064e <free>:
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	00 97       	sbiw	r24, 0x00	; 0
 654:	09 f4       	brne	.+2      	; 0x658 <free+0xa>
 656:	81 c0       	rjmp	.+258    	; 0x75a <free+0x10c>
 658:	fc 01       	movw	r30, r24
 65a:	32 97       	sbiw	r30, 0x02	; 2
 65c:	13 82       	std	Z+3, r1	; 0x03
 65e:	12 82       	std	Z+2, r1	; 0x02
 660:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <__flp>
 664:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <__flp+0x1>
 668:	10 97       	sbiw	r26, 0x00	; 0
 66a:	81 f4       	brne	.+32     	; 0x68c <free+0x3e>
 66c:	20 81       	ld	r18, Z
 66e:	31 81       	ldd	r19, Z+1	; 0x01
 670:	82 0f       	add	r24, r18
 672:	93 1f       	adc	r25, r19
 674:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
 678:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
 67c:	28 17       	cp	r18, r24
 67e:	39 07       	cpc	r19, r25
 680:	51 f5       	brne	.+84     	; 0x6d6 <free+0x88>
 682:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <__brkval+0x1>
 686:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <__brkval>
 68a:	67 c0       	rjmp	.+206    	; 0x75a <free+0x10c>
 68c:	ed 01       	movw	r28, r26
 68e:	20 e0       	ldi	r18, 0x00	; 0
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	ce 17       	cp	r28, r30
 694:	df 07       	cpc	r29, r31
 696:	40 f4       	brcc	.+16     	; 0x6a8 <free+0x5a>
 698:	4a 81       	ldd	r20, Y+2	; 0x02
 69a:	5b 81       	ldd	r21, Y+3	; 0x03
 69c:	9e 01       	movw	r18, r28
 69e:	41 15       	cp	r20, r1
 6a0:	51 05       	cpc	r21, r1
 6a2:	f1 f0       	breq	.+60     	; 0x6e0 <free+0x92>
 6a4:	ea 01       	movw	r28, r20
 6a6:	f5 cf       	rjmp	.-22     	; 0x692 <free+0x44>
 6a8:	d3 83       	std	Z+3, r29	; 0x03
 6aa:	c2 83       	std	Z+2, r28	; 0x02
 6ac:	40 81       	ld	r20, Z
 6ae:	51 81       	ldd	r21, Z+1	; 0x01
 6b0:	84 0f       	add	r24, r20
 6b2:	95 1f       	adc	r25, r21
 6b4:	c8 17       	cp	r28, r24
 6b6:	d9 07       	cpc	r29, r25
 6b8:	59 f4       	brne	.+22     	; 0x6d0 <free+0x82>
 6ba:	88 81       	ld	r24, Y
 6bc:	99 81       	ldd	r25, Y+1	; 0x01
 6be:	84 0f       	add	r24, r20
 6c0:	95 1f       	adc	r25, r21
 6c2:	02 96       	adiw	r24, 0x02	; 2
 6c4:	91 83       	std	Z+1, r25	; 0x01
 6c6:	80 83       	st	Z, r24
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	9b 81       	ldd	r25, Y+3	; 0x03
 6cc:	93 83       	std	Z+3, r25	; 0x03
 6ce:	82 83       	std	Z+2, r24	; 0x02
 6d0:	21 15       	cp	r18, r1
 6d2:	31 05       	cpc	r19, r1
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <free+0x92>
 6d6:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__flp+0x1>
 6da:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__flp>
 6de:	3d c0       	rjmp	.+122    	; 0x75a <free+0x10c>
 6e0:	e9 01       	movw	r28, r18
 6e2:	fb 83       	std	Y+3, r31	; 0x03
 6e4:	ea 83       	std	Y+2, r30	; 0x02
 6e6:	49 91       	ld	r20, Y+
 6e8:	59 91       	ld	r21, Y+
 6ea:	c4 0f       	add	r28, r20
 6ec:	d5 1f       	adc	r29, r21
 6ee:	ec 17       	cp	r30, r28
 6f0:	fd 07       	cpc	r31, r29
 6f2:	61 f4       	brne	.+24     	; 0x70c <free+0xbe>
 6f4:	80 81       	ld	r24, Z
 6f6:	91 81       	ldd	r25, Z+1	; 0x01
 6f8:	84 0f       	add	r24, r20
 6fa:	95 1f       	adc	r25, r21
 6fc:	02 96       	adiw	r24, 0x02	; 2
 6fe:	e9 01       	movw	r28, r18
 700:	99 83       	std	Y+1, r25	; 0x01
 702:	88 83       	st	Y, r24
 704:	82 81       	ldd	r24, Z+2	; 0x02
 706:	93 81       	ldd	r25, Z+3	; 0x03
 708:	9b 83       	std	Y+3, r25	; 0x03
 70a:	8a 83       	std	Y+2, r24	; 0x02
 70c:	e0 e0       	ldi	r30, 0x00	; 0
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	12 96       	adiw	r26, 0x02	; 2
 712:	8d 91       	ld	r24, X+
 714:	9c 91       	ld	r25, X
 716:	13 97       	sbiw	r26, 0x03	; 3
 718:	00 97       	sbiw	r24, 0x00	; 0
 71a:	19 f0       	breq	.+6      	; 0x722 <free+0xd4>
 71c:	fd 01       	movw	r30, r26
 71e:	dc 01       	movw	r26, r24
 720:	f7 cf       	rjmp	.-18     	; 0x710 <free+0xc2>
 722:	8d 91       	ld	r24, X+
 724:	9c 91       	ld	r25, X
 726:	11 97       	sbiw	r26, 0x01	; 1
 728:	9d 01       	movw	r18, r26
 72a:	2e 5f       	subi	r18, 0xFE	; 254
 72c:	3f 4f       	sbci	r19, 0xFF	; 255
 72e:	82 0f       	add	r24, r18
 730:	93 1f       	adc	r25, r19
 732:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
 736:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
 73a:	28 17       	cp	r18, r24
 73c:	39 07       	cpc	r19, r25
 73e:	69 f4       	brne	.+26     	; 0x75a <free+0x10c>
 740:	30 97       	sbiw	r30, 0x00	; 0
 742:	29 f4       	brne	.+10     	; 0x74e <free+0x100>
 744:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__flp+0x1>
 748:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__flp>
 74c:	02 c0       	rjmp	.+4      	; 0x752 <free+0x104>
 74e:	13 82       	std	Z+3, r1	; 0x03
 750:	12 82       	std	Z+2, r1	; 0x02
 752:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <__brkval+0x1>
 756:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <__brkval>
 75a:	df 91       	pop	r29
 75c:	cf 91       	pop	r28
 75e:	08 95       	ret

00000760 <atoi>:
 760:	fc 01       	movw	r30, r24
 762:	88 27       	eor	r24, r24
 764:	99 27       	eor	r25, r25
 766:	e8 94       	clt
 768:	21 91       	ld	r18, Z+
 76a:	20 32       	cpi	r18, 0x20	; 32
 76c:	e9 f3       	breq	.-6      	; 0x768 <atoi+0x8>
 76e:	29 30       	cpi	r18, 0x09	; 9
 770:	10 f0       	brcs	.+4      	; 0x776 <atoi+0x16>
 772:	2e 30       	cpi	r18, 0x0E	; 14
 774:	c8 f3       	brcs	.-14     	; 0x768 <atoi+0x8>
 776:	2b 32       	cpi	r18, 0x2B	; 43
 778:	39 f0       	breq	.+14     	; 0x788 <atoi+0x28>
 77a:	2d 32       	cpi	r18, 0x2D	; 45
 77c:	31 f4       	brne	.+12     	; 0x78a <atoi+0x2a>
 77e:	68 94       	set
 780:	03 c0       	rjmp	.+6      	; 0x788 <atoi+0x28>
 782:	19 d0       	rcall	.+50     	; 0x7b6 <__mulhi_const_10>
 784:	82 0f       	add	r24, r18
 786:	91 1d       	adc	r25, r1
 788:	21 91       	ld	r18, Z+
 78a:	20 53       	subi	r18, 0x30	; 48
 78c:	2a 30       	cpi	r18, 0x0A	; 10
 78e:	c8 f3       	brcs	.-14     	; 0x782 <atoi+0x22>
 790:	1e f4       	brtc	.+6      	; 0x798 <atoi+0x38>
 792:	90 95       	com	r25
 794:	81 95       	neg	r24
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	08 95       	ret

0000079a <memset>:
 79a:	dc 01       	movw	r26, r24
 79c:	01 c0       	rjmp	.+2      	; 0x7a0 <memset+0x6>
 79e:	6d 93       	st	X+, r22
 7a0:	41 50       	subi	r20, 0x01	; 1
 7a2:	50 40       	sbci	r21, 0x00	; 0
 7a4:	e0 f7       	brcc	.-8      	; 0x79e <memset+0x4>
 7a6:	08 95       	ret

000007a8 <strcpy>:
 7a8:	fb 01       	movw	r30, r22
 7aa:	dc 01       	movw	r26, r24
 7ac:	01 90       	ld	r0, Z+
 7ae:	0d 92       	st	X+, r0
 7b0:	00 20       	and	r0, r0
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <strcpy+0x4>
 7b4:	08 95       	ret

000007b6 <__mulhi_const_10>:
 7b6:	7a e0       	ldi	r23, 0x0A	; 10
 7b8:	97 9f       	mul	r25, r23
 7ba:	90 2d       	mov	r25, r0
 7bc:	87 9f       	mul	r24, r23
 7be:	80 2d       	mov	r24, r0
 7c0:	91 0d       	add	r25, r1
 7c2:	11 24       	eor	r1, r1
 7c4:	08 95       	ret

000007c6 <_exit>:
 7c6:	f8 94       	cli

000007c8 <__stop_program>:
 7c8:	ff cf       	rjmp	.-2      	; 0x7c8 <__stop_program>


DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  0000074e  000007e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080020a  0080020a  000007ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000191b  00000000  00000000  000009ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ad  00000000  00000000  000022c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abc  00000000  00000000  00003474  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00003f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088a  00000000  00000000  000041c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c2  00000000  00000000  00004a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	7e c0       	rjmp	.+252    	; 0x152 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	64 c1       	rjmp	.+712    	; 0x32a <__vector_24>
  62:	00 00       	nop
  64:	e3 c1       	rjmp	.+966    	; 0x42c <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	f3 c1       	rjmp	.+998    	; 0x454 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	78 c0       	rjmp	.+240    	; 0x166 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e4       	ldi	r30, 0x4E	; 78
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 31       	cpi	r26, 0x1A	; 26
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	8a d0       	rcall	.+276    	; 0x234 <main>
 120:	14 c3       	rjmp	.+1576   	; 0x74a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer0>:
	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS0);
	ADCSRB = (1<<ADTS1)|(1<<ADTS0);
}

void ADC_storeSample(){
	adcSample = ADCH;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	84 bd       	out	0x24, r24	; 36
 128:	85 bd       	out	0x25, r24	; 37
 12a:	97 ec       	ldi	r25, 0xC7	; 199
 12c:	97 bd       	out	0x27, r25	; 39
 12e:	98 bd       	out	0x28, r25	; 40
 130:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
 134:	85 bb       	out	0x15, r24	; 21
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret

0000013c <ADC_init>:
 13c:	f3 df       	rcall	.-26     	; 0x124 <initTimer0>
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 144:	8d ea       	ldi	r24, 0xAD	; 173
 146:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 150:	08 95       	ret

00000152 <__vector_21>:
	} else{
		ADCBufferIndex += 1;
	}*/
}

ISR(TIMER0_COMPA_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
	
}
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_29>:

ISR(ADC_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
	//ADC_storeSample();
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <input_makePacket>:
#include "input.h"
#include <stdio.h>
#include <stdlib.h>

UARTPacket input_makePacket(char* packet){
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	8c 01       	movw	r16, r24
	UARTPacket returnData;
	returnData.type = packet[4];
 182:	dc 01       	movw	r26, r24
 184:	14 96       	adiw	r26, 0x04	; 4
 186:	cc 91       	ld	r28, X
	if(returnData.type == 0x01){
 188:	c1 30       	cpi	r28, 0x01	; 1
 18a:	79 f4       	brne	.+30     	; 0x1aa <input_makePacket+0x30>
		returnData.data = (char*)calloc(2, sizeof(char));
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	73 d1       	rcall	.+742    	; 0x47c <calloc>
 196:	38 2f       	mov	r19, r24
 198:	29 2f       	mov	r18, r25
		returnData.data[0] = packet[5];
 19a:	f8 01       	movw	r30, r16
 19c:	45 81       	ldd	r20, Z+5	; 0x05
 19e:	dc 01       	movw	r26, r24
 1a0:	4c 93       	st	X, r20
		returnData.data[1] = packet[6];
 1a2:	46 81       	ldd	r20, Z+6	; 0x06
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	4c 93       	st	X, r20
 1a8:	1a c0       	rjmp	.+52     	; 0x1de <input_makePacket+0x64>
	}
	else if(returnData.type == 0x02){
 1aa:	c2 30       	cpi	r28, 0x02	; 2
 1ac:	c1 f4       	brne	.+48     	; 0x1de <input_makePacket+0x64>
		returnData.data = (char*)calloc(4, sizeof(char));
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	62 d1       	rcall	.+708    	; 0x47c <calloc>
 1b8:	fc 01       	movw	r30, r24
 1ba:	38 2f       	mov	r19, r24
 1bc:	2f 2f       	mov	r18, r31
		returnData.data[0] = packet[5];
 1be:	d8 01       	movw	r26, r16
 1c0:	15 96       	adiw	r26, 0x05	; 5
 1c2:	8c 91       	ld	r24, X
 1c4:	15 97       	sbiw	r26, 0x05	; 5
 1c6:	80 83       	st	Z, r24
		returnData.data[1] = packet[6];
 1c8:	16 96       	adiw	r26, 0x06	; 6
 1ca:	8c 91       	ld	r24, X
 1cc:	16 97       	sbiw	r26, 0x06	; 6
 1ce:	81 83       	std	Z+1, r24	; 0x01
		returnData.data[2] = packet[7];
 1d0:	17 96       	adiw	r26, 0x07	; 7
 1d2:	8c 91       	ld	r24, X
 1d4:	17 97       	sbiw	r26, 0x07	; 7
 1d6:	82 83       	std	Z+2, r24	; 0x02
		returnData.data[3] = packet[8];
 1d8:	18 96       	adiw	r26, 0x08	; 8
 1da:	8c 91       	ld	r24, X
 1dc:	83 83       	std	Z+3, r24	; 0x03
	}
	else if(returnData.type == 0x03){}
	return returnData;
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	7c 2f       	mov	r23, r28
 1e2:	83 2f       	mov	r24, r19
 1e4:	92 2f       	mov	r25, r18
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	08 95       	ret

000001ee <transmitSPIPacket>:
	}
	SPI_transmit(0x00, 0);
	SPI_transmit(0x00, 0);
	for(int timer = 0; timer < 200; timer++){}
	return 1;
}
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	88 81       	ld	r24, Y
 1fa:	7b d0       	rcall	.+246    	; 0x2f2 <SPI_transmit>
 1fc:	8b 83       	std	Y+3, r24	; 0x03
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	76 d0       	rcall	.+236    	; 0x2f2 <SPI_transmit>
 206:	8b 83       	std	Y+3, r24	; 0x03
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	8a 81       	ldd	r24, Y+2	; 0x02
 20e:	71 d0       	rcall	.+226    	; 0x2f2 <SPI_transmit>
 210:	8b 83       	std	Y+3, r24	; 0x03
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	01 c0       	rjmp	.+2      	; 0x21a <transmitSPIPacket+0x2c>
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	88 3c       	cpi	r24, 0xC8	; 200
 21c:	91 05       	cpc	r25, r1
 21e:	e4 f3       	brlt	.-8      	; 0x218 <transmitSPIPacket+0x2a>
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	65 d0       	rcall	.+202    	; 0x2f2 <SPI_transmit>
 228:	8b 83       	std	Y+3, r24	; 0x03
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <main>:

int main(void){
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	00 d0       	rcall	.+0      	; 0x23a <main+0x6>
 23a:	1f 92       	push	r1
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
	UARTPacket OscPacket;
	SPIPacket genPacket;
	SPI_init(MASTER);
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	3c d0       	rcall	.+120    	; 0x2bc <SPI_init>
	UART_init();
 244:	86 d0       	rcall	.+268    	; 0x352 <UART_init>
	ADC_init();
 246:	7a df       	rcall	.-268    	; 0x13c <ADC_init>
 248:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <receiveCompleteFlag>
	char* data = "SS";
	OscPacket.recordLength = 2;
    while(1){
		if(receiveCompleteFlag){
 24c:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <receiveCompleteFlag+0x1>
 250:	89 2b       	or	r24, r25
 252:	29 f0       	breq	.+10     	; 0x25e <main+0x2a>
			UART_receiveChar();
 254:	98 d0       	rcall	.+304    	; 0x386 <UART_receiveChar>
 256:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <receiveCompleteFlag+0x1>
			receiveCompleteFlag = 0;
 25a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <receiveCompleteFlag>
 25e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <packetReceiveFlag>
		}
		if(packetReceiveFlag){
 262:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <packetReceiveFlag+0x1>
 266:	89 2b       	or	r24, r25
 268:	c1 f0       	breq	.+48     	; 0x29a <main+0x66>
 26a:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <buffer>
			OscPacket = input_makePacket(buffer);
 26e:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <buffer+0x1>
 272:	83 df       	rcall	.-250    	; 0x17a <input_makePacket>
 274:	00 91 14 02 	lds	r16, 0x0214	; 0x800214 <buffer>
			char* temp = buffer;
 278:	10 91 15 02 	lds	r17, 0x0215	; 0x800215 <buffer+0x1>
			buffer = (char*)calloc(100, sizeof(char));
 27c:	61 e0       	ldi	r22, 0x01	; 1
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	84 e6       	ldi	r24, 0x64	; 100
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	fb d0       	rcall	.+502    	; 0x47c <calloc>
 286:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <buffer+0x1>
 28a:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <buffer>
			free(temp);
 28e:	c8 01       	movw	r24, r16
 290:	a7 d1       	rcall	.+846    	; 0x5e0 <free>
 292:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <packetReceiveFlag+0x1>
			packetReceiveFlag = 0;
 296:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <packetReceiveFlag>
		}
		packet_makeSPIPacket(AMPLITUDE, 0x3F, &genPacket);
 29a:	ae 01       	movw	r20, r28
 29c:	4f 5f       	subi	r20, 0xFF	; 255
 29e:	5f 4f       	sbci	r21, 0xFF	; 255
 2a0:	6f e3       	ldi	r22, 0x3F	; 63
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	04 d0       	rcall	.+8      	; 0x2ae <packet_makeSPIPacket>
		transmitSPIPacket(&genPacket);
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	a1 df       	rcall	.-190    	; 0x1ee <transmitSPIPacket>
 2ac:	cd cf       	rjmp	.-102    	; 0x248 <main+0x14>

000002ae <packet_makeSPIPacket>:
#include "packet.h"
#include <string.h>	

void packet_makeSPIPacket(char ADDR, char DATA, SPIPacket* packet){
 2ae:	fa 01       	movw	r30, r20
	char CRC = 255 - DATA;
 2b0:	96 2f       	mov	r25, r22
 2b2:	90 95       	com	r25
	packet->ADDR = ADDR;
 2b4:	80 83       	st	Z, r24
	packet->DATA = DATA;
 2b6:	61 83       	std	Z+1, r22	; 0x01
	packet->CRC = CRC;
 2b8:	92 83       	std	Z+2, r25	; 0x02
 2ba:	08 95       	ret

000002bc <SPI_init>:

static int SPITransmitFlag = 0;

/* Replace with your library code */
int SPI_init(char role){
	sei();
 2bc:	78 94       	sei
	if(role == MASTER){
 2be:	81 11       	cpse	r24, r1
 2c0:	0a c0       	rjmp	.+20     	; 0x2d6 <SPI_init+0x1a>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 2c2:	87 e0       	ldi	r24, 0x07	; 7
 2c4:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
 2ca:	92 ed       	ldi	r25, 0xD2	; 210
 2cc:	9c bd       	out	0x2c, r25	; 44
		SPSR = (1<<SPI2X);
 2ce:	8d bd       	out	0x2d, r24	; 45
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	08 95       	ret
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = (1<<PB0);
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
		SPSR = (1<<SPI2X);
	}
	else if(role == SLAVE){
 2d6:	8f 3f       	cpi	r24, 0xFF	; 255
 2d8:	49 f4       	brne	.+18     	; 0x2ec <SPI_init+0x30>
		DDRB = (1<<PB3); //Sets MISO as output
 2da:	88 e0       	ldi	r24, 0x08	; 8
 2dc:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE); //Initiates control register
 2e2:	80 e4       	ldi	r24, 0x40	; 64
 2e4:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 2f0:	08 95       	ret

000002f2 <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	PORTB &= 0b11111110;
 2f2:	95 b1       	in	r25, 0x05	; 5
 2f4:	9e 7f       	andi	r25, 0xFE	; 254
 2f6:	95 b9       	out	0x05, r25	; 5
	SPDR = transmitionCode;
 2f8:	8e bd       	out	0x2e, r24	; 46
	while(!SPITransmitFlag){} //Waits for transmition to finish
 2fa:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SPITransmitFlag>
 2fe:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <SPITransmitFlag+0x1>
 302:	89 2b       	or	r24, r25
 304:	d1 f3       	breq	.-12     	; 0x2fa <SPI_transmit+0x8>
	SPITransmitFlag = 0;
 306:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <SPITransmitFlag+0x1>
 30a:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <SPITransmitFlag>
	if(toggleRecieve == 1){
 30e:	61 30       	cpi	r22, 0x01	; 1
 310:	71 05       	cpc	r23, r1
 312:	11 f4       	brne	.+4      	; 0x318 <SPI_transmit+0x26>
		return SPDR;
 314:	8e b5       	in	r24, 0x2e	; 46
 316:	08 95       	ret
	}
	else if(toggleRecieve == 0){
 318:	67 2b       	or	r22, r23
 31a:	29 f0       	breq	.+10     	; 0x326 <SPI_transmit+0x34>
		return 1;
	}
	PORTB |= 0b00000001;
 31c:	85 b1       	in	r24, 0x05	; 5
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	85 b9       	out	0x05, r24	; 5
	return 0;
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	08 95       	ret
	SPITransmitFlag = 0;
	if(toggleRecieve == 1){
		return SPDR;
	}
	else if(toggleRecieve == 0){
		return 1;
 326:	81 e0       	ldi	r24, 0x01	; 1
	}
	PORTB |= 0b00000001;
	return 0;
}
 328:	08 95       	ret

0000032a <__vector_24>:

ISR(SPI_STC_vect){
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
	SPITransmitFlag = 1;
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <SPITransmitFlag+0x1>
 340:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SPITransmitFlag>
}
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <UART_init>:
	if(RX == '\r'){
		carriageReturn = 1;
	}
	else if(carriageReturn && RX == '\n'){
		receiveComplete = 1;
		bufferIndex = 0;
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	84 e6       	ldi	r24, 0x64	; 100
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	90 d0       	rcall	.+288    	; 0x47c <calloc>
 35c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <buffer+0x1>
 360:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <buffer>
 364:	78 94       	sei
 366:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 36a:	83 e3       	ldi	r24, 0x33	; 51
 36c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 370:	e1 ec       	ldi	r30, 0xC1	; 193
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	88 6d       	ori	r24, 0xD8	; 216
 378:	80 83       	st	Z, r24
 37a:	e2 ec       	ldi	r30, 0xC2	; 194
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	86 60       	ori	r24, 0x06	; 6
 382:	80 83       	st	Z, r24
 384:	08 95       	ret

00000386 <UART_receiveChar>:
	}
}

int UART_receiveChar(){
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	1f 92       	push	r1
 38c:	1f 92       	push	r1
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
	char tempBuffer[2];
	RX = UDR0;
 392:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 396:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <RX>
	buffer[bufferIndex] = RX;
 39a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bufferIndex>
 39e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <bufferIndex+0x1>
 3a2:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <buffer>
 3a6:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <buffer+0x1>
 3aa:	e8 0f       	add	r30, r24
 3ac:	f9 1f       	adc	r31, r25
 3ae:	20 83       	st	Z, r18
	if(bufferIndex == 3){
 3b0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bufferIndex>
 3b4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <bufferIndex+0x1>
 3b8:	03 97       	sbiw	r24, 0x03	; 3
 3ba:	a9 f4       	brne	.+42     	; 0x3e6 <UART_receiveChar+0x60>
		if(buffer[0] == 0x55 && buffer[1] == 0xAA){
 3bc:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <buffer>
 3c0:	f0 91 15 02 	lds	r31, 0x0215	; 0x800215 <buffer+0x1>
 3c4:	80 81       	ld	r24, Z
 3c6:	85 35       	cpi	r24, 0x55	; 85
 3c8:	71 f4       	brne	.+28     	; 0x3e6 <UART_receiveChar+0x60>
 3ca:	81 81       	ldd	r24, Z+1	; 0x01
 3cc:	8a 3a       	cpi	r24, 0xAA	; 170
 3ce:	59 f4       	brne	.+22     	; 0x3e6 <UART_receiveChar+0x60>
			tempBuffer[0] = buffer[2];
 3d0:	82 81       	ldd	r24, Z+2	; 0x02
 3d2:	89 83       	std	Y+1, r24	; 0x01
			tempBuffer[1] = buffer[3];
 3d4:	83 81       	ldd	r24, Z+3	; 0x03
 3d6:	8a 83       	std	Y+2, r24	; 0x02
			packetLength = atoi(tempBuffer);
 3d8:	ce 01       	movw	r24, r28
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	8a d1       	rcall	.+788    	; 0x6f2 <atoi>
 3de:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x1>
 3e2:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
		}
	}
	if(bufferIndex == packetLength && packetLength != 0){
 3e6:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <bufferIndex>
 3ea:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <bufferIndex+0x1>
 3ee:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 3f2:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 3f6:	28 17       	cp	r18, r24
 3f8:	39 07       	cpc	r19, r25
 3fa:	41 f4       	brne	.+16     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3fc:	89 2b       	or	r24, r25
 3fe:	31 f0       	breq	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		packetReceiveFlag = 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <packetReceiveFlag+0x1>
 408:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <packetReceiveFlag>
	}
	bufferIndex += 1;
 40c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bufferIndex>
 410:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <bufferIndex+0x1>
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <bufferIndex+0x1>
 41a:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <bufferIndex>
	//checkCarriageReturn();
	return 1;
}
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	08 95       	ret

0000042c <__vector_25>:


ISR(USART0_RX_vect){
 42c:	1f 92       	push	r1
 42e:	0f 92       	push	r0
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	0f 92       	push	r0
 434:	11 24       	eor	r1, r1
 436:	8f 93       	push	r24
 438:	9f 93       	push	r25
	receiveCompleteFlag = 1;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <receiveCompleteFlag+0x1>
 442:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <receiveCompleteFlag>
};
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <__vector_27>:

ISR(USART0_TX_vect){
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
	transmitComplete = 1;
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <transmitComplete+0x1>
 46a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <transmitComplete>
 46e:	9f 91       	pop	r25
 470:	8f 91       	pop	r24
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <calloc>:
 47c:	0f 93       	push	r16
 47e:	1f 93       	push	r17
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	86 9f       	mul	r24, r22
 486:	80 01       	movw	r16, r0
 488:	87 9f       	mul	r24, r23
 48a:	10 0d       	add	r17, r0
 48c:	96 9f       	mul	r25, r22
 48e:	10 0d       	add	r17, r0
 490:	11 24       	eor	r1, r1
 492:	c8 01       	movw	r24, r16
 494:	0d d0       	rcall	.+26     	; 0x4b0 <malloc>
 496:	ec 01       	movw	r28, r24
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	21 f0       	breq	.+8      	; 0x4a4 <calloc+0x28>
 49c:	a8 01       	movw	r20, r16
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	44 d1       	rcall	.+648    	; 0x72c <memset>
 4a4:	ce 01       	movw	r24, r28
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	08 95       	ret

000004b0 <malloc>:
 4b0:	0f 93       	push	r16
 4b2:	1f 93       	push	r17
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	91 05       	cpc	r25, r1
 4bc:	10 f4       	brcc	.+4      	; 0x4c2 <malloc+0x12>
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__flp>
 4c6:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__flp+0x1>
 4ca:	20 e0       	ldi	r18, 0x00	; 0
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	a0 e0       	ldi	r26, 0x00	; 0
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	30 97       	sbiw	r30, 0x00	; 0
 4d4:	19 f1       	breq	.+70     	; 0x51c <malloc+0x6c>
 4d6:	40 81       	ld	r20, Z
 4d8:	51 81       	ldd	r21, Z+1	; 0x01
 4da:	02 81       	ldd	r16, Z+2	; 0x02
 4dc:	13 81       	ldd	r17, Z+3	; 0x03
 4de:	48 17       	cp	r20, r24
 4e0:	59 07       	cpc	r21, r25
 4e2:	c8 f0       	brcs	.+50     	; 0x516 <malloc+0x66>
 4e4:	84 17       	cp	r24, r20
 4e6:	95 07       	cpc	r25, r21
 4e8:	69 f4       	brne	.+26     	; 0x504 <malloc+0x54>
 4ea:	10 97       	sbiw	r26, 0x00	; 0
 4ec:	31 f0       	breq	.+12     	; 0x4fa <malloc+0x4a>
 4ee:	12 96       	adiw	r26, 0x02	; 2
 4f0:	0c 93       	st	X, r16
 4f2:	12 97       	sbiw	r26, 0x02	; 2
 4f4:	13 96       	adiw	r26, 0x03	; 3
 4f6:	1c 93       	st	X, r17
 4f8:	27 c0       	rjmp	.+78     	; 0x548 <malloc+0x98>
 4fa:	00 93 18 02 	sts	0x0218, r16	; 0x800218 <__flp>
 4fe:	10 93 19 02 	sts	0x0219, r17	; 0x800219 <__flp+0x1>
 502:	22 c0       	rjmp	.+68     	; 0x548 <malloc+0x98>
 504:	21 15       	cp	r18, r1
 506:	31 05       	cpc	r19, r1
 508:	19 f0       	breq	.+6      	; 0x510 <malloc+0x60>
 50a:	42 17       	cp	r20, r18
 50c:	53 07       	cpc	r21, r19
 50e:	18 f4       	brcc	.+6      	; 0x516 <malloc+0x66>
 510:	9a 01       	movw	r18, r20
 512:	bd 01       	movw	r22, r26
 514:	ef 01       	movw	r28, r30
 516:	df 01       	movw	r26, r30
 518:	f8 01       	movw	r30, r16
 51a:	db cf       	rjmp	.-74     	; 0x4d2 <malloc+0x22>
 51c:	21 15       	cp	r18, r1
 51e:	31 05       	cpc	r19, r1
 520:	f9 f0       	breq	.+62     	; 0x560 <malloc+0xb0>
 522:	28 1b       	sub	r18, r24
 524:	39 0b       	sbc	r19, r25
 526:	24 30       	cpi	r18, 0x04	; 4
 528:	31 05       	cpc	r19, r1
 52a:	80 f4       	brcc	.+32     	; 0x54c <malloc+0x9c>
 52c:	8a 81       	ldd	r24, Y+2	; 0x02
 52e:	9b 81       	ldd	r25, Y+3	; 0x03
 530:	61 15       	cp	r22, r1
 532:	71 05       	cpc	r23, r1
 534:	21 f0       	breq	.+8      	; 0x53e <malloc+0x8e>
 536:	fb 01       	movw	r30, r22
 538:	93 83       	std	Z+3, r25	; 0x03
 53a:	82 83       	std	Z+2, r24	; 0x02
 53c:	04 c0       	rjmp	.+8      	; 0x546 <malloc+0x96>
 53e:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <__flp+0x1>
 542:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <__flp>
 546:	fe 01       	movw	r30, r28
 548:	32 96       	adiw	r30, 0x02	; 2
 54a:	44 c0       	rjmp	.+136    	; 0x5d4 <malloc+0x124>
 54c:	fe 01       	movw	r30, r28
 54e:	e2 0f       	add	r30, r18
 550:	f3 1f       	adc	r31, r19
 552:	81 93       	st	Z+, r24
 554:	91 93       	st	Z+, r25
 556:	22 50       	subi	r18, 0x02	; 2
 558:	31 09       	sbc	r19, r1
 55a:	39 83       	std	Y+1, r19	; 0x01
 55c:	28 83       	st	Y, r18
 55e:	3a c0       	rjmp	.+116    	; 0x5d4 <malloc+0x124>
 560:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <__brkval>
 564:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <__brkval+0x1>
 568:	23 2b       	or	r18, r19
 56a:	41 f4       	brne	.+16     	; 0x57c <malloc+0xcc>
 56c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 570:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 574:	30 93 17 02 	sts	0x0217, r19	; 0x800217 <__brkval+0x1>
 578:	20 93 16 02 	sts	0x0216, r18	; 0x800216 <__brkval>
 57c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 580:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 584:	21 15       	cp	r18, r1
 586:	31 05       	cpc	r19, r1
 588:	41 f4       	brne	.+16     	; 0x59a <malloc+0xea>
 58a:	2d b7       	in	r18, 0x3d	; 61
 58c:	3e b7       	in	r19, 0x3e	; 62
 58e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 592:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 596:	24 1b       	sub	r18, r20
 598:	35 0b       	sbc	r19, r21
 59a:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <__brkval>
 59e:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <__brkval+0x1>
 5a2:	e2 17       	cp	r30, r18
 5a4:	f3 07       	cpc	r31, r19
 5a6:	a0 f4       	brcc	.+40     	; 0x5d0 <malloc+0x120>
 5a8:	2e 1b       	sub	r18, r30
 5aa:	3f 0b       	sbc	r19, r31
 5ac:	28 17       	cp	r18, r24
 5ae:	39 07       	cpc	r19, r25
 5b0:	78 f0       	brcs	.+30     	; 0x5d0 <malloc+0x120>
 5b2:	ac 01       	movw	r20, r24
 5b4:	4e 5f       	subi	r20, 0xFE	; 254
 5b6:	5f 4f       	sbci	r21, 0xFF	; 255
 5b8:	24 17       	cp	r18, r20
 5ba:	35 07       	cpc	r19, r21
 5bc:	48 f0       	brcs	.+18     	; 0x5d0 <malloc+0x120>
 5be:	4e 0f       	add	r20, r30
 5c0:	5f 1f       	adc	r21, r31
 5c2:	50 93 17 02 	sts	0x0217, r21	; 0x800217 <__brkval+0x1>
 5c6:	40 93 16 02 	sts	0x0216, r20	; 0x800216 <__brkval>
 5ca:	81 93       	st	Z+, r24
 5cc:	91 93       	st	Z+, r25
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <malloc+0x124>
 5d0:	e0 e0       	ldi	r30, 0x00	; 0
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	cf 01       	movw	r24, r30
 5d6:	df 91       	pop	r29
 5d8:	cf 91       	pop	r28
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	08 95       	ret

000005e0 <free>:
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	00 97       	sbiw	r24, 0x00	; 0
 5e6:	09 f4       	brne	.+2      	; 0x5ea <free+0xa>
 5e8:	81 c0       	rjmp	.+258    	; 0x6ec <free+0x10c>
 5ea:	fc 01       	movw	r30, r24
 5ec:	32 97       	sbiw	r30, 0x02	; 2
 5ee:	13 82       	std	Z+3, r1	; 0x03
 5f0:	12 82       	std	Z+2, r1	; 0x02
 5f2:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <__flp>
 5f6:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <__flp+0x1>
 5fa:	10 97       	sbiw	r26, 0x00	; 0
 5fc:	81 f4       	brne	.+32     	; 0x61e <free+0x3e>
 5fe:	20 81       	ld	r18, Z
 600:	31 81       	ldd	r19, Z+1	; 0x01
 602:	82 0f       	add	r24, r18
 604:	93 1f       	adc	r25, r19
 606:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <__brkval>
 60a:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <__brkval+0x1>
 60e:	28 17       	cp	r18, r24
 610:	39 07       	cpc	r19, r25
 612:	51 f5       	brne	.+84     	; 0x668 <free+0x88>
 614:	f0 93 17 02 	sts	0x0217, r31	; 0x800217 <__brkval+0x1>
 618:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <__brkval>
 61c:	67 c0       	rjmp	.+206    	; 0x6ec <free+0x10c>
 61e:	ed 01       	movw	r28, r26
 620:	20 e0       	ldi	r18, 0x00	; 0
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	ce 17       	cp	r28, r30
 626:	df 07       	cpc	r29, r31
 628:	40 f4       	brcc	.+16     	; 0x63a <free+0x5a>
 62a:	4a 81       	ldd	r20, Y+2	; 0x02
 62c:	5b 81       	ldd	r21, Y+3	; 0x03
 62e:	9e 01       	movw	r18, r28
 630:	41 15       	cp	r20, r1
 632:	51 05       	cpc	r21, r1
 634:	f1 f0       	breq	.+60     	; 0x672 <free+0x92>
 636:	ea 01       	movw	r28, r20
 638:	f5 cf       	rjmp	.-22     	; 0x624 <free+0x44>
 63a:	d3 83       	std	Z+3, r29	; 0x03
 63c:	c2 83       	std	Z+2, r28	; 0x02
 63e:	40 81       	ld	r20, Z
 640:	51 81       	ldd	r21, Z+1	; 0x01
 642:	84 0f       	add	r24, r20
 644:	95 1f       	adc	r25, r21
 646:	c8 17       	cp	r28, r24
 648:	d9 07       	cpc	r29, r25
 64a:	59 f4       	brne	.+22     	; 0x662 <free+0x82>
 64c:	88 81       	ld	r24, Y
 64e:	99 81       	ldd	r25, Y+1	; 0x01
 650:	84 0f       	add	r24, r20
 652:	95 1f       	adc	r25, r21
 654:	02 96       	adiw	r24, 0x02	; 2
 656:	91 83       	std	Z+1, r25	; 0x01
 658:	80 83       	st	Z, r24
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	9b 81       	ldd	r25, Y+3	; 0x03
 65e:	93 83       	std	Z+3, r25	; 0x03
 660:	82 83       	std	Z+2, r24	; 0x02
 662:	21 15       	cp	r18, r1
 664:	31 05       	cpc	r19, r1
 666:	29 f4       	brne	.+10     	; 0x672 <free+0x92>
 668:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <__flp+0x1>
 66c:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <__flp>
 670:	3d c0       	rjmp	.+122    	; 0x6ec <free+0x10c>
 672:	e9 01       	movw	r28, r18
 674:	fb 83       	std	Y+3, r31	; 0x03
 676:	ea 83       	std	Y+2, r30	; 0x02
 678:	49 91       	ld	r20, Y+
 67a:	59 91       	ld	r21, Y+
 67c:	c4 0f       	add	r28, r20
 67e:	d5 1f       	adc	r29, r21
 680:	ec 17       	cp	r30, r28
 682:	fd 07       	cpc	r31, r29
 684:	61 f4       	brne	.+24     	; 0x69e <free+0xbe>
 686:	80 81       	ld	r24, Z
 688:	91 81       	ldd	r25, Z+1	; 0x01
 68a:	84 0f       	add	r24, r20
 68c:	95 1f       	adc	r25, r21
 68e:	02 96       	adiw	r24, 0x02	; 2
 690:	e9 01       	movw	r28, r18
 692:	99 83       	std	Y+1, r25	; 0x01
 694:	88 83       	st	Y, r24
 696:	82 81       	ldd	r24, Z+2	; 0x02
 698:	93 81       	ldd	r25, Z+3	; 0x03
 69a:	9b 83       	std	Y+3, r25	; 0x03
 69c:	8a 83       	std	Y+2, r24	; 0x02
 69e:	e0 e0       	ldi	r30, 0x00	; 0
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	12 96       	adiw	r26, 0x02	; 2
 6a4:	8d 91       	ld	r24, X+
 6a6:	9c 91       	ld	r25, X
 6a8:	13 97       	sbiw	r26, 0x03	; 3
 6aa:	00 97       	sbiw	r24, 0x00	; 0
 6ac:	19 f0       	breq	.+6      	; 0x6b4 <free+0xd4>
 6ae:	fd 01       	movw	r30, r26
 6b0:	dc 01       	movw	r26, r24
 6b2:	f7 cf       	rjmp	.-18     	; 0x6a2 <free+0xc2>
 6b4:	8d 91       	ld	r24, X+
 6b6:	9c 91       	ld	r25, X
 6b8:	11 97       	sbiw	r26, 0x01	; 1
 6ba:	9d 01       	movw	r18, r26
 6bc:	2e 5f       	subi	r18, 0xFE	; 254
 6be:	3f 4f       	sbci	r19, 0xFF	; 255
 6c0:	82 0f       	add	r24, r18
 6c2:	93 1f       	adc	r25, r19
 6c4:	20 91 16 02 	lds	r18, 0x0216	; 0x800216 <__brkval>
 6c8:	30 91 17 02 	lds	r19, 0x0217	; 0x800217 <__brkval+0x1>
 6cc:	28 17       	cp	r18, r24
 6ce:	39 07       	cpc	r19, r25
 6d0:	69 f4       	brne	.+26     	; 0x6ec <free+0x10c>
 6d2:	30 97       	sbiw	r30, 0x00	; 0
 6d4:	29 f4       	brne	.+10     	; 0x6e0 <free+0x100>
 6d6:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <__flp+0x1>
 6da:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <__flp>
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <free+0x104>
 6e0:	13 82       	std	Z+3, r1	; 0x03
 6e2:	12 82       	std	Z+2, r1	; 0x02
 6e4:	b0 93 17 02 	sts	0x0217, r27	; 0x800217 <__brkval+0x1>
 6e8:	a0 93 16 02 	sts	0x0216, r26	; 0x800216 <__brkval>
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <atoi>:
 6f2:	fc 01       	movw	r30, r24
 6f4:	88 27       	eor	r24, r24
 6f6:	99 27       	eor	r25, r25
 6f8:	e8 94       	clt
 6fa:	21 91       	ld	r18, Z+
 6fc:	20 32       	cpi	r18, 0x20	; 32
 6fe:	e9 f3       	breq	.-6      	; 0x6fa <atoi+0x8>
 700:	29 30       	cpi	r18, 0x09	; 9
 702:	10 f0       	brcs	.+4      	; 0x708 <atoi+0x16>
 704:	2e 30       	cpi	r18, 0x0E	; 14
 706:	c8 f3       	brcs	.-14     	; 0x6fa <atoi+0x8>
 708:	2b 32       	cpi	r18, 0x2B	; 43
 70a:	39 f0       	breq	.+14     	; 0x71a <atoi+0x28>
 70c:	2d 32       	cpi	r18, 0x2D	; 45
 70e:	31 f4       	brne	.+12     	; 0x71c <atoi+0x2a>
 710:	68 94       	set
 712:	03 c0       	rjmp	.+6      	; 0x71a <atoi+0x28>
 714:	12 d0       	rcall	.+36     	; 0x73a <__mulhi_const_10>
 716:	82 0f       	add	r24, r18
 718:	91 1d       	adc	r25, r1
 71a:	21 91       	ld	r18, Z+
 71c:	20 53       	subi	r18, 0x30	; 48
 71e:	2a 30       	cpi	r18, 0x0A	; 10
 720:	c8 f3       	brcs	.-14     	; 0x714 <atoi+0x22>
 722:	1e f4       	brtc	.+6      	; 0x72a <atoi+0x38>
 724:	90 95       	com	r25
 726:	81 95       	neg	r24
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	08 95       	ret

0000072c <memset>:
 72c:	dc 01       	movw	r26, r24
 72e:	01 c0       	rjmp	.+2      	; 0x732 <memset+0x6>
 730:	6d 93       	st	X+, r22
 732:	41 50       	subi	r20, 0x01	; 1
 734:	50 40       	sbci	r21, 0x00	; 0
 736:	e0 f7       	brcc	.-8      	; 0x730 <memset+0x4>
 738:	08 95       	ret

0000073a <__mulhi_const_10>:
 73a:	7a e0       	ldi	r23, 0x0A	; 10
 73c:	97 9f       	mul	r25, r23
 73e:	90 2d       	mov	r25, r0
 740:	87 9f       	mul	r24, r23
 742:	80 2d       	mov	r24, r0
 744:	91 0d       	add	r25, r1
 746:	11 24       	eor	r1, r1
 748:	08 95       	ret

0000074a <_exit>:
 74a:	f8 94       	cli

0000074c <__stop_program>:
 74c:	ff cf       	rjmp	.-2      	; 0x74c <__stop_program>

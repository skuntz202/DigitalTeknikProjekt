
DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800204  00800204  00000362  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe0  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da2  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056f  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00002760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000674  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e2  00000000  00000000  00002f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000321a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	9e c0       	rjmp	.+316    	; 0x19e <__vector_24>
  62:	00 00       	nop
  64:	f5 c0       	rjmp	.+490    	; 0x250 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	18 c1       	rjmp	.+560    	; 0x29e <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ec       	ldi	r30, 0xCA	; 202
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e0       	ldi	r26, 0x04	; 4
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 36       	cpi	r26, 0x6E	; 110
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	d2 c0       	rjmp	.+420    	; 0x2c6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
	SPI_init(MASTER);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	07 d0       	rcall	.+14     	; 0x136 <SPI_init>
	UART_init();
 128:	44 d0       	rcall	.+136    	; 0x1b2 <UART_init>
 12a:	61 e0       	ldi	r22, 0x01	; 1
	char response;
    while(1){
		//_delay_ms(100);
		response = SPI_transmit(0xF2, 1);
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	82 ef       	ldi	r24, 0xF2	; 242
 130:	1b d0       	rcall	.+54     	; 0x168 <SPI_transmit>
		UART_transChar(response);
 132:	50 d0       	rcall	.+160    	; 0x1d4 <UART_transChar>
 134:	fa cf       	rjmp	.-12     	; 0x12a <main+0x6>

00000136 <SPI_init>:
 136:	78 94       	sei
#include "./SPILib.h"

/* Replace with your library code */
int SPI_init(char role){
	sei();
	if(role == MASTER){
 138:	81 11       	cpse	r24, r1
 13a:	08 c0       	rjmp	.+16     	; 0x14c <SPI_init+0x16>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	84 b9       	out	0x04, r24	; 4
		PORTB = 0b00000000;
 140:	15 b8       	out	0x05, r1	; 5
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Initiates control register
 142:	81 e5       	ldi	r24, 0x51	; 81
 144:	8c bd       	out	0x2c, r24	; 44
		SPCR = 0b01001000; //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
	if(role == MASTER){
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = 0b00000000;
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Initiates control register
	}
	else if(role == SLAVE){
 14c:	8f 3f       	cpi	r24, 0xFF	; 255
 14e:	49 f4       	brne	.+18     	; 0x162 <SPI_init+0x2c>
		DDRB = (1<<PB3); //Sets MISO as output
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	85 b9       	out	0x05, r24	; 5
		SPCR = 0b01001000; //Initiates control register
 158:	88 e4       	ldi	r24, 0x48	; 72
 15a:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = 0b01001000; //Initiates control register
	}
	else{
		return 0;
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 166:	08 95       	ret

00000168 <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	if((DDRB & 0b00000111) == 0b00000111){
 168:	94 b1       	in	r25, 0x04	; 4
 16a:	97 70       	andi	r25, 0x07	; 7
 16c:	97 30       	cpi	r25, 0x07	; 7
 16e:	99 f4       	brne	.+38     	; 0x196 <SPI_transmit+0x2e>
		PORTB &= 0b11111110;
 170:	95 b1       	in	r25, 0x05	; 5
 172:	9e 7f       	andi	r25, 0xFE	; 254
 174:	95 b9       	out	0x05, r25	; 5
		SPDR = transmitionCode;
 176:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & 0b10000000) != 0b10000000){} //Waits for transmition to finish
 178:	0d b4       	in	r0, 0x2d	; 45
 17a:	07 fe       	sbrs	r0, 7
 17c:	fd cf       	rjmp	.-6      	; 0x178 <SPI_transmit+0x10>
		PORTB |= 0b00000001;
 17e:	85 b1       	in	r24, 0x05	; 5
 180:	81 60       	ori	r24, 0x01	; 1
 182:	85 b9       	out	0x05, r24	; 5
		if(toggleRecieve == 1){
 184:	61 30       	cpi	r22, 0x01	; 1
 186:	71 05       	cpc	r23, r1
 188:	11 f4       	brne	.+4      	; 0x18e <SPI_transmit+0x26>
			return SPDR;
 18a:	8e b5       	in	r24, 0x2e	; 46
 18c:	08 95       	ret
		}
		else if(toggleRecieve == 0){
 18e:	67 2b       	or	r22, r23
 190:	21 f4       	brne	.+8      	; 0x19a <SPI_transmit+0x32>
			return 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
		}
	}
	return 0;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
 19a:	80 e0       	ldi	r24, 0x00	; 0
}
 19c:	08 95       	ret

0000019e <__vector_24>:

ISR(SPI_STC_vect){
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
	
}
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <UART_init>:
	}
	if(endLine){
		UART_transChar('\r');
		UART_transChar('\n');
	}
}
 1b2:	78 94       	sei
 1b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 1b8:	83 e3       	ldi	r24, 0x33	; 51
 1ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 1be:	e1 ec       	ldi	r30, 0xC1	; 193
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	88 6d       	ori	r24, 0xD8	; 216
 1c6:	80 83       	st	Z, r24
 1c8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	86 60       	ori	r24, 0x06	; 6
 1d0:	80 83       	st	Z, r24
 1d2:	08 95       	ret

000001d4 <UART_transChar>:
 1d4:	20 91 01 02 	lds	r18, 0x0201	; 0x800201 <transmitComplete>
 1d8:	30 91 02 02 	lds	r19, 0x0202	; 0x800202 <transmitComplete+0x1>
 1dc:	23 2b       	or	r18, r19
 1de:	d1 f3       	breq	.-12     	; 0x1d4 <UART_transChar>
 1e0:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <transmitComplete+0x1>
 1e4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <transmitComplete>
 1e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 1ec:	08 95       	ret

000001ee <UART_receiveChar>:

void UART_receiveChar(){
	RX = UDR0;
 1ee:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 1f2:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	buffer[bufferIndex] = RX;
 1f6:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <bufferIndex>
 1fa:	f0 91 09 02 	lds	r31, 0x0209	; 0x800209 <bufferIndex+0x1>
 1fe:	e6 5f       	subi	r30, 0xF6	; 246
 200:	fd 4f       	sbci	r31, 0xFD	; 253
 202:	80 83       	st	Z, r24
	bufferIndex += 1;
 204:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <bufferIndex>
 208:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <bufferIndex+0x1>
 20c:	2f 5f       	subi	r18, 0xFF	; 255
 20e:	3f 4f       	sbci	r19, 0xFF	; 255
 210:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <bufferIndex+0x1>
 214:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <bufferIndex>
	if(RX == '\r'){
 218:	8d 30       	cpi	r24, 0x0D	; 13
 21a:	39 f4       	brne	.+14     	; 0x22a <UART_receiveChar+0x3c>
		carriageReturn = 1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <carriageReturn+0x1>
 224:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <carriageReturn>
 228:	08 95       	ret
	}
	else if(carriageReturn && RX == '\n'){
 22a:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <carriageReturn>
 22e:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <carriageReturn+0x1>
 232:	23 2b       	or	r18, r19
 234:	61 f0       	breq	.+24     	; 0x24e <UART_receiveChar+0x60>
 236:	8a 30       	cpi	r24, 0x0A	; 10
 238:	51 f4       	brne	.+20     	; 0x24e <UART_receiveChar+0x60>
		receiveComplete = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <__data_end+0x1>
 242:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
		bufferIndex = 0;
 246:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <bufferIndex+0x1>
 24a:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <bufferIndex>
 24e:	08 95       	ret

00000250 <__vector_25>:
	}
}


ISR(USART0_RX_vect){
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	0b b6       	in	r0, 0x3b	; 59
 25c:	0f 92       	push	r0
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	ef 93       	push	r30
 274:	ff 93       	push	r31
	UART_receiveChar();
 276:	bb df       	rcall	.-138    	; 0x1ee <UART_receiveChar>
};
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0b be       	out	0x3b, r0	; 59
 294:	0f 90       	pop	r0
 296:	0f be       	out	0x3f, r0	; 63
 298:	0f 90       	pop	r0
 29a:	1f 90       	pop	r1
 29c:	18 95       	reti

0000029e <__vector_27>:

ISR(USART0_TX_vect){
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
	transmitComplete = 1;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <transmitComplete+0x1>
 2b4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <transmitComplete>
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>

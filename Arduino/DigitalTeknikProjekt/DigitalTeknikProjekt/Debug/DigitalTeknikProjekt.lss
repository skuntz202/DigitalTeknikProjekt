
DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800200  0000069e  00000732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000069e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800282  00800282  000007b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001325  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f16  00000000  00000000  00001c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000740  00000000  00000000  00002b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003260  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000702  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004cc  00000000  00000000  00003b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003fe6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	26 c1       	rjmp	.+588    	; 0x2ae <__vector_24>
  62:	00 00       	nop
  64:	9d c1       	rjmp	.+826    	; 0x3a0 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	c0 c1       	rjmp	.+896    	; 0x3ee <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e9       	ldi	r30, 0x9E	; 158
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 38       	cpi	r26, 0x82	; 130
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e8       	ldi	r26, 0x82	; 130
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 3f       	cpi	r26, 0xF0	; 240
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	78 d0       	rcall	.+240    	; 0x210 <main>
 120:	bc c2       	rjmp	.+1400   	; 0x69a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <transmitPacket>:
#include "packet.h"

#define F_CPU 16000000UL
#include <util/delay.h>

int transmitPacket(char* packet){
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8c 01       	movw	r16, r24
	char response;
	for(int z = 0; z < 3; z++){
 132:	e1 2c       	mov	r14, r1
 134:	f1 2c       	mov	r15, r1
 136:	5a c0       	rjmp	.+180    	; 0x1ec <transmitPacket+0xc8>
		for(int i = 0; i < 3; i++){
			response = SPI_transmit(packet[i], 1);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	f8 01       	movw	r30, r16
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	80 81       	ld	r24, Z
 144:	99 d0       	rcall	.+306    	; 0x278 <SPI_transmit>
			if(response == 0x03){
 146:	83 30       	cpi	r24, 0x03	; 3
 148:	41 f4       	brne	.+16     	; 0x15a <transmitPacket+0x36>
				UART_transStr("Unkown error", 1);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	89 e0       	ldi	r24, 0x09	; 9
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	d5 d0       	rcall	.+426    	; 0x2fe <UART_transStr>
				i = 0;
 154:	c0 e0       	ldi	r28, 0x00	; 0
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	1c c0       	rjmp	.+56     	; 0x192 <transmitPacket+0x6e>
			}
			else if(response == 0x02){
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	41 f4       	brne	.+16     	; 0x16e <transmitPacket+0x4a>
				UART_transStr("CRC error", 1);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	86 e1       	ldi	r24, 0x16	; 22
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	cb d0       	rcall	.+406    	; 0x2fe <UART_transStr>
				i = 0;
 168:	c0 e0       	ldi	r28, 0x00	; 0
 16a:	d0 e0       	ldi	r29, 0x00	; 0
 16c:	12 c0       	rjmp	.+36     	; 0x192 <transmitPacket+0x6e>
			}
			else if(response == 0x01){
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	41 f4       	brne	.+16     	; 0x182 <transmitPacket+0x5e>
				UART_transStr("ACK error", 1);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	80 e2       	ldi	r24, 0x20	; 32
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	c1 d0       	rcall	.+386    	; 0x2fe <UART_transStr>
				i = 0;
 17c:	c0 e0       	ldi	r28, 0x00	; 0
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	08 c0       	rjmp	.+16     	; 0x192 <transmitPacket+0x6e>
			}
			else if(response == 0x00){}else{
 182:	88 23       	and	r24, r24
 184:	31 f0       	breq	.+12     	; 0x192 <transmitPacket+0x6e>
				UART_transStr("Response error, package terminated", 1);
 186:	61 e0       	ldi	r22, 0x01	; 1
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	8a e2       	ldi	r24, 0x2A	; 42
 18c:	92 e0       	ldi	r25, 0x02	; 2
 18e:	b7 d0       	rcall	.+366    	; 0x2fe <UART_transStr>
				return 1;
 190:	36 c0       	rjmp	.+108    	; 0x1fe <transmitPacket+0xda>
#include <util/delay.h>

int transmitPacket(char* packet){
	char response;
	for(int z = 0; z < 3; z++){
		for(int i = 0; i < 3; i++){
 192:	21 96       	adiw	r28, 0x01	; 1
 194:	02 c0       	rjmp	.+4      	; 0x19a <transmitPacket+0x76>
 196:	c0 e0       	ldi	r28, 0x00	; 0
 198:	d0 e0       	ldi	r29, 0x00	; 0
 19a:	c3 30       	cpi	r28, 0x03	; 3
 19c:	d1 05       	cpc	r29, r1
 19e:	64 f2       	brlt	.-104    	; 0x138 <transmitPacket+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a0:	8f e9       	ldi	r24, 0x9F	; 159
 1a2:	9f e0       	ldi	r25, 0x0F	; 15
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <transmitPacket+0x80>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <transmitPacket+0x86>
				UART_transStr("Response error, package terminated", 1);
				return 1;
			}
		}
		_delay_ms(1);
		response = SPI_transmit(0x00, 1);
 1aa:	00 00       	nop
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	62 d0       	rcall	.+196    	; 0x278 <SPI_transmit>
		if(response == 0x03){
 1b4:	83 30       	cpi	r24, 0x03	; 3
			UART_transStr("Unknown error", 1);
 1b6:	31 f4       	brne	.+12     	; 0x1c4 <transmitPacket+0xa0>
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	8d e4       	ldi	r24, 0x4D	; 77
 1be:	92 e0       	ldi	r25, 0x02	; 2
 1c0:	9e d0       	rcall	.+316    	; 0x2fe <UART_transStr>
		}
		else if(response == 0x02){
 1c2:	11 c0       	rjmp	.+34     	; 0x1e6 <transmitPacket+0xc2>
 1c4:	82 30       	cpi	r24, 0x02	; 2
			UART_transStr("CRC error", 1);
 1c6:	31 f4       	brne	.+12     	; 0x1d4 <transmitPacket+0xb0>
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	86 e1       	ldi	r24, 0x16	; 22
 1ce:	92 e0       	ldi	r25, 0x02	; 2
 1d0:	96 d0       	rcall	.+300    	; 0x2fe <UART_transStr>
 1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <transmitPacket+0xc2>
		}
		else if(response == 0x01){
 1d4:	81 30       	cpi	r24, 0x01	; 1
			return 1;
		}
		else if(response == 0x00){}else{
 1d6:	99 f0       	breq	.+38     	; 0x1fe <transmitPacket+0xda>
 1d8:	88 23       	and	r24, r24
			UART_transStr("Response error, package terminated", 1);
 1da:	29 f0       	breq	.+10     	; 0x1e6 <transmitPacket+0xc2>
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	70 e0       	ldi	r23, 0x00	; 0
 1e0:	8a e2       	ldi	r24, 0x2A	; 42
 1e2:	92 e0       	ldi	r25, 0x02	; 2
 1e4:	8c d0       	rcall	.+280    	; 0x2fe <UART_transStr>
#define F_CPU 16000000UL
#include <util/delay.h>

int transmitPacket(char* packet){
	char response;
	for(int z = 0; z < 3; z++){
 1e6:	9f ef       	ldi	r25, 0xFF	; 255
 1e8:	e9 1a       	sub	r14, r25
 1ea:	f9 0a       	sbc	r15, r25
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	e8 16       	cp	r14, r24
 1f0:	f1 04       	cpc	r15, r1
		}
		else if(response == 0x00){}else{
			UART_transStr("Response error, package terminated", 1);
		}
	}
	UART_transStr("Transmission error, package terminated", 1);
 1f2:	8c f2       	brlt	.-94     	; 0x196 <transmitPacket+0x72>
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	8b e5       	ldi	r24, 0x5B	; 91
 1fa:	92 e0       	ldi	r25, 0x02	; 2
 1fc:	80 d0       	rcall	.+256    	; 0x2fe <UART_transStr>
	return 1;
}
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	ef 90       	pop	r14
 20e:	08 95       	ret

00000210 <main>:

int main(void)
{
	SPI_init(MASTER);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	19 d0       	rcall	.+50     	; 0x246 <SPI_init>
	UART_init();
 214:	56 d0       	rcall	.+172    	; 0x2c2 <UART_init>
 216:	61 e0       	ldi	r22, 0x01	; 1
	char* packet = (char*)calloc(3, sizeof(char));
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fb d0       	rcall	.+502    	; 0x416 <calloc>
 220:	ec 01       	movw	r28, r24
 222:	ae 01       	movw	r20, r28
    while(1){
		packet_makePacket(AMPLITUDE, 0xFF, packet);
 224:	6f ef       	ldi	r22, 0xFF	; 255
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	03 d0       	rcall	.+6      	; 0x230 <packet_makePacket>
		transmitPacket(packet);
 22a:	ce 01       	movw	r24, r28
 22c:	7b df       	rcall	.-266    	; 0x124 <transmitPacket>
 22e:	f9 cf       	rjmp	.-14     	; 0x222 <main+0x12>

00000230 <packet_makePacket>:
#include "packet.h"

void packet_makePacket(char ADDR, char DATA, char* packet){
 230:	fa 01       	movw	r30, r20
	char CRC;
	int temp = (int)DATA % 255;
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	6f 3f       	cpi	r22, 0xFF	; 255
 236:	08 f4       	brcc	.+2      	; 0x23a <packet_makePacket+0xa>
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	96 0f       	add	r25, r22
	CRC = 255 - temp;
 23c:	90 95       	com	r25
	packet[0] = ADDR;
 23e:	80 83       	st	Z, r24
	packet[1] = DATA;
 240:	61 83       	std	Z+1, r22	; 0x01
	packet[2] = CRC;
 242:	92 83       	std	Z+2, r25	; 0x02
 244:	08 95       	ret

00000246 <SPI_init>:
#include <avr/interrupt.h>
#include "./SPILib.h"

/* Replace with your library code */
int SPI_init(char role){
	sei();
 246:	78 94       	sei
	if(role == MASTER){
 248:	81 11       	cpse	r24, r1
 24a:	08 c0       	rjmp	.+16     	; 0x25c <SPI_init+0x16>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	84 b9       	out	0x04, r24	; 4
		PORTB = 0b00000000;
 250:	15 b8       	out	0x05, r1	; 5
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Initiates control register
 252:	81 e5       	ldi	r24, 0x51	; 81
 254:	8c bd       	out	0x2c, r24	; 44
		SPCR = 0b01001000; //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	08 95       	ret
	if(role == MASTER){
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = 0b00000000;
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Initiates control register
	}
	else if(role == SLAVE){
 25c:	8f 3f       	cpi	r24, 0xFF	; 255
 25e:	49 f4       	brne	.+18     	; 0x272 <SPI_init+0x2c>
		DDRB = (1<<PB3); //Sets MISO as output
 260:	88 e0       	ldi	r24, 0x08	; 8
 262:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	85 b9       	out	0x05, r24	; 5
		SPCR = 0b01001000; //Initiates control register
 268:	88 e4       	ldi	r24, 0x48	; 72
 26a:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = 0b01001000; //Initiates control register
	}
	else{
		return 0;
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 276:	08 95       	ret

00000278 <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	if((DDRB & 0b00000111) == 0b00000111){
 278:	94 b1       	in	r25, 0x04	; 4
 27a:	97 70       	andi	r25, 0x07	; 7
 27c:	97 30       	cpi	r25, 0x07	; 7
 27e:	99 f4       	brne	.+38     	; 0x2a6 <SPI_transmit+0x2e>
		PORTB &= 0b11111110;
 280:	95 b1       	in	r25, 0x05	; 5
 282:	9e 7f       	andi	r25, 0xFE	; 254
 284:	95 b9       	out	0x05, r25	; 5
		SPDR = transmitionCode;
 286:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & 0b10000000) != 0b10000000){} //Waits for transmition to finish
 288:	0d b4       	in	r0, 0x2d	; 45
 28a:	07 fe       	sbrs	r0, 7
 28c:	fd cf       	rjmp	.-6      	; 0x288 <SPI_transmit+0x10>
		PORTB |= 0b00000001;
 28e:	85 b1       	in	r24, 0x05	; 5
 290:	81 60       	ori	r24, 0x01	; 1
 292:	85 b9       	out	0x05, r24	; 5
		if(toggleRecieve == 1){
 294:	61 30       	cpi	r22, 0x01	; 1
 296:	71 05       	cpc	r23, r1
 298:	11 f4       	brne	.+4      	; 0x29e <SPI_transmit+0x26>
			return SPDR;
 29a:	8e b5       	in	r24, 0x2e	; 46
 29c:	08 95       	ret
		}
		else if(toggleRecieve == 0){
 29e:	67 2b       	or	r22, r23
 2a0:	21 f4       	brne	.+8      	; 0x2aa <SPI_transmit+0x32>
			return 1;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	08 95       	ret
		}
	}
	return 0;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	08 95       	ret
 2aa:	80 e0       	ldi	r24, 0x00	; 0
}
 2ac:	08 95       	ret

000002ae <__vector_24>:

ISR(SPI_STC_vect){
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
	
}
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <UART_init>:
int carriageReturn = 0;
int receiveComplete = 0;


void UART_init(){
	sei();
 2c2:	78 94       	sei
	int ubrr = 51;
	UBRR0H = (unsigned char)(ubrr>>8);
 2c4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (unsigned char)ubrr;
 2c8:	83 e3       	ldi	r24, 0x33	; 51
 2ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	UCSR0B |= (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 2ce:	e1 ec       	ldi	r30, 0xC1	; 193
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	88 6d       	ori	r24, 0xD8	; 216
 2d6:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);
 2d8:	e2 ec       	ldi	r30, 0xC2	; 194
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	86 60       	ori	r24, 0x06	; 6
 2e0:	80 83       	st	Z, r24
 2e2:	08 95       	ret

000002e4 <UART_transChar>:
}


void UART_transChar(char transData){
	while(!transmitComplete){}
 2e4:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <transmitComplete>
 2e8:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <transmitComplete+0x1>
 2ec:	23 2b       	or	r18, r19
 2ee:	d1 f3       	breq	.-12     	; 0x2e4 <UART_transChar>
	transmitComplete = 0;
 2f0:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <transmitComplete+0x1>
 2f4:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <transmitComplete>
	UDR0 = transData;
 2f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 2fc:	08 95       	ret

000002fe <UART_transStr>:
}

void UART_transStr(char* transDataStr, int endLine){
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	8c 01       	movw	r16, r24
 30c:	7b 01       	movw	r14, r22
	for(int i = 0; transDataStr[i] != '\0'; i++){
 30e:	c0 e0       	ldi	r28, 0x00	; 0
 310:	d0 e0       	ldi	r29, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <UART_transStr+0x1a>
		UART_transChar(transDataStr[i]);
 314:	e7 df       	rcall	.-50     	; 0x2e4 <UART_transChar>
	transmitComplete = 0;
	UDR0 = transData;
}

void UART_transStr(char* transDataStr, int endLine){
	for(int i = 0; transDataStr[i] != '\0'; i++){
 316:	21 96       	adiw	r28, 0x01	; 1
 318:	f8 01       	movw	r30, r16
 31a:	ec 0f       	add	r30, r28
 31c:	fd 1f       	adc	r31, r29
 31e:	80 81       	ld	r24, Z
 320:	81 11       	cpse	r24, r1
 322:	f8 cf       	rjmp	.-16     	; 0x314 <UART_transStr+0x16>
		UART_transChar(transDataStr[i]);
	}
	if(endLine){
 324:	ef 28       	or	r14, r15
 326:	21 f0       	breq	.+8      	; 0x330 <UART_transStr+0x32>
		UART_transChar('\r');
 328:	8d e0       	ldi	r24, 0x0D	; 13
 32a:	dc df       	rcall	.-72     	; 0x2e4 <UART_transChar>
		UART_transChar('\n');
 32c:	8a e0       	ldi	r24, 0x0A	; 10
 32e:	da df       	rcall	.-76     	; 0x2e4 <UART_transChar>
 330:	df 91       	pop	r29
	}
}
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	ff 90       	pop	r15
 33a:	ef 90       	pop	r14
 33c:	08 95       	ret

0000033e <UART_receiveChar>:
 33e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>

void UART_receiveChar(){
	RX = UDR0;
 342:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <RX>
	buffer[bufferIndex] = RX;
 346:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <bufferIndex>
 34a:	f0 91 87 02 	lds	r31, 0x0287	; 0x800287 <bufferIndex+0x1>
 34e:	e8 57       	subi	r30, 0x78	; 120
 350:	fd 4f       	sbci	r31, 0xFD	; 253
 352:	80 83       	st	Z, r24
	bufferIndex += 1;
 354:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <bufferIndex>
 358:	30 91 87 02 	lds	r19, 0x0287	; 0x800287 <bufferIndex+0x1>
 35c:	2f 5f       	subi	r18, 0xFF	; 255
 35e:	3f 4f       	sbci	r19, 0xFF	; 255
 360:	30 93 87 02 	sts	0x0287, r19	; 0x800287 <bufferIndex+0x1>
 364:	20 93 86 02 	sts	0x0286, r18	; 0x800286 <bufferIndex>
	if(RX == '\r'){
 368:	8d 30       	cpi	r24, 0x0D	; 13
 36a:	39 f4       	brne	.+14     	; 0x37a <UART_receiveChar+0x3c>
		carriageReturn = 1;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <carriageReturn+0x1>
 374:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <carriageReturn>
 378:	08 95       	ret
	}
	else if(carriageReturn && RX == '\n'){
 37a:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <carriageReturn>
 37e:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <carriageReturn+0x1>
 382:	23 2b       	or	r18, r19
 384:	61 f0       	breq	.+24     	; 0x39e <UART_receiveChar+0x60>
 386:	8a 30       	cpi	r24, 0x0A	; 10
 388:	51 f4       	brne	.+20     	; 0x39e <UART_receiveChar+0x60>
		receiveComplete = 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <__data_end+0x1>
 392:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
		bufferIndex = 0;
 396:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <bufferIndex+0x1>
 39a:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <bufferIndex>
 39e:	08 95       	ret

000003a0 <__vector_25>:
	}
}


ISR(USART0_RX_vect){
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	0b b6       	in	r0, 0x3b	; 59
 3ac:	0f 92       	push	r0
 3ae:	2f 93       	push	r18
 3b0:	3f 93       	push	r19
 3b2:	4f 93       	push	r20
 3b4:	5f 93       	push	r21
 3b6:	6f 93       	push	r22
 3b8:	7f 93       	push	r23
 3ba:	8f 93       	push	r24
 3bc:	9f 93       	push	r25
 3be:	af 93       	push	r26
 3c0:	bf 93       	push	r27
 3c2:	ef 93       	push	r30
 3c4:	ff 93       	push	r31
	UART_receiveChar();
 3c6:	bb df       	rcall	.-138    	; 0x33e <UART_receiveChar>
};
 3c8:	ff 91       	pop	r31
 3ca:	ef 91       	pop	r30
 3cc:	bf 91       	pop	r27
 3ce:	af 91       	pop	r26
 3d0:	9f 91       	pop	r25
 3d2:	8f 91       	pop	r24
 3d4:	7f 91       	pop	r23
 3d6:	6f 91       	pop	r22
 3d8:	5f 91       	pop	r21
 3da:	4f 91       	pop	r20
 3dc:	3f 91       	pop	r19
 3de:	2f 91       	pop	r18
 3e0:	0f 90       	pop	r0
 3e2:	0b be       	out	0x3b, r0	; 59
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <__vector_27>:

ISR(USART0_TX_vect){
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
	transmitComplete = 1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <transmitComplete+0x1>
 404:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <transmitComplete>
 408:	9f 91       	pop	r25
 40a:	8f 91       	pop	r24
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <calloc>:
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	86 9f       	mul	r24, r22
 420:	80 01       	movw	r16, r0
 422:	87 9f       	mul	r24, r23
 424:	10 0d       	add	r17, r0
 426:	96 9f       	mul	r25, r22
 428:	10 0d       	add	r17, r0
 42a:	11 24       	eor	r1, r1
 42c:	c8 01       	movw	r24, r16
 42e:	0d d0       	rcall	.+26     	; 0x44a <malloc>
 430:	ec 01       	movw	r28, r24
 432:	00 97       	sbiw	r24, 0x00	; 0
 434:	21 f0       	breq	.+8      	; 0x43e <calloc+0x28>
 436:	a8 01       	movw	r20, r16
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	27 d1       	rcall	.+590    	; 0x68c <memset>
 43e:	ce 01       	movw	r24, r28
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	08 95       	ret

0000044a <malloc>:
 44a:	0f 93       	push	r16
 44c:	1f 93       	push	r17
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	91 05       	cpc	r25, r1
 456:	10 f4       	brcc	.+4      	; 0x45c <malloc+0x12>
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <__flp>
 460:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <__flp+0x1>
 464:	20 e0       	ldi	r18, 0x00	; 0
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	a0 e0       	ldi	r26, 0x00	; 0
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	30 97       	sbiw	r30, 0x00	; 0
 46e:	19 f1       	breq	.+70     	; 0x4b6 <malloc+0x6c>
 470:	40 81       	ld	r20, Z
 472:	51 81       	ldd	r21, Z+1	; 0x01
 474:	02 81       	ldd	r16, Z+2	; 0x02
 476:	13 81       	ldd	r17, Z+3	; 0x03
 478:	48 17       	cp	r20, r24
 47a:	59 07       	cpc	r21, r25
 47c:	c8 f0       	brcs	.+50     	; 0x4b0 <malloc+0x66>
 47e:	84 17       	cp	r24, r20
 480:	95 07       	cpc	r25, r21
 482:	69 f4       	brne	.+26     	; 0x49e <malloc+0x54>
 484:	10 97       	sbiw	r26, 0x00	; 0
 486:	31 f0       	breq	.+12     	; 0x494 <malloc+0x4a>
 488:	12 96       	adiw	r26, 0x02	; 2
 48a:	0c 93       	st	X, r16
 48c:	12 97       	sbiw	r26, 0x02	; 2
 48e:	13 96       	adiw	r26, 0x03	; 3
 490:	1c 93       	st	X, r17
 492:	27 c0       	rjmp	.+78     	; 0x4e2 <malloc+0x98>
 494:	00 93 ee 02 	sts	0x02EE, r16	; 0x8002ee <__flp>
 498:	10 93 ef 02 	sts	0x02EF, r17	; 0x8002ef <__flp+0x1>
 49c:	22 c0       	rjmp	.+68     	; 0x4e2 <malloc+0x98>
 49e:	21 15       	cp	r18, r1
 4a0:	31 05       	cpc	r19, r1
 4a2:	19 f0       	breq	.+6      	; 0x4aa <malloc+0x60>
 4a4:	42 17       	cp	r20, r18
 4a6:	53 07       	cpc	r21, r19
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <malloc+0x66>
 4aa:	9a 01       	movw	r18, r20
 4ac:	bd 01       	movw	r22, r26
 4ae:	ef 01       	movw	r28, r30
 4b0:	df 01       	movw	r26, r30
 4b2:	f8 01       	movw	r30, r16
 4b4:	db cf       	rjmp	.-74     	; 0x46c <malloc+0x22>
 4b6:	21 15       	cp	r18, r1
 4b8:	31 05       	cpc	r19, r1
 4ba:	f9 f0       	breq	.+62     	; 0x4fa <malloc+0xb0>
 4bc:	28 1b       	sub	r18, r24
 4be:	39 0b       	sbc	r19, r25
 4c0:	24 30       	cpi	r18, 0x04	; 4
 4c2:	31 05       	cpc	r19, r1
 4c4:	80 f4       	brcc	.+32     	; 0x4e6 <malloc+0x9c>
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	9b 81       	ldd	r25, Y+3	; 0x03
 4ca:	61 15       	cp	r22, r1
 4cc:	71 05       	cpc	r23, r1
 4ce:	21 f0       	breq	.+8      	; 0x4d8 <malloc+0x8e>
 4d0:	fb 01       	movw	r30, r22
 4d2:	93 83       	std	Z+3, r25	; 0x03
 4d4:	82 83       	std	Z+2, r24	; 0x02
 4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <malloc+0x96>
 4d8:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <__flp+0x1>
 4dc:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <__flp>
 4e0:	fe 01       	movw	r30, r28
 4e2:	32 96       	adiw	r30, 0x02	; 2
 4e4:	44 c0       	rjmp	.+136    	; 0x56e <malloc+0x124>
 4e6:	fe 01       	movw	r30, r28
 4e8:	e2 0f       	add	r30, r18
 4ea:	f3 1f       	adc	r31, r19
 4ec:	81 93       	st	Z+, r24
 4ee:	91 93       	st	Z+, r25
 4f0:	22 50       	subi	r18, 0x02	; 2
 4f2:	31 09       	sbc	r19, r1
 4f4:	39 83       	std	Y+1, r19	; 0x01
 4f6:	28 83       	st	Y, r18
 4f8:	3a c0       	rjmp	.+116    	; 0x56e <malloc+0x124>
 4fa:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <__brkval>
 4fe:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <__brkval+0x1>
 502:	23 2b       	or	r18, r19
 504:	41 f4       	brne	.+16     	; 0x516 <malloc+0xcc>
 506:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 50a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 50e:	30 93 ed 02 	sts	0x02ED, r19	; 0x8002ed <__brkval+0x1>
 512:	20 93 ec 02 	sts	0x02EC, r18	; 0x8002ec <__brkval>
 516:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 51a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 51e:	21 15       	cp	r18, r1
 520:	31 05       	cpc	r19, r1
 522:	41 f4       	brne	.+16     	; 0x534 <malloc+0xea>
 524:	2d b7       	in	r18, 0x3d	; 61
 526:	3e b7       	in	r19, 0x3e	; 62
 528:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 52c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 530:	24 1b       	sub	r18, r20
 532:	35 0b       	sbc	r19, r21
 534:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <__brkval>
 538:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <__brkval+0x1>
 53c:	e2 17       	cp	r30, r18
 53e:	f3 07       	cpc	r31, r19
 540:	a0 f4       	brcc	.+40     	; 0x56a <malloc+0x120>
 542:	2e 1b       	sub	r18, r30
 544:	3f 0b       	sbc	r19, r31
 546:	28 17       	cp	r18, r24
 548:	39 07       	cpc	r19, r25
 54a:	78 f0       	brcs	.+30     	; 0x56a <malloc+0x120>
 54c:	ac 01       	movw	r20, r24
 54e:	4e 5f       	subi	r20, 0xFE	; 254
 550:	5f 4f       	sbci	r21, 0xFF	; 255
 552:	24 17       	cp	r18, r20
 554:	35 07       	cpc	r19, r21
 556:	48 f0       	brcs	.+18     	; 0x56a <malloc+0x120>
 558:	4e 0f       	add	r20, r30
 55a:	5f 1f       	adc	r21, r31
 55c:	50 93 ed 02 	sts	0x02ED, r21	; 0x8002ed <__brkval+0x1>
 560:	40 93 ec 02 	sts	0x02EC, r20	; 0x8002ec <__brkval>
 564:	81 93       	st	Z+, r24
 566:	91 93       	st	Z+, r25
 568:	02 c0       	rjmp	.+4      	; 0x56e <malloc+0x124>
 56a:	e0 e0       	ldi	r30, 0x00	; 0
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	cf 01       	movw	r24, r30
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <free>:
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	09 f4       	brne	.+2      	; 0x584 <free+0xa>
 582:	81 c0       	rjmp	.+258    	; 0x686 <free+0x10c>
 584:	fc 01       	movw	r30, r24
 586:	32 97       	sbiw	r30, 0x02	; 2
 588:	13 82       	std	Z+3, r1	; 0x03
 58a:	12 82       	std	Z+2, r1	; 0x02
 58c:	a0 91 ee 02 	lds	r26, 0x02EE	; 0x8002ee <__flp>
 590:	b0 91 ef 02 	lds	r27, 0x02EF	; 0x8002ef <__flp+0x1>
 594:	10 97       	sbiw	r26, 0x00	; 0
 596:	81 f4       	brne	.+32     	; 0x5b8 <free+0x3e>
 598:	20 81       	ld	r18, Z
 59a:	31 81       	ldd	r19, Z+1	; 0x01
 59c:	82 0f       	add	r24, r18
 59e:	93 1f       	adc	r25, r19
 5a0:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <__brkval>
 5a4:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <__brkval+0x1>
 5a8:	28 17       	cp	r18, r24
 5aa:	39 07       	cpc	r19, r25
 5ac:	51 f5       	brne	.+84     	; 0x602 <free+0x88>
 5ae:	f0 93 ed 02 	sts	0x02ED, r31	; 0x8002ed <__brkval+0x1>
 5b2:	e0 93 ec 02 	sts	0x02EC, r30	; 0x8002ec <__brkval>
 5b6:	67 c0       	rjmp	.+206    	; 0x686 <free+0x10c>
 5b8:	ed 01       	movw	r28, r26
 5ba:	20 e0       	ldi	r18, 0x00	; 0
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	ce 17       	cp	r28, r30
 5c0:	df 07       	cpc	r29, r31
 5c2:	40 f4       	brcc	.+16     	; 0x5d4 <free+0x5a>
 5c4:	4a 81       	ldd	r20, Y+2	; 0x02
 5c6:	5b 81       	ldd	r21, Y+3	; 0x03
 5c8:	9e 01       	movw	r18, r28
 5ca:	41 15       	cp	r20, r1
 5cc:	51 05       	cpc	r21, r1
 5ce:	f1 f0       	breq	.+60     	; 0x60c <free+0x92>
 5d0:	ea 01       	movw	r28, r20
 5d2:	f5 cf       	rjmp	.-22     	; 0x5be <free+0x44>
 5d4:	d3 83       	std	Z+3, r29	; 0x03
 5d6:	c2 83       	std	Z+2, r28	; 0x02
 5d8:	40 81       	ld	r20, Z
 5da:	51 81       	ldd	r21, Z+1	; 0x01
 5dc:	84 0f       	add	r24, r20
 5de:	95 1f       	adc	r25, r21
 5e0:	c8 17       	cp	r28, r24
 5e2:	d9 07       	cpc	r29, r25
 5e4:	59 f4       	brne	.+22     	; 0x5fc <free+0x82>
 5e6:	88 81       	ld	r24, Y
 5e8:	99 81       	ldd	r25, Y+1	; 0x01
 5ea:	84 0f       	add	r24, r20
 5ec:	95 1f       	adc	r25, r21
 5ee:	02 96       	adiw	r24, 0x02	; 2
 5f0:	91 83       	std	Z+1, r25	; 0x01
 5f2:	80 83       	st	Z, r24
 5f4:	8a 81       	ldd	r24, Y+2	; 0x02
 5f6:	9b 81       	ldd	r25, Y+3	; 0x03
 5f8:	93 83       	std	Z+3, r25	; 0x03
 5fa:	82 83       	std	Z+2, r24	; 0x02
 5fc:	21 15       	cp	r18, r1
 5fe:	31 05       	cpc	r19, r1
 600:	29 f4       	brne	.+10     	; 0x60c <free+0x92>
 602:	f0 93 ef 02 	sts	0x02EF, r31	; 0x8002ef <__flp+0x1>
 606:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <__flp>
 60a:	3d c0       	rjmp	.+122    	; 0x686 <free+0x10c>
 60c:	e9 01       	movw	r28, r18
 60e:	fb 83       	std	Y+3, r31	; 0x03
 610:	ea 83       	std	Y+2, r30	; 0x02
 612:	49 91       	ld	r20, Y+
 614:	59 91       	ld	r21, Y+
 616:	c4 0f       	add	r28, r20
 618:	d5 1f       	adc	r29, r21
 61a:	ec 17       	cp	r30, r28
 61c:	fd 07       	cpc	r31, r29
 61e:	61 f4       	brne	.+24     	; 0x638 <free+0xbe>
 620:	80 81       	ld	r24, Z
 622:	91 81       	ldd	r25, Z+1	; 0x01
 624:	84 0f       	add	r24, r20
 626:	95 1f       	adc	r25, r21
 628:	02 96       	adiw	r24, 0x02	; 2
 62a:	e9 01       	movw	r28, r18
 62c:	99 83       	std	Y+1, r25	; 0x01
 62e:	88 83       	st	Y, r24
 630:	82 81       	ldd	r24, Z+2	; 0x02
 632:	93 81       	ldd	r25, Z+3	; 0x03
 634:	9b 83       	std	Y+3, r25	; 0x03
 636:	8a 83       	std	Y+2, r24	; 0x02
 638:	e0 e0       	ldi	r30, 0x00	; 0
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	12 96       	adiw	r26, 0x02	; 2
 63e:	8d 91       	ld	r24, X+
 640:	9c 91       	ld	r25, X
 642:	13 97       	sbiw	r26, 0x03	; 3
 644:	00 97       	sbiw	r24, 0x00	; 0
 646:	19 f0       	breq	.+6      	; 0x64e <free+0xd4>
 648:	fd 01       	movw	r30, r26
 64a:	dc 01       	movw	r26, r24
 64c:	f7 cf       	rjmp	.-18     	; 0x63c <free+0xc2>
 64e:	8d 91       	ld	r24, X+
 650:	9c 91       	ld	r25, X
 652:	11 97       	sbiw	r26, 0x01	; 1
 654:	9d 01       	movw	r18, r26
 656:	2e 5f       	subi	r18, 0xFE	; 254
 658:	3f 4f       	sbci	r19, 0xFF	; 255
 65a:	82 0f       	add	r24, r18
 65c:	93 1f       	adc	r25, r19
 65e:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <__brkval>
 662:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <__brkval+0x1>
 666:	28 17       	cp	r18, r24
 668:	39 07       	cpc	r19, r25
 66a:	69 f4       	brne	.+26     	; 0x686 <free+0x10c>
 66c:	30 97       	sbiw	r30, 0x00	; 0
 66e:	29 f4       	brne	.+10     	; 0x67a <free+0x100>
 670:	10 92 ef 02 	sts	0x02EF, r1	; 0x8002ef <__flp+0x1>
 674:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <__flp>
 678:	02 c0       	rjmp	.+4      	; 0x67e <free+0x104>
 67a:	13 82       	std	Z+3, r1	; 0x03
 67c:	12 82       	std	Z+2, r1	; 0x02
 67e:	b0 93 ed 02 	sts	0x02ED, r27	; 0x8002ed <__brkval+0x1>
 682:	a0 93 ec 02 	sts	0x02EC, r26	; 0x8002ec <__brkval>
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	08 95       	ret

0000068c <memset>:
 68c:	dc 01       	movw	r26, r24
 68e:	01 c0       	rjmp	.+2      	; 0x692 <memset+0x6>
 690:	6d 93       	st	X+, r22
 692:	41 50       	subi	r20, 0x01	; 1
 694:	50 40       	sbci	r21, 0x00	; 0
 696:	e0 f7       	brcc	.-8      	; 0x690 <memset+0x4>
 698:	08 95       	ret

0000069a <_exit>:
 69a:	f8 94       	cli

0000069c <__stop_program>:
 69c:	ff cf       	rjmp	.-2      	; 0x69c <__stop_program>

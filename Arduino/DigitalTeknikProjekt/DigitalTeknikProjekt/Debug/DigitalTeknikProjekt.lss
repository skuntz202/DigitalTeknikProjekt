
DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  0000068c  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000068c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007e2  0080020a  0080020a  0000072a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001675  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010bf  00000000  00000000  00001f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009d9  00000000  00000000  00002fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000039b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000802  00000000  00000000  00003bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000529  00000000  00000000  000043fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004927  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	93 c0       	rjmp	.+294    	; 0x170 <__vector_18>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	89 c1       	rjmp	.+786    	; 0x374 <__vector_24>
  62:	00 00       	nop
  64:	b8 c1       	rjmp	.+880    	; 0x3d6 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	91 c0       	rjmp	.+290    	; 0x198 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e8       	ldi	r30, 0x8C	; 140
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	29 e0       	ldi	r18, 0x09	; 9
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 3e       	cpi	r26, 0xEC	; 236
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	c4 d0       	rcall	.+392    	; 0x2a8 <main>
 120:	b3 c2       	rjmp	.+1382   	; 0x688 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer1>:
float voltage = 0.f;
volatile int ADCSampleFlag = 0;
unsigned int recordLength = 10;

int initTimer1(){
	TCCR1B = (1<<WGM12)|(1<<CS10)|(1<<CS11);	    //Sets mode to CTC, Sets prescaler to 64
 124:	8b e0       	ldi	r24, 0x0B	; 11
 126:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	OCR1A =	0x18;				//Sets compare value to 24
 12a:	88 e1       	ldi	r24, 0x18	; 24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 132:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B =	0x18;				//Sets compare value to 24
 136:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 13a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	TIMSK1 = (1<<OCIE1B);
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
	TIFR1 = (1<<OCF1B);
 144:	86 bb       	out	0x16, r24	; 22
	return 1;
}
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret

0000014c <ADC_init>:

void ADC_init(){
	sei();
 14c:	78 94       	sei
	initTimer1();
 14e:	ea df       	rcall	.-44     	; 0x124 <initTimer1>
	ADMUX |= (1<<ADLAR);
 150:	ec e7       	ldi	r30, 0x7C	; 124
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 62       	ori	r24, 0x20	; 32
 158:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADEN)|(1<<ADATE)|(1<<ADIE);
 15a:	ea e7       	ldi	r30, 0x7A	; 122
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	8c 6a       	ori	r24, 0xAC	; 172
 162:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS2)|(1<<ADTS0);
 164:	eb e7       	ldi	r30, 0x7B	; 123
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	85 60       	ori	r24, 0x05	; 5
 16c:	80 83       	st	Z, r24
 16e:	08 95       	ret

00000170 <__vector_18>:
}

ISR(TIMER1_COMPB_vect){
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
	packetReceiveFlag = 1;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <packetReceiveFlag+0x1>
 186:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <packetReceiveFlag>
	if(timer == 100){
		dims();
	} else{
		timer += 1;
	}*/
}
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <__vector_29>:

ISR(ADC_vect){
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	0b b6       	in	r0, 0x3b	; 59
 1a4:	0f 92       	push	r0
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	ef 93       	push	r30
 1b0:	ff 93       	push	r31
	adcSample = ADCH;
 1b2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1b6:	28 2f       	mov	r18, r24
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	30 93 0f 02 	sts	0x020F, r19	; 0x80020f <adcSample+0x1>
 1be:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <adcSample>
	ADCWriteBuffer[ADCBufferIndex] = adcSample;
 1c2:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <ADCBufferIndex>
 1c6:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <ADCBufferIndex+0x1>
 1ca:	ec 5e       	subi	r30, 0xEC	; 236
 1cc:	fd 4f       	sbci	r31, 0xFD	; 253
 1ce:	80 83       	st	Z, r24
	if(ADCBufferIndex == recordLength){
 1d0:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <ADCBufferIndex>
 1d4:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <ADCBufferIndex+0x1>
 1d8:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <recordLength>
 1dc:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <recordLength+0x1>
 1e0:	28 17       	cp	r18, r24
 1e2:	39 07       	cpc	r19, r25
 1e4:	79 f4       	brne	.+30     	; 0x204 <__vector_29+0x6c>
		ADCBufferIndex = 0;
 1e6:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <ADCBufferIndex+0x1>
 1ea:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <ADCBufferIndex>
		ADCSampleFlag = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x1>
 1f6:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
		
		//VERY EXPERIMENTAL
		char* temp = ADCWriteBuffer;
		*ADCWriteBuffer = *ADCReadBuffer;
 1fa:	80 91 fc 05 	lds	r24, 0x05FC	; 0x8005fc <ADCReadBuffer>
 1fe:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <ADCWriteBuffer>
 202:	09 c0       	rjmp	.+18     	; 0x216 <__vector_29+0x7e>
		*ADCReadBuffer = *temp;
	} else{
		ADCBufferIndex += 1;
 204:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <ADCBufferIndex>
 208:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <ADCBufferIndex+0x1>
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <ADCBufferIndex+0x1>
 212:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <ADCBufferIndex>
 	}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 90       	pop	r0
 224:	0b be       	out	0x3b, r0	; 59
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <transmitUARTPacket>:
		return -1;
	}
	return 1;
}

int transmitUARTPacket(UARTPacket* packet){
 230:	ff 92       	push	r15
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	8c 01       	movw	r16, r24
	char recordLengthL = (recordLength+7) & 0x00FF;
 23c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <recordLength>
 240:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <recordLength+0x1>
 244:	0f 2e       	mov	r0, r31
 246:	f7 e0       	ldi	r31, 0x07	; 7
 248:	ff 2e       	mov	r15, r31
 24a:	f0 2d       	mov	r31, r0
 24c:	f8 0e       	add	r15, r24
	char recordLengthH = (recordLength+7)>>8;
 24e:	ec 01       	movw	r28, r24
 250:	27 96       	adiw	r28, 0x07	; 7
	UART_transChar(0x55);
 252:	85 e5       	ldi	r24, 0x55	; 85
 254:	bd d0       	rcall	.+378    	; 0x3d0 <UART_transChar>
	UART_transChar(0xAA);
 256:	8a ea       	ldi	r24, 0xAA	; 170
 258:	bb d0       	rcall	.+374    	; 0x3d0 <UART_transChar>
	UART_transChar(recordLengthH);
 25a:	8d 2f       	mov	r24, r29
 25c:	b9 d0       	rcall	.+370    	; 0x3d0 <UART_transChar>
	UART_transChar(recordLengthL);
 25e:	8f 2d       	mov	r24, r15
 260:	b7 d0       	rcall	.+366    	; 0x3d0 <UART_transChar>
	UART_transChar(packet->type);
 262:	d8 01       	movw	r26, r16
 264:	8c 91       	ld	r24, X
 266:	b4 d0       	rcall	.+360    	; 0x3d0 <UART_transChar>
 268:	c0 e0       	ldi	r28, 0x00	; 0
	for(int i = 0; i < recordLength; i++){
 26a:	d0 e0       	ldi	r29, 0x00	; 0
 26c:	0a c0       	rjmp	.+20     	; 0x282 <transmitUARTPacket+0x52>
 26e:	d8 01       	movw	r26, r16
		UART_transChar(packet->data[i]);
 270:	11 96       	adiw	r26, 0x01	; 1
 272:	ed 91       	ld	r30, X+
 274:	fc 91       	ld	r31, X
 276:	12 97       	sbiw	r26, 0x02	; 2
 278:	ec 0f       	add	r30, r28
 27a:	fd 1f       	adc	r31, r29
 27c:	80 81       	ld	r24, Z
 27e:	a8 d0       	rcall	.+336    	; 0x3d0 <UART_transChar>
 280:	21 96       	adiw	r28, 0x01	; 1
	UART_transChar(0x55);
	UART_transChar(0xAA);
	UART_transChar(recordLengthH);
	UART_transChar(recordLengthL);
	UART_transChar(packet->type);
	for(int i = 0; i < recordLength; i++){
 282:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <recordLength>
 286:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <recordLength+0x1>
 28a:	c8 17       	cp	r28, r24
 28c:	d9 07       	cpc	r29, r25
		UART_transChar(packet->data[i]);
	}
	UART_transChar(0x00);
 28e:	78 f3       	brcs	.-34     	; 0x26e <transmitUARTPacket+0x3e>
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	9e d0       	rcall	.+316    	; 0x3d0 <UART_transChar>
	UART_transChar(0x00);
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	9c d0       	rcall	.+312    	; 0x3d0 <UART_transChar>
 298:	81 e0       	ldi	r24, 0x01	; 1
	//UART_transChar('\n');
	//UART_transChar('\r');
	//for(int timer = 0; timer < 200; timer++){}
	return 1;
}
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	1f 91       	pop	r17
 2a2:	0f 91       	pop	r16
 2a4:	ff 90       	pop	r15
 2a6:	08 95       	ret

000002a8 <main>:
 2a8:	cf 93       	push	r28

int main(void){
 2aa:	df 93       	push	r29
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <main+0x6>
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
	UARTPacket OscPacket;
	OscPacket.type = GENERATOR;
 2b2:	11 e0       	ldi	r17, 0x01	; 1
 2b4:	19 83       	std	Y+1, r17	; 0x01
	SPIPacket genPacket;
	genPacket.ADDR = 0x00;
	genPacket.DATA = 0x00;
	genPacket.CRC = 0xFF;
	SPI_init(MASTER);
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	42 d0       	rcall	.+132    	; 0x33e <SPI_init>
	UART_init();
 2ba:	70 d0       	rcall	.+224    	; 0x39c <UART_init>
	ADC_init();
 2bc:	47 df       	rcall	.-370    	; 0x14c <ADC_init>
 2be:	e0 91 e6 09 	lds	r30, 0x09E6	; 0x8009e6 <buffer>
	
//Type 0x01 button 0x00
	buffer[0] = 0x55;
 2c2:	f0 91 e7 09 	lds	r31, 0x09E7	; 0x8009e7 <buffer+0x1>
 2c6:	85 e5       	ldi	r24, 0x55	; 85
 2c8:	80 83       	st	Z, r24
 2ca:	e0 91 e6 09 	lds	r30, 0x09E6	; 0x8009e6 <buffer>
	buffer[1] = 0xAA;
 2ce:	f0 91 e7 09 	lds	r31, 0x09E7	; 0x8009e7 <buffer+0x1>
 2d2:	8a ea       	ldi	r24, 0xAA	; 170
 2d4:	81 83       	std	Z+1, r24	; 0x01
 2d6:	e0 91 e6 09 	lds	r30, 0x09E6	; 0x8009e6 <buffer>
	buffer[2] = 0x00;
 2da:	f0 91 e7 09 	lds	r31, 0x09E7	; 0x8009e7 <buffer+0x1>
 2de:	12 82       	std	Z+2, r1	; 0x02
 2e0:	89 e0       	ldi	r24, 0x09	; 9
	buffer[3] = 0x09;
 2e2:	83 83       	std	Z+3, r24	; 0x03
 2e4:	14 83       	std	Z+4, r17	; 0x04
	buffer[4] = 0x01;
 2e6:	15 82       	std	Z+5, r1	; 0x05
	buffer[5] = 0x00;
 2e8:	8f e3       	ldi	r24, 0x3F	; 63
	buffer[6] = 0x3F;
 2ea:	86 83       	std	Z+6, r24	; 0x06
 2ec:	17 82       	std	Z+7, r1	; 0x07
	buffer[7] = 0x00;
 2ee:	10 86       	std	Z+8, r1	; 0x08
	buffer[8] = 0x00;
 2f0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <packetReceiveFlag>
// 	buffer[6] = 0x00;
	
    while(1){
		//Make packet for SPI and transmission of packet
		//Test with ADC connected, remove dims and paste code into RX ISR, remove code in CTC ISR
		if(packetReceiveFlag){
 2f4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <packetReceiveFlag+0x1>
 2f8:	89 2b       	or	r24, r25
 2fa:	29 f0       	breq	.+10     	; 0x306 <main+0x5e>
 2fc:	1e bc       	out	0x2e, r1	; 46
			SPDR = 0x00;
 2fe:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <packetReceiveFlag+0x1>
 			if(OscPacket.type == GENERATOR){
 				if(transmitSPIPacket(&genPacket)){}
 			} 
 			else if(OscPacket.type == OSCILLOSCOPE){continue;} 
 			else if(OscPacket.type == BODEPLOT){continue;}*/
			packetReceiveFlag = 0;
 302:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <packetReceiveFlag>
 306:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
		}
		
		//Sending ADC data to LabView    TEST WITH ADC CONNECTED, Expand makeOscPacket based on type
		if(ADCSampleFlag){
 30a:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 30e:	89 2b       	or	r24, r25
 310:	79 f3       	breq	.-34     	; 0x2f0 <main+0x48>
 312:	ae 01       	movw	r20, r28
			packet_makeOSCPacket(OscPacket.type, ADCReadBuffer, &OscPacket);
 314:	4f 5f       	subi	r20, 0xFF	; 255
 316:	5f 4f       	sbci	r21, 0xFF	; 255
 318:	6c ef       	ldi	r22, 0xFC	; 252
 31a:	75 e0       	ldi	r23, 0x05	; 5
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	0a d0       	rcall	.+20     	; 0x334 <packet_makeOSCPacket>
			transmitUARTPacket(&OscPacket);
 320:	ce 01       	movw	r24, r28
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	85 df       	rcall	.-246    	; 0x230 <transmitUARTPacket>
 326:	10 92 fc 05 	sts	0x05FC, r1	; 0x8005fc <ADCReadBuffer>
			strcpy(ADCReadBuffer, "");
 32a:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <__data_end+0x1>
			ADCSampleFlag = 0;
 32e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <__data_end>
 332:	de cf       	rjmp	.-68     	; 0x2f0 <main+0x48>

00000334 <packet_makeOSCPacket>:
 334:	fa 01       	movw	r30, r20
	packet->CRC = 255 - packet->DATA;
	return 1;
}

void packet_makeOSCPacket(char type, char* DATA, UARTPacket* packet){
	strcpy(packet->data, DATA);
 336:	81 81       	ldd	r24, Z+1	; 0x01
 338:	92 81       	ldd	r25, Z+2	; 0x02
 33a:	9f c1       	rjmp	.+830    	; 0x67a <strcpy>
 33c:	08 95       	ret

0000033e <SPI_init>:
	else if(toggleRecieve == 0){
		return 1;
	}
	PORTB |= 0b00000001;
	return 0;
}
 33e:	78 94       	sei
 340:	81 11       	cpse	r24, r1
 342:	0a c0       	rjmp	.+20     	; 0x358 <SPI_init+0x1a>
 344:	87 e0       	ldi	r24, 0x07	; 7
 346:	84 b9       	out	0x04, r24	; 4
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	85 b9       	out	0x05, r24	; 5
 34c:	92 ed       	ldi	r25, 0xD2	; 210
 34e:	9c bd       	out	0x2c, r25	; 44
 350:	8d bd       	out	0x2d, r24	; 45
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	08 95       	ret
 358:	8f 3f       	cpi	r24, 0xFF	; 255
 35a:	49 f4       	brne	.+18     	; 0x36e <SPI_init+0x30>
 35c:	88 e0       	ldi	r24, 0x08	; 8
 35e:	84 b9       	out	0x04, r24	; 4
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	85 b9       	out	0x05, r24	; 5
 364:	80 e4       	ldi	r24, 0x40	; 64
 366:	8c bd       	out	0x2c, r24	; 44
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	08 95       	ret
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	08 95       	ret

00000374 <__vector_24>:

ISR(SPI_STC_vect){
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	8f 93       	push	r24
 380:	9f 93       	push	r25
	SPITransmitFlag = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <SPITransmitFlag+0x1>
 38a:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <SPITransmitFlag>
}
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <UART_init>:
	}
	if(bufferIndex == (packetLength - 1) && bufferIndex > 3){
		packetReceiveFlag = 1;
		bufferIndex = 0;
	} else{
		bufferIndex += 1;
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	84 e6       	ldi	r24, 0x64	; 100
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	28 d0       	rcall	.+80     	; 0x3f6 <calloc>
 3a6:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <buffer+0x1>
 3aa:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <buffer>
 3ae:	78 94       	sei
 3b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 3b4:	83 e3       	ldi	r24, 0x33	; 51
 3b6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 3ba:	e1 ec       	ldi	r30, 0xC1	; 193
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	88 69       	ori	r24, 0x98	; 152
 3c2:	80 83       	st	Z, r24
 3c4:	e2 ec       	ldi	r30, 0xC2	; 194
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	86 60       	ori	r24, 0x06	; 6
 3cc:	80 83       	st	Z, r24
 3ce:	08 95       	ret

000003d0 <UART_transChar>:
 3d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3d4:	08 95       	ret

000003d6 <__vector_25>:
	}
}

ISR(USART0_RX_vect){
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	8f 93       	push	r24
	RX = UDR0;
 3e2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3e6:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <RX>
	//buffer[bufferIndex] = RX;
	
 3ea:	8f 91       	pop	r24
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <calloc>:
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	86 9f       	mul	r24, r22
 400:	80 01       	movw	r16, r0
 402:	87 9f       	mul	r24, r23
 404:	10 0d       	add	r17, r0
 406:	96 9f       	mul	r25, r22
 408:	10 0d       	add	r17, r0
 40a:	11 24       	eor	r1, r1
 40c:	c8 01       	movw	r24, r16
 40e:	0d d0       	rcall	.+26     	; 0x42a <malloc>
 410:	ec 01       	movw	r28, r24
 412:	00 97       	sbiw	r24, 0x00	; 0
 414:	21 f0       	breq	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 416:	a8 01       	movw	r20, r16
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	70 e0       	ldi	r23, 0x00	; 0
 41c:	27 d1       	rcall	.+590    	; 0x66c <memset>
 41e:	ce 01       	movw	r24, r28
 420:	df 91       	pop	r29
 422:	cf 91       	pop	r28
 424:	1f 91       	pop	r17
 426:	0f 91       	pop	r16
 428:	08 95       	ret

0000042a <malloc>:
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	82 30       	cpi	r24, 0x02	; 2
 434:	91 05       	cpc	r25, r1
 436:	10 f4       	brcc	.+4      	; 0x43c <malloc+0x12>
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	e0 91 ea 09 	lds	r30, 0x09EA	; 0x8009ea <__flp>
 440:	f0 91 eb 09 	lds	r31, 0x09EB	; 0x8009eb <__flp+0x1>
 444:	20 e0       	ldi	r18, 0x00	; 0
 446:	30 e0       	ldi	r19, 0x00	; 0
 448:	a0 e0       	ldi	r26, 0x00	; 0
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	30 97       	sbiw	r30, 0x00	; 0
 44e:	19 f1       	breq	.+70     	; 0x496 <malloc+0x6c>
 450:	40 81       	ld	r20, Z
 452:	51 81       	ldd	r21, Z+1	; 0x01
 454:	02 81       	ldd	r16, Z+2	; 0x02
 456:	13 81       	ldd	r17, Z+3	; 0x03
 458:	48 17       	cp	r20, r24
 45a:	59 07       	cpc	r21, r25
 45c:	c8 f0       	brcs	.+50     	; 0x490 <malloc+0x66>
 45e:	84 17       	cp	r24, r20
 460:	95 07       	cpc	r25, r21
 462:	69 f4       	brne	.+26     	; 0x47e <malloc+0x54>
 464:	10 97       	sbiw	r26, 0x00	; 0
 466:	31 f0       	breq	.+12     	; 0x474 <malloc+0x4a>
 468:	12 96       	adiw	r26, 0x02	; 2
 46a:	0c 93       	st	X, r16
 46c:	12 97       	sbiw	r26, 0x02	; 2
 46e:	13 96       	adiw	r26, 0x03	; 3
 470:	1c 93       	st	X, r17
 472:	27 c0       	rjmp	.+78     	; 0x4c2 <malloc+0x98>
 474:	00 93 ea 09 	sts	0x09EA, r16	; 0x8009ea <__flp>
 478:	10 93 eb 09 	sts	0x09EB, r17	; 0x8009eb <__flp+0x1>
 47c:	22 c0       	rjmp	.+68     	; 0x4c2 <malloc+0x98>
 47e:	21 15       	cp	r18, r1
 480:	31 05       	cpc	r19, r1
 482:	19 f0       	breq	.+6      	; 0x48a <malloc+0x60>
 484:	42 17       	cp	r20, r18
 486:	53 07       	cpc	r21, r19
 488:	18 f4       	brcc	.+6      	; 0x490 <malloc+0x66>
 48a:	9a 01       	movw	r18, r20
 48c:	bd 01       	movw	r22, r26
 48e:	ef 01       	movw	r28, r30
 490:	df 01       	movw	r26, r30
 492:	f8 01       	movw	r30, r16
 494:	db cf       	rjmp	.-74     	; 0x44c <malloc+0x22>
 496:	21 15       	cp	r18, r1
 498:	31 05       	cpc	r19, r1
 49a:	f9 f0       	breq	.+62     	; 0x4da <malloc+0xb0>
 49c:	28 1b       	sub	r18, r24
 49e:	39 0b       	sbc	r19, r25
 4a0:	24 30       	cpi	r18, 0x04	; 4
 4a2:	31 05       	cpc	r19, r1
 4a4:	80 f4       	brcc	.+32     	; 0x4c6 <malloc+0x9c>
 4a6:	8a 81       	ldd	r24, Y+2	; 0x02
 4a8:	9b 81       	ldd	r25, Y+3	; 0x03
 4aa:	61 15       	cp	r22, r1
 4ac:	71 05       	cpc	r23, r1
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <malloc+0x8e>
 4b0:	fb 01       	movw	r30, r22
 4b2:	93 83       	std	Z+3, r25	; 0x03
 4b4:	82 83       	std	Z+2, r24	; 0x02
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <malloc+0x96>
 4b8:	90 93 eb 09 	sts	0x09EB, r25	; 0x8009eb <__flp+0x1>
 4bc:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <__flp>
 4c0:	fe 01       	movw	r30, r28
 4c2:	32 96       	adiw	r30, 0x02	; 2
 4c4:	44 c0       	rjmp	.+136    	; 0x54e <malloc+0x124>
 4c6:	fe 01       	movw	r30, r28
 4c8:	e2 0f       	add	r30, r18
 4ca:	f3 1f       	adc	r31, r19
 4cc:	81 93       	st	Z+, r24
 4ce:	91 93       	st	Z+, r25
 4d0:	22 50       	subi	r18, 0x02	; 2
 4d2:	31 09       	sbc	r19, r1
 4d4:	39 83       	std	Y+1, r19	; 0x01
 4d6:	28 83       	st	Y, r18
 4d8:	3a c0       	rjmp	.+116    	; 0x54e <malloc+0x124>
 4da:	20 91 e8 09 	lds	r18, 0x09E8	; 0x8009e8 <__brkval>
 4de:	30 91 e9 09 	lds	r19, 0x09E9	; 0x8009e9 <__brkval+0x1>
 4e2:	23 2b       	or	r18, r19
 4e4:	41 f4       	brne	.+16     	; 0x4f6 <malloc+0xcc>
 4e6:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 4ea:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 4ee:	30 93 e9 09 	sts	0x09E9, r19	; 0x8009e9 <__brkval+0x1>
 4f2:	20 93 e8 09 	sts	0x09E8, r18	; 0x8009e8 <__brkval>
 4f6:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 4fa:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 4fe:	21 15       	cp	r18, r1
 500:	31 05       	cpc	r19, r1
 502:	41 f4       	brne	.+16     	; 0x514 <malloc+0xea>
 504:	2d b7       	in	r18, 0x3d	; 61
 506:	3e b7       	in	r19, 0x3e	; 62
 508:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 50c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 510:	24 1b       	sub	r18, r20
 512:	35 0b       	sbc	r19, r21
 514:	e0 91 e8 09 	lds	r30, 0x09E8	; 0x8009e8 <__brkval>
 518:	f0 91 e9 09 	lds	r31, 0x09E9	; 0x8009e9 <__brkval+0x1>
 51c:	e2 17       	cp	r30, r18
 51e:	f3 07       	cpc	r31, r19
 520:	a0 f4       	brcc	.+40     	; 0x54a <malloc+0x120>
 522:	2e 1b       	sub	r18, r30
 524:	3f 0b       	sbc	r19, r31
 526:	28 17       	cp	r18, r24
 528:	39 07       	cpc	r19, r25
 52a:	78 f0       	brcs	.+30     	; 0x54a <malloc+0x120>
 52c:	ac 01       	movw	r20, r24
 52e:	4e 5f       	subi	r20, 0xFE	; 254
 530:	5f 4f       	sbci	r21, 0xFF	; 255
 532:	24 17       	cp	r18, r20
 534:	35 07       	cpc	r19, r21
 536:	48 f0       	brcs	.+18     	; 0x54a <malloc+0x120>
 538:	4e 0f       	add	r20, r30
 53a:	5f 1f       	adc	r21, r31
 53c:	50 93 e9 09 	sts	0x09E9, r21	; 0x8009e9 <__brkval+0x1>
 540:	40 93 e8 09 	sts	0x09E8, r20	; 0x8009e8 <__brkval>
 544:	81 93       	st	Z+, r24
 546:	91 93       	st	Z+, r25
 548:	02 c0       	rjmp	.+4      	; 0x54e <malloc+0x124>
 54a:	e0 e0       	ldi	r30, 0x00	; 0
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	cf 01       	movw	r24, r30
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	08 95       	ret

0000055a <free>:
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
 55e:	00 97       	sbiw	r24, 0x00	; 0
 560:	09 f4       	brne	.+2      	; 0x564 <free+0xa>
 562:	81 c0       	rjmp	.+258    	; 0x666 <free+0x10c>
 564:	fc 01       	movw	r30, r24
 566:	32 97       	sbiw	r30, 0x02	; 2
 568:	13 82       	std	Z+3, r1	; 0x03
 56a:	12 82       	std	Z+2, r1	; 0x02
 56c:	a0 91 ea 09 	lds	r26, 0x09EA	; 0x8009ea <__flp>
 570:	b0 91 eb 09 	lds	r27, 0x09EB	; 0x8009eb <__flp+0x1>
 574:	10 97       	sbiw	r26, 0x00	; 0
 576:	81 f4       	brne	.+32     	; 0x598 <free+0x3e>
 578:	20 81       	ld	r18, Z
 57a:	31 81       	ldd	r19, Z+1	; 0x01
 57c:	82 0f       	add	r24, r18
 57e:	93 1f       	adc	r25, r19
 580:	20 91 e8 09 	lds	r18, 0x09E8	; 0x8009e8 <__brkval>
 584:	30 91 e9 09 	lds	r19, 0x09E9	; 0x8009e9 <__brkval+0x1>
 588:	28 17       	cp	r18, r24
 58a:	39 07       	cpc	r19, r25
 58c:	51 f5       	brne	.+84     	; 0x5e2 <free+0x88>
 58e:	f0 93 e9 09 	sts	0x09E9, r31	; 0x8009e9 <__brkval+0x1>
 592:	e0 93 e8 09 	sts	0x09E8, r30	; 0x8009e8 <__brkval>
 596:	67 c0       	rjmp	.+206    	; 0x666 <free+0x10c>
 598:	ed 01       	movw	r28, r26
 59a:	20 e0       	ldi	r18, 0x00	; 0
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	ce 17       	cp	r28, r30
 5a0:	df 07       	cpc	r29, r31
 5a2:	40 f4       	brcc	.+16     	; 0x5b4 <free+0x5a>
 5a4:	4a 81       	ldd	r20, Y+2	; 0x02
 5a6:	5b 81       	ldd	r21, Y+3	; 0x03
 5a8:	9e 01       	movw	r18, r28
 5aa:	41 15       	cp	r20, r1
 5ac:	51 05       	cpc	r21, r1
 5ae:	f1 f0       	breq	.+60     	; 0x5ec <free+0x92>
 5b0:	ea 01       	movw	r28, r20
 5b2:	f5 cf       	rjmp	.-22     	; 0x59e <free+0x44>
 5b4:	d3 83       	std	Z+3, r29	; 0x03
 5b6:	c2 83       	std	Z+2, r28	; 0x02
 5b8:	40 81       	ld	r20, Z
 5ba:	51 81       	ldd	r21, Z+1	; 0x01
 5bc:	84 0f       	add	r24, r20
 5be:	95 1f       	adc	r25, r21
 5c0:	c8 17       	cp	r28, r24
 5c2:	d9 07       	cpc	r29, r25
 5c4:	59 f4       	brne	.+22     	; 0x5dc <free+0x82>
 5c6:	88 81       	ld	r24, Y
 5c8:	99 81       	ldd	r25, Y+1	; 0x01
 5ca:	84 0f       	add	r24, r20
 5cc:	95 1f       	adc	r25, r21
 5ce:	02 96       	adiw	r24, 0x02	; 2
 5d0:	91 83       	std	Z+1, r25	; 0x01
 5d2:	80 83       	st	Z, r24
 5d4:	8a 81       	ldd	r24, Y+2	; 0x02
 5d6:	9b 81       	ldd	r25, Y+3	; 0x03
 5d8:	93 83       	std	Z+3, r25	; 0x03
 5da:	82 83       	std	Z+2, r24	; 0x02
 5dc:	21 15       	cp	r18, r1
 5de:	31 05       	cpc	r19, r1
 5e0:	29 f4       	brne	.+10     	; 0x5ec <free+0x92>
 5e2:	f0 93 eb 09 	sts	0x09EB, r31	; 0x8009eb <__flp+0x1>
 5e6:	e0 93 ea 09 	sts	0x09EA, r30	; 0x8009ea <__flp>
 5ea:	3d c0       	rjmp	.+122    	; 0x666 <free+0x10c>
 5ec:	e9 01       	movw	r28, r18
 5ee:	fb 83       	std	Y+3, r31	; 0x03
 5f0:	ea 83       	std	Y+2, r30	; 0x02
 5f2:	49 91       	ld	r20, Y+
 5f4:	59 91       	ld	r21, Y+
 5f6:	c4 0f       	add	r28, r20
 5f8:	d5 1f       	adc	r29, r21
 5fa:	ec 17       	cp	r30, r28
 5fc:	fd 07       	cpc	r31, r29
 5fe:	61 f4       	brne	.+24     	; 0x618 <free+0xbe>
 600:	80 81       	ld	r24, Z
 602:	91 81       	ldd	r25, Z+1	; 0x01
 604:	84 0f       	add	r24, r20
 606:	95 1f       	adc	r25, r21
 608:	02 96       	adiw	r24, 0x02	; 2
 60a:	e9 01       	movw	r28, r18
 60c:	99 83       	std	Y+1, r25	; 0x01
 60e:	88 83       	st	Y, r24
 610:	82 81       	ldd	r24, Z+2	; 0x02
 612:	93 81       	ldd	r25, Z+3	; 0x03
 614:	9b 83       	std	Y+3, r25	; 0x03
 616:	8a 83       	std	Y+2, r24	; 0x02
 618:	e0 e0       	ldi	r30, 0x00	; 0
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	12 96       	adiw	r26, 0x02	; 2
 61e:	8d 91       	ld	r24, X+
 620:	9c 91       	ld	r25, X
 622:	13 97       	sbiw	r26, 0x03	; 3
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	19 f0       	breq	.+6      	; 0x62e <free+0xd4>
 628:	fd 01       	movw	r30, r26
 62a:	dc 01       	movw	r26, r24
 62c:	f7 cf       	rjmp	.-18     	; 0x61c <free+0xc2>
 62e:	8d 91       	ld	r24, X+
 630:	9c 91       	ld	r25, X
 632:	11 97       	sbiw	r26, 0x01	; 1
 634:	9d 01       	movw	r18, r26
 636:	2e 5f       	subi	r18, 0xFE	; 254
 638:	3f 4f       	sbci	r19, 0xFF	; 255
 63a:	82 0f       	add	r24, r18
 63c:	93 1f       	adc	r25, r19
 63e:	20 91 e8 09 	lds	r18, 0x09E8	; 0x8009e8 <__brkval>
 642:	30 91 e9 09 	lds	r19, 0x09E9	; 0x8009e9 <__brkval+0x1>
 646:	28 17       	cp	r18, r24
 648:	39 07       	cpc	r19, r25
 64a:	69 f4       	brne	.+26     	; 0x666 <free+0x10c>
 64c:	30 97       	sbiw	r30, 0x00	; 0
 64e:	29 f4       	brne	.+10     	; 0x65a <free+0x100>
 650:	10 92 eb 09 	sts	0x09EB, r1	; 0x8009eb <__flp+0x1>
 654:	10 92 ea 09 	sts	0x09EA, r1	; 0x8009ea <__flp>
 658:	02 c0       	rjmp	.+4      	; 0x65e <free+0x104>
 65a:	13 82       	std	Z+3, r1	; 0x03
 65c:	12 82       	std	Z+2, r1	; 0x02
 65e:	b0 93 e9 09 	sts	0x09E9, r27	; 0x8009e9 <__brkval+0x1>
 662:	a0 93 e8 09 	sts	0x09E8, r26	; 0x8009e8 <__brkval>
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	08 95       	ret

0000066c <memset>:
 66c:	dc 01       	movw	r26, r24
 66e:	01 c0       	rjmp	.+2      	; 0x672 <memset+0x6>
 670:	6d 93       	st	X+, r22
 672:	41 50       	subi	r20, 0x01	; 1
 674:	50 40       	sbci	r21, 0x00	; 0
 676:	e0 f7       	brcc	.-8      	; 0x670 <memset+0x4>
 678:	08 95       	ret

0000067a <strcpy>:
 67a:	fb 01       	movw	r30, r22
 67c:	dc 01       	movw	r26, r24
 67e:	01 90       	ld	r0, Z+
 680:	0d 92       	st	X+, r0
 682:	00 20       	and	r0, r0
 684:	e1 f7       	brne	.-8      	; 0x67e <strcpy+0x4>
 686:	08 95       	ret

00000688 <_exit>:
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>


DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000820  000008b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007ea  0080020c  0080020c  000008c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001815  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001129  00000000  00000000  0000226d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a2c  00000000  00000000  00003396  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000270  00000000  00000000  00003dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000881  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b3  00000000  00000000  000048b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004e68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	9b c0       	rjmp	.+310    	; 0x180 <__vector_18>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	c8 c1       	rjmp	.+912    	; 0x3f2 <__vector_24>
  62:	00 00       	nop
  64:	45 c2       	rjmp	.+1162   	; 0x4f0 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	55 c2       	rjmp	.+1194   	; 0x518 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	99 c0       	rjmp	.+306    	; 0x1a8 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e2       	ldi	r30, 0x20	; 32
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	29 e0       	ldi	r18, 0x09	; 9
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 3f       	cpi	r26, 0xF6	; 246
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e7 d0       	rcall	.+462    	; 0x2ee <main>
 120:	7d c3       	rjmp	.+1786   	; 0x81c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer1>:
volatile int ADCSampleFlag = 0;
unsigned int recordLength = 10;
unsigned int tempRecordLength;

int initTimer1(){
	TCCR1B = (1<<WGM12)|(1<<CS10)|(1<<CS11);	    //Sets mode to CTC, Sets prescaler to 64
 124:	8b e0       	ldi	r24, 0x0B	; 11
 126:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	OCR1A =	0x8F;				//Sets compare value to 24
 12a:	8f e8       	ldi	r24, 0x8F	; 143
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 132:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B =	0x8F;				//Sets compare value to 24
 136:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 13a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	TIMSK1 = (1<<OCIE1B);
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
	TIFR1 = (1<<OCF1B);
 144:	86 bb       	out	0x16, r24	; 22
	return 1;
}
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret

0000014c <ADC_init>:

void ADC_init(){
	sei();
 14c:	78 94       	sei
	tempRecordLength = recordLength;
 14e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <recordLength>
 152:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <recordLength+0x1>
 156:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <tempRecordLength+0x1>
 15a:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <tempRecordLength>
	initTimer1();
 15e:	e2 df       	rcall	.-60     	; 0x124 <initTimer1>
	ADMUX |= (1<<ADLAR);
 160:	ec e7       	ldi	r30, 0x7C	; 124
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 62       	ori	r24, 0x20	; 32
 168:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADEN)|(1<<ADATE)|(1<<ADIE);
 16a:	ea e7       	ldi	r30, 0x7A	; 122
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	8c 6a       	ori	r24, 0xAC	; 172
 172:	80 83       	st	Z, r24
	ADCSRB |= (1<<ADTS2)|(1<<ADTS0);
 174:	eb e7       	ldi	r30, 0x7B	; 123
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	85 60       	ori	r24, 0x05	; 5
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <__vector_18>:
}

ISR(TIMER1_COMPB_vect){
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
	packetReceiveFlag = 1;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <packetReceiveFlag+0x1>
 196:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <packetReceiveFlag>
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <__vector_29>:

ISR(ADC_vect){
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	0b b6       	in	r0, 0x3b	; 59
 1b4:	0f 92       	push	r0
 1b6:	2f 93       	push	r18
 1b8:	3f 93       	push	r19
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
	adcSample = ADCH;
 1c2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <adcSample+0x1>
 1ce:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <adcSample>
	ADCWriteBuffer[ADCBufferIndex] = adcSample;
 1d2:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <ADCBufferIndex>
 1d6:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <ADCBufferIndex+0x1>
 1da:	e4 5e       	subi	r30, 0xE4	; 228
 1dc:	fd 4f       	sbci	r31, 0xFD	; 253
 1de:	80 83       	st	Z, r24
	if(ADCBufferIndex == 10){
 1e0:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <ADCBufferIndex>
 1e4:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <ADCBufferIndex+0x1>
 1e8:	0a 97       	sbiw	r24, 0x0a	; 10
 1ea:	b9 f4       	brne	.+46     	; 0x21a <__vector_29+0x72>
		ADCBufferIndex = 0;
 1ec:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <ADCBufferIndex+0x1>
 1f0:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <ADCBufferIndex>
		ADCSampleFlag = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <__data_end+0x1>
 1fc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
		
		//VERY EXPERIMENTAL
		char* temp = ADCWriteBuffer;
		*ADCWriteBuffer = *ADCReadBuffer;
 200:	80 91 04 06 	lds	r24, 0x0604	; 0x800604 <ADCReadBuffer>
 204:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <ADCWriteBuffer>
		*ADCReadBuffer = *temp;
		tempRecordLength = recordLength;
 208:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <recordLength>
 20c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <recordLength+0x1>
 210:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <tempRecordLength+0x1>
 214:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <tempRecordLength>
 218:	09 c0       	rjmp	.+18     	; 0x22c <__vector_29+0x84>
	} else{
		ADCBufferIndex += 1;
 21a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <ADCBufferIndex>
 21e:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <ADCBufferIndex+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <ADCBufferIndex+0x1>
 228:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <ADCBufferIndex>
 	}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0b be       	out	0x3b, r0	; 59
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <transmitUARTPacket>:
		return -1;
	}*/
	return 0;
}

int transmitUARTPacket(UARTPacket* packet){
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	8c 01       	movw	r16, r24
	char recordLengthL = (tempRecordLength+7) & 0x00FF;
 252:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <tempRecordLength>
 256:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <tempRecordLength+0x1>
 25a:	0f 2e       	mov	r0, r31
 25c:	f7 e0       	ldi	r31, 0x07	; 7
 25e:	ff 2e       	mov	r15, r31
 260:	f0 2d       	mov	r31, r0
 262:	f8 0e       	add	r15, r24
	char recordLengthH = (tempRecordLength+7)>>8;
 264:	ec 01       	movw	r28, r24
 266:	27 96       	adiw	r28, 0x07	; 7
	SPI_transmit(0x55, 0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	85 e5       	ldi	r24, 0x55	; 85
 26e:	a5 d0       	rcall	.+330    	; 0x3ba <SPI_transmit>
	SPI_transmit(0xAA, 0);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	8a ea       	ldi	r24, 0xAA	; 170
 276:	a1 d0       	rcall	.+322    	; 0x3ba <SPI_transmit>
	SPI_transmit(recordLengthH, 0);
 278:	60 e0       	ldi	r22, 0x00	; 0
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	8d 2f       	mov	r24, r29
 27e:	9d d0       	rcall	.+314    	; 0x3ba <SPI_transmit>
	SPI_transmit(recordLengthL, 0);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	8f 2d       	mov	r24, r15
 286:	99 d0       	rcall	.+306    	; 0x3ba <SPI_transmit>
	SPI_transmit(packet->type, 0);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	d8 01       	movw	r26, r16
 28e:	11 96       	adiw	r26, 0x01	; 1
 290:	8c 91       	ld	r24, X
 292:	93 d0       	rcall	.+294    	; 0x3ba <SPI_transmit>
	for(int i = 0; i < recordLength; i++){
 294:	c0 e0       	ldi	r28, 0x00	; 0
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <transmitUARTPacket+0x6c>
		SPI_transmit(packet->data[i], 0);
 29a:	d8 01       	movw	r26, r16
 29c:	12 96       	adiw	r26, 0x02	; 2
 29e:	ed 91       	ld	r30, X+
 2a0:	fc 91       	ld	r31, X
 2a2:	13 97       	sbiw	r26, 0x03	; 3
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	85 d0       	rcall	.+266    	; 0x3ba <SPI_transmit>
	SPI_transmit(0x55, 0);
	SPI_transmit(0xAA, 0);
	SPI_transmit(recordLengthH, 0);
	SPI_transmit(recordLengthL, 0);
	SPI_transmit(packet->type, 0);
	for(int i = 0; i < recordLength; i++){
 2b0:	21 96       	adiw	r28, 0x01	; 1
 2b2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <recordLength>
 2b6:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <recordLength+0x1>
 2ba:	c8 17       	cp	r28, r24
 2bc:	d9 07       	cpc	r29, r25
		SPI_transmit(packet->data[i], 0);
	}
	SPI_transmit(0x00, 0);
 2be:	68 f3       	brcs	.-38     	; 0x29a <transmitUARTPacket+0x54>
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	80 e0       	ldi	r24, 0x00	; 0
	SPI_transmit(0x00, 0);
 2c6:	79 d0       	rcall	.+242    	; 0x3ba <SPI_transmit>
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	75 d0       	rcall	.+234    	; 0x3ba <SPI_transmit>
	//UART_transChar('\n');
	//UART_transChar('\r');
	for(int timer = 0; timer < 200; timer++){}
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <transmitUARTPacket+0x92>
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	88 3c       	cpi	r24, 0xC8	; 200
 2da:	91 05       	cpc	r25, r1
 2dc:	e4 f3       	brlt	.-8      	; 0x2d6 <transmitUARTPacket+0x90>
	return 1;
}
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	ff 90       	pop	r15
 2ec:	08 95       	ret

000002ee <main>:

int main(void){
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	00 d0       	rcall	.+0      	; 0x2f4 <main+0x6>
 2f4:	1f 92       	push	r1
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
	UARTPacket OscPacket;
	SPIPacket genPacket;
	genPacket.ADDR = 0x01;
	genPacket.DATA = 0x02;
	genPacket.CRC = 0xFE;
	SPI_init(MASTER);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	43 d0       	rcall	.+134    	; 0x384 <SPI_init>
	UART_init();
 2fe:	8d d0       	rcall	.+282    	; 0x41a <UART_init>
	ADC_init();
 300:	25 df       	rcall	.-438    	; 0x14c <ADC_init>
 302:	89 81       	ldd	r24, Y+1	; 0x01
	char* data = "SS";
	OscPacket.recordLength = 2;
 304:	83 7f       	andi	r24, 0xF3	; 243
 306:	88 60       	ori	r24, 0x08	; 8
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	61 e0       	ldi	r22, 0x01	; 1
	char* temptemp = (char*)calloc(100, sizeof(char));
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	84 e6       	ldi	r24, 0x64	; 100
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	16 d1       	rcall	.+556    	; 0x540 <calloc>
 314:	fc 01       	movw	r30, r24
 316:	85 e5       	ldi	r24, 0x55	; 85
	temptemp[4] = 0x01;
	temptemp[5] = 0x00;
	temptemp[6] = 0x3F;
	temptemp[7] = 0x00;
	temptemp[8] = 0x00;*/
	temptemp[0] = 0x55;
 318:	80 83       	st	Z, r24
 31a:	8a ea       	ldi	r24, 0xAA	; 170
	temptemp[1] = 0xAA;
 31c:	81 83       	std	Z+1, r24	; 0x01
 31e:	12 82       	std	Z+2, r1	; 0x02
	temptemp[2] = 0x00;
 320:	89 e0       	ldi	r24, 0x09	; 9
	temptemp[3] = 0x09;
 322:	83 83       	std	Z+3, r24	; 0x03
 324:	82 e0       	ldi	r24, 0x02	; 2
	temptemp[4] = 0x02;
 326:	84 83       	std	Z+4, r24	; 0x04
 328:	8f ef       	ldi	r24, 0xFF	; 255
	temptemp[5] = 0xFF;
 32a:	85 83       	std	Z+5, r24	; 0x05
 32c:	86 83       	std	Z+6, r24	; 0x06
	temptemp[6] = 0xFF;
 32e:	17 82       	std	Z+7, r1	; 0x07
	temptemp[7] = 0x00;
 330:	81 e0       	ldi	r24, 0x01	; 1
	temptemp[8] = 0x01;
 332:	80 87       	std	Z+8, r24	; 0x08
 334:	11 86       	std	Z+9, r1	; 0x09
	temptemp[9] = 0x00;
 336:	12 86       	std	Z+10, r1	; 0x0a
	temptemp[10] = 0x00;
 338:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <receiveCompleteFlag>
    while(1){
		if(receiveCompleteFlag){
 33c:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <receiveCompleteFlag+0x1>
 340:	89 2b       	or	r24, r25
 342:	29 f0       	breq	.+10     	; 0x34e <main+0x60>
			UART_receiveChar();
 344:	84 d0       	rcall	.+264    	; 0x44e <UART_receiveChar>
 346:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <receiveCompleteFlag+0x1>
			receiveCompleteFlag = 0;
 34a:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <receiveCompleteFlag>
 34e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
			transmitSPIPacket(&genPacket);
			packetReceiveFlag = 0;*/
		//}
		//packet_makeOSCPacket(OSCILLOSCOPE, data, &OscPacket);
		// transmitUARTPacket(&OscPacket);
		if(ADCSampleFlag){
 352:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x1>
 356:	89 2b       	or	r24, r25
 358:	79 f3       	breq	.-34     	; 0x338 <main+0x4a>
 35a:	ae 01       	movw	r20, r28
			packet_makeOSCPacket(0x02, ADCReadBuffer, &OscPacket);
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	64 e0       	ldi	r22, 0x04	; 4
 362:	76 e0       	ldi	r23, 0x06	; 6
 364:	82 e0       	ldi	r24, 0x02	; 2
 366:	08 d0       	rcall	.+16     	; 0x378 <packet_makeOSCPacket>
			transmitUARTPacket(&OscPacket);
 368:	ce 01       	movw	r24, r28
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	6c df       	rcall	.-296    	; 0x246 <transmitUARTPacket>
 36e:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <__data_end+0x1>
			ADCSampleFlag = 0;
 372:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <__data_end>
 376:	e0 cf       	rjmp	.-64     	; 0x338 <main+0x4a>

00000378 <packet_makeOSCPacket>:
 378:	fa 01       	movw	r30, r20
	packet->CRC = 255 - packet->DATA;
	return 1;
}

void packet_makeOSCPacket(char type, char* DATA, UARTPacket* packet){
	packet->type = type;
 37a:	81 83       	std	Z+1, r24	; 0x01
	strcpy(packet->data, DATA);
 37c:	82 81       	ldd	r24, Z+2	; 0x02
 37e:	93 81       	ldd	r25, Z+3	; 0x03
 380:	3e c2       	rjmp	.+1148   	; 0x7fe <strcpy>
 382:	08 95       	ret

00000384 <SPI_init>:

static int SPITransmitFlag = 0;

/* Replace with your library code */
int SPI_init(char role){
	sei();
 384:	78 94       	sei
	if(role == MASTER){
 386:	81 11       	cpse	r24, r1
 388:	0a c0       	rjmp	.+20     	; 0x39e <SPI_init+0x1a>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 38a:	87 e0       	ldi	r24, 0x07	; 7
 38c:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
 392:	92 ed       	ldi	r25, 0xD2	; 210
 394:	9c bd       	out	0x2c, r25	; 44
		SPSR = (1<<SPI2X);
 396:	8d bd       	out	0x2d, r24	; 45
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	08 95       	ret
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = (1<<PB0);
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
		SPSR = (1<<SPI2X);
	}
	else if(role == SLAVE){
 39e:	8f 3f       	cpi	r24, 0xFF	; 255
 3a0:	49 f4       	brne	.+18     	; 0x3b4 <SPI_init+0x30>
		DDRB = (1<<PB3); //Sets MISO as output
 3a2:	88 e0       	ldi	r24, 0x08	; 8
 3a4:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE); //Initiates control register
 3aa:	80 e4       	ldi	r24, 0x40	; 64
 3ac:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 3b8:	08 95       	ret

000003ba <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	PORTB &= 0b11111110;
 3ba:	95 b1       	in	r25, 0x05	; 5
 3bc:	9e 7f       	andi	r25, 0xFE	; 254
 3be:	95 b9       	out	0x05, r25	; 5
	SPDR = transmitionCode;
 3c0:	8e bd       	out	0x2e, r24	; 46
	while(!SPITransmitFlag){} //Waits for transmition to finish
 3c2:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <SPITransmitFlag>
 3c6:	90 91 15 02 	lds	r25, 0x0215	; 0x800215 <SPITransmitFlag+0x1>
 3ca:	89 2b       	or	r24, r25
 3cc:	d1 f3       	breq	.-12     	; 0x3c2 <SPI_transmit+0x8>
	SPITransmitFlag = 0;
 3ce:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <SPITransmitFlag+0x1>
 3d2:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <SPITransmitFlag>
	if(toggleRecieve == 1){
 3d6:	61 30       	cpi	r22, 0x01	; 1
 3d8:	71 05       	cpc	r23, r1
 3da:	11 f4       	brne	.+4      	; 0x3e0 <SPI_transmit+0x26>
		return SPDR;
 3dc:	8e b5       	in	r24, 0x2e	; 46
 3de:	08 95       	ret
	}
	else if(toggleRecieve == 0){
 3e0:	67 2b       	or	r22, r23
 3e2:	29 f0       	breq	.+10     	; 0x3ee <SPI_transmit+0x34>
		return 1;
	}
	PORTB |= 0b00000001;
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	85 b9       	out	0x05, r24	; 5
	return 0;
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret
	SPITransmitFlag = 0;
	if(toggleRecieve == 1){
		return SPDR;
	}
	else if(toggleRecieve == 0){
		return 1;
 3ee:	81 e0       	ldi	r24, 0x01	; 1
	}
	PORTB |= 0b00000001;
	return 0;
}
 3f0:	08 95       	ret

000003f2 <__vector_24>:

ISR(SPI_STC_vect){
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
	SPITransmitFlag = 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <SPITransmitFlag+0x1>
 408:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <SPITransmitFlag>
}
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <UART_init>:
	if(RX == '\r'){
		carriageReturn = 1;
	}
	else if(carriageReturn && RX == '\n'){
		receiveComplete = 1;
		bufferIndex = 0;
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	84 e6       	ldi	r24, 0x64	; 100
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	8e d0       	rcall	.+284    	; 0x540 <calloc>
 424:	90 93 f1 09 	sts	0x09F1, r25	; 0x8009f1 <buffer+0x1>
 428:	80 93 f0 09 	sts	0x09F0, r24	; 0x8009f0 <buffer>
 42c:	78 94       	sei
 42e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 432:	83 e3       	ldi	r24, 0x33	; 51
 434:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 438:	e1 ec       	ldi	r30, 0xC1	; 193
 43a:	f0 e0       	ldi	r31, 0x00	; 0
 43c:	80 81       	ld	r24, Z
 43e:	88 69       	ori	r24, 0x98	; 152
 440:	80 83       	st	Z, r24
 442:	e2 ec       	ldi	r30, 0xC2	; 194
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	80 81       	ld	r24, Z
 448:	86 60       	ori	r24, 0x06	; 6
 44a:	80 83       	st	Z, r24
 44c:	08 95       	ret

0000044e <UART_receiveChar>:
	}
}

int UART_receiveChar(){
	RX = UDR0;
 44e:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 452:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <RX>
	buffer[bufferIndex] = RX;
 456:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <bufferIndex>
 45a:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <bufferIndex+0x1>
 45e:	e0 91 f0 09 	lds	r30, 0x09F0	; 0x8009f0 <buffer>
 462:	f0 91 f1 09 	lds	r31, 0x09F1	; 0x8009f1 <buffer+0x1>
 466:	e8 0f       	add	r30, r24
 468:	f9 1f       	adc	r31, r25
 46a:	20 83       	st	Z, r18
	if(bufferIndex == 3){
 46c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <bufferIndex>
 470:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <bufferIndex+0x1>
 474:	03 97       	sbiw	r24, 0x03	; 3
 476:	c1 f4       	brne	.+48     	; 0x4a8 <UART_receiveChar+0x5a>
		if(buffer[0] == 0x55 && buffer[1] == 0xAA){
 478:	e0 91 f0 09 	lds	r30, 0x09F0	; 0x8009f0 <buffer>
 47c:	f0 91 f1 09 	lds	r31, 0x09F1	; 0x8009f1 <buffer+0x1>
 480:	80 81       	ld	r24, Z
 482:	85 35       	cpi	r24, 0x55	; 85
 484:	89 f4       	brne	.+34     	; 0x4a8 <UART_receiveChar+0x5a>
 486:	81 81       	ldd	r24, Z+1	; 0x01
 488:	8a 3a       	cpi	r24, 0xAA	; 170
 48a:	71 f4       	brne	.+28     	; 0x4a8 <UART_receiveChar+0x5a>
			tempBuffer[0] = buffer[2];
 48c:	ae ee       	ldi	r26, 0xEE	; 238
 48e:	b9 e0       	ldi	r27, 0x09	; 9
 490:	82 81       	ldd	r24, Z+2	; 0x02
 492:	8c 93       	st	X, r24
			tempBuffer[1] = buffer[3];
 494:	83 81       	ldd	r24, Z+3	; 0x03
 496:	11 96       	adiw	r26, 0x01	; 1
 498:	8c 93       	st	X, r24
 49a:	11 97       	sbiw	r26, 0x01	; 1
			packetLength = atoi(tempBuffer);
 49c:	cd 01       	movw	r24, r26
 49e:	8b d1       	rcall	.+790    	; 0x7b6 <atoi>
 4a0:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <packetLength+0x1>
 4a4:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <packetLength>
		}
	}
	if(bufferIndex == packetLength && packetLength != 0){
 4a8:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <bufferIndex>
 4ac:	30 91 1b 02 	lds	r19, 0x021B	; 0x80021b <bufferIndex+0x1>
 4b0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <packetLength>
 4b4:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <packetLength+0x1>
 4b8:	28 17       	cp	r18, r24
 4ba:	39 07       	cpc	r19, r25
 4bc:	69 f4       	brne	.+26     	; 0x4d8 <UART_receiveChar+0x8a>
 4be:	89 2b       	or	r24, r25
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <UART_receiveChar+0x8a>
		packetReceiveFlag = 1;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <packetReceiveFlag+0x1>
 4ca:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <packetReceiveFlag>
		bufferIndex = 0;
 4ce:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <bufferIndex+0x1>
 4d2:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <bufferIndex>
		return 1;
 4d6:	09 c0       	rjmp	.+18     	; 0x4ea <UART_receiveChar+0x9c>
	}
	bufferIndex += 1;
 4d8:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <bufferIndex>
 4dc:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <bufferIndex+0x1>
 4e0:	01 96       	adiw	r24, 0x01	; 1
 4e2:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <bufferIndex+0x1>
 4e6:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <bufferIndex>
	//checkCarriageReturn();
	return 1;
}
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	08 95       	ret

000004f0 <__vector_25>:


ISR(USART0_RX_vect){
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	8f 93       	push	r24
 4fc:	9f 93       	push	r25
	receiveCompleteFlag = 1;
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <receiveCompleteFlag+0x1>
 506:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <receiveCompleteFlag>
};
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <__vector_27>:

ISR(USART0_TX_vect){
 518:	1f 92       	push	r1
 51a:	0f 92       	push	r0
 51c:	0f b6       	in	r0, 0x3f	; 63
 51e:	0f 92       	push	r0
 520:	11 24       	eor	r1, r1
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
	transmitComplete = 1;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <transmitComplete+0x1>
 52e:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <transmitComplete>
 532:	9f 91       	pop	r25
 534:	8f 91       	pop	r24
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <calloc>:
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	86 9f       	mul	r24, r22
 54a:	80 01       	movw	r16, r0
 54c:	87 9f       	mul	r24, r23
 54e:	10 0d       	add	r17, r0
 550:	96 9f       	mul	r25, r22
 552:	10 0d       	add	r17, r0
 554:	11 24       	eor	r1, r1
 556:	c8 01       	movw	r24, r16
 558:	0d d0       	rcall	.+26     	; 0x574 <malloc>
 55a:	ec 01       	movw	r28, r24
 55c:	00 97       	sbiw	r24, 0x00	; 0
 55e:	21 f0       	breq	.+8      	; 0x568 <calloc+0x28>
 560:	a8 01       	movw	r20, r16
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	44 d1       	rcall	.+648    	; 0x7f0 <memset>
 568:	ce 01       	movw	r24, r28
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	1f 91       	pop	r17
 570:	0f 91       	pop	r16
 572:	08 95       	ret

00000574 <malloc>:
 574:	0f 93       	push	r16
 576:	1f 93       	push	r17
 578:	cf 93       	push	r28
 57a:	df 93       	push	r29
 57c:	82 30       	cpi	r24, 0x02	; 2
 57e:	91 05       	cpc	r25, r1
 580:	10 f4       	brcc	.+4      	; 0x586 <malloc+0x12>
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	e0 91 f4 09 	lds	r30, 0x09F4	; 0x8009f4 <__flp>
 58a:	f0 91 f5 09 	lds	r31, 0x09F5	; 0x8009f5 <__flp+0x1>
 58e:	20 e0       	ldi	r18, 0x00	; 0
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	a0 e0       	ldi	r26, 0x00	; 0
 594:	b0 e0       	ldi	r27, 0x00	; 0
 596:	30 97       	sbiw	r30, 0x00	; 0
 598:	19 f1       	breq	.+70     	; 0x5e0 <malloc+0x6c>
 59a:	40 81       	ld	r20, Z
 59c:	51 81       	ldd	r21, Z+1	; 0x01
 59e:	02 81       	ldd	r16, Z+2	; 0x02
 5a0:	13 81       	ldd	r17, Z+3	; 0x03
 5a2:	48 17       	cp	r20, r24
 5a4:	59 07       	cpc	r21, r25
 5a6:	c8 f0       	brcs	.+50     	; 0x5da <malloc+0x66>
 5a8:	84 17       	cp	r24, r20
 5aa:	95 07       	cpc	r25, r21
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <malloc+0x54>
 5ae:	10 97       	sbiw	r26, 0x00	; 0
 5b0:	31 f0       	breq	.+12     	; 0x5be <malloc+0x4a>
 5b2:	12 96       	adiw	r26, 0x02	; 2
 5b4:	0c 93       	st	X, r16
 5b6:	12 97       	sbiw	r26, 0x02	; 2
 5b8:	13 96       	adiw	r26, 0x03	; 3
 5ba:	1c 93       	st	X, r17
 5bc:	27 c0       	rjmp	.+78     	; 0x60c <malloc+0x98>
 5be:	00 93 f4 09 	sts	0x09F4, r16	; 0x8009f4 <__flp>
 5c2:	10 93 f5 09 	sts	0x09F5, r17	; 0x8009f5 <__flp+0x1>
 5c6:	22 c0       	rjmp	.+68     	; 0x60c <malloc+0x98>
 5c8:	21 15       	cp	r18, r1
 5ca:	31 05       	cpc	r19, r1
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <malloc+0x60>
 5ce:	42 17       	cp	r20, r18
 5d0:	53 07       	cpc	r21, r19
 5d2:	18 f4       	brcc	.+6      	; 0x5da <malloc+0x66>
 5d4:	9a 01       	movw	r18, r20
 5d6:	bd 01       	movw	r22, r26
 5d8:	ef 01       	movw	r28, r30
 5da:	df 01       	movw	r26, r30
 5dc:	f8 01       	movw	r30, r16
 5de:	db cf       	rjmp	.-74     	; 0x596 <malloc+0x22>
 5e0:	21 15       	cp	r18, r1
 5e2:	31 05       	cpc	r19, r1
 5e4:	f9 f0       	breq	.+62     	; 0x624 <malloc+0xb0>
 5e6:	28 1b       	sub	r18, r24
 5e8:	39 0b       	sbc	r19, r25
 5ea:	24 30       	cpi	r18, 0x04	; 4
 5ec:	31 05       	cpc	r19, r1
 5ee:	80 f4       	brcc	.+32     	; 0x610 <malloc+0x9c>
 5f0:	8a 81       	ldd	r24, Y+2	; 0x02
 5f2:	9b 81       	ldd	r25, Y+3	; 0x03
 5f4:	61 15       	cp	r22, r1
 5f6:	71 05       	cpc	r23, r1
 5f8:	21 f0       	breq	.+8      	; 0x602 <malloc+0x8e>
 5fa:	fb 01       	movw	r30, r22
 5fc:	93 83       	std	Z+3, r25	; 0x03
 5fe:	82 83       	std	Z+2, r24	; 0x02
 600:	04 c0       	rjmp	.+8      	; 0x60a <malloc+0x96>
 602:	90 93 f5 09 	sts	0x09F5, r25	; 0x8009f5 <__flp+0x1>
 606:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <__flp>
 60a:	fe 01       	movw	r30, r28
 60c:	32 96       	adiw	r30, 0x02	; 2
 60e:	44 c0       	rjmp	.+136    	; 0x698 <malloc+0x124>
 610:	fe 01       	movw	r30, r28
 612:	e2 0f       	add	r30, r18
 614:	f3 1f       	adc	r31, r19
 616:	81 93       	st	Z+, r24
 618:	91 93       	st	Z+, r25
 61a:	22 50       	subi	r18, 0x02	; 2
 61c:	31 09       	sbc	r19, r1
 61e:	39 83       	std	Y+1, r19	; 0x01
 620:	28 83       	st	Y, r18
 622:	3a c0       	rjmp	.+116    	; 0x698 <malloc+0x124>
 624:	20 91 f2 09 	lds	r18, 0x09F2	; 0x8009f2 <__brkval>
 628:	30 91 f3 09 	lds	r19, 0x09F3	; 0x8009f3 <__brkval+0x1>
 62c:	23 2b       	or	r18, r19
 62e:	41 f4       	brne	.+16     	; 0x640 <malloc+0xcc>
 630:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 634:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 638:	30 93 f3 09 	sts	0x09F3, r19	; 0x8009f3 <__brkval+0x1>
 63c:	20 93 f2 09 	sts	0x09F2, r18	; 0x8009f2 <__brkval>
 640:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 644:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 648:	21 15       	cp	r18, r1
 64a:	31 05       	cpc	r19, r1
 64c:	41 f4       	brne	.+16     	; 0x65e <malloc+0xea>
 64e:	2d b7       	in	r18, 0x3d	; 61
 650:	3e b7       	in	r19, 0x3e	; 62
 652:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 656:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 65a:	24 1b       	sub	r18, r20
 65c:	35 0b       	sbc	r19, r21
 65e:	e0 91 f2 09 	lds	r30, 0x09F2	; 0x8009f2 <__brkval>
 662:	f0 91 f3 09 	lds	r31, 0x09F3	; 0x8009f3 <__brkval+0x1>
 666:	e2 17       	cp	r30, r18
 668:	f3 07       	cpc	r31, r19
 66a:	a0 f4       	brcc	.+40     	; 0x694 <malloc+0x120>
 66c:	2e 1b       	sub	r18, r30
 66e:	3f 0b       	sbc	r19, r31
 670:	28 17       	cp	r18, r24
 672:	39 07       	cpc	r19, r25
 674:	78 f0       	brcs	.+30     	; 0x694 <malloc+0x120>
 676:	ac 01       	movw	r20, r24
 678:	4e 5f       	subi	r20, 0xFE	; 254
 67a:	5f 4f       	sbci	r21, 0xFF	; 255
 67c:	24 17       	cp	r18, r20
 67e:	35 07       	cpc	r19, r21
 680:	48 f0       	brcs	.+18     	; 0x694 <malloc+0x120>
 682:	4e 0f       	add	r20, r30
 684:	5f 1f       	adc	r21, r31
 686:	50 93 f3 09 	sts	0x09F3, r21	; 0x8009f3 <__brkval+0x1>
 68a:	40 93 f2 09 	sts	0x09F2, r20	; 0x8009f2 <__brkval>
 68e:	81 93       	st	Z+, r24
 690:	91 93       	st	Z+, r25
 692:	02 c0       	rjmp	.+4      	; 0x698 <malloc+0x124>
 694:	e0 e0       	ldi	r30, 0x00	; 0
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	cf 01       	movw	r24, r30
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	1f 91       	pop	r17
 6a0:	0f 91       	pop	r16
 6a2:	08 95       	ret

000006a4 <free>:
 6a4:	cf 93       	push	r28
 6a6:	df 93       	push	r29
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	09 f4       	brne	.+2      	; 0x6ae <free+0xa>
 6ac:	81 c0       	rjmp	.+258    	; 0x7b0 <free+0x10c>
 6ae:	fc 01       	movw	r30, r24
 6b0:	32 97       	sbiw	r30, 0x02	; 2
 6b2:	13 82       	std	Z+3, r1	; 0x03
 6b4:	12 82       	std	Z+2, r1	; 0x02
 6b6:	a0 91 f4 09 	lds	r26, 0x09F4	; 0x8009f4 <__flp>
 6ba:	b0 91 f5 09 	lds	r27, 0x09F5	; 0x8009f5 <__flp+0x1>
 6be:	10 97       	sbiw	r26, 0x00	; 0
 6c0:	81 f4       	brne	.+32     	; 0x6e2 <free+0x3e>
 6c2:	20 81       	ld	r18, Z
 6c4:	31 81       	ldd	r19, Z+1	; 0x01
 6c6:	82 0f       	add	r24, r18
 6c8:	93 1f       	adc	r25, r19
 6ca:	20 91 f2 09 	lds	r18, 0x09F2	; 0x8009f2 <__brkval>
 6ce:	30 91 f3 09 	lds	r19, 0x09F3	; 0x8009f3 <__brkval+0x1>
 6d2:	28 17       	cp	r18, r24
 6d4:	39 07       	cpc	r19, r25
 6d6:	51 f5       	brne	.+84     	; 0x72c <free+0x88>
 6d8:	f0 93 f3 09 	sts	0x09F3, r31	; 0x8009f3 <__brkval+0x1>
 6dc:	e0 93 f2 09 	sts	0x09F2, r30	; 0x8009f2 <__brkval>
 6e0:	67 c0       	rjmp	.+206    	; 0x7b0 <free+0x10c>
 6e2:	ed 01       	movw	r28, r26
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	ce 17       	cp	r28, r30
 6ea:	df 07       	cpc	r29, r31
 6ec:	40 f4       	brcc	.+16     	; 0x6fe <free+0x5a>
 6ee:	4a 81       	ldd	r20, Y+2	; 0x02
 6f0:	5b 81       	ldd	r21, Y+3	; 0x03
 6f2:	9e 01       	movw	r18, r28
 6f4:	41 15       	cp	r20, r1
 6f6:	51 05       	cpc	r21, r1
 6f8:	f1 f0       	breq	.+60     	; 0x736 <free+0x92>
 6fa:	ea 01       	movw	r28, r20
 6fc:	f5 cf       	rjmp	.-22     	; 0x6e8 <free+0x44>
 6fe:	d3 83       	std	Z+3, r29	; 0x03
 700:	c2 83       	std	Z+2, r28	; 0x02
 702:	40 81       	ld	r20, Z
 704:	51 81       	ldd	r21, Z+1	; 0x01
 706:	84 0f       	add	r24, r20
 708:	95 1f       	adc	r25, r21
 70a:	c8 17       	cp	r28, r24
 70c:	d9 07       	cpc	r29, r25
 70e:	59 f4       	brne	.+22     	; 0x726 <free+0x82>
 710:	88 81       	ld	r24, Y
 712:	99 81       	ldd	r25, Y+1	; 0x01
 714:	84 0f       	add	r24, r20
 716:	95 1f       	adc	r25, r21
 718:	02 96       	adiw	r24, 0x02	; 2
 71a:	91 83       	std	Z+1, r25	; 0x01
 71c:	80 83       	st	Z, r24
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	9b 81       	ldd	r25, Y+3	; 0x03
 722:	93 83       	std	Z+3, r25	; 0x03
 724:	82 83       	std	Z+2, r24	; 0x02
 726:	21 15       	cp	r18, r1
 728:	31 05       	cpc	r19, r1
 72a:	29 f4       	brne	.+10     	; 0x736 <free+0x92>
 72c:	f0 93 f5 09 	sts	0x09F5, r31	; 0x8009f5 <__flp+0x1>
 730:	e0 93 f4 09 	sts	0x09F4, r30	; 0x8009f4 <__flp>
 734:	3d c0       	rjmp	.+122    	; 0x7b0 <free+0x10c>
 736:	e9 01       	movw	r28, r18
 738:	fb 83       	std	Y+3, r31	; 0x03
 73a:	ea 83       	std	Y+2, r30	; 0x02
 73c:	49 91       	ld	r20, Y+
 73e:	59 91       	ld	r21, Y+
 740:	c4 0f       	add	r28, r20
 742:	d5 1f       	adc	r29, r21
 744:	ec 17       	cp	r30, r28
 746:	fd 07       	cpc	r31, r29
 748:	61 f4       	brne	.+24     	; 0x762 <free+0xbe>
 74a:	80 81       	ld	r24, Z
 74c:	91 81       	ldd	r25, Z+1	; 0x01
 74e:	84 0f       	add	r24, r20
 750:	95 1f       	adc	r25, r21
 752:	02 96       	adiw	r24, 0x02	; 2
 754:	e9 01       	movw	r28, r18
 756:	99 83       	std	Y+1, r25	; 0x01
 758:	88 83       	st	Y, r24
 75a:	82 81       	ldd	r24, Z+2	; 0x02
 75c:	93 81       	ldd	r25, Z+3	; 0x03
 75e:	9b 83       	std	Y+3, r25	; 0x03
 760:	8a 83       	std	Y+2, r24	; 0x02
 762:	e0 e0       	ldi	r30, 0x00	; 0
 764:	f0 e0       	ldi	r31, 0x00	; 0
 766:	12 96       	adiw	r26, 0x02	; 2
 768:	8d 91       	ld	r24, X+
 76a:	9c 91       	ld	r25, X
 76c:	13 97       	sbiw	r26, 0x03	; 3
 76e:	00 97       	sbiw	r24, 0x00	; 0
 770:	19 f0       	breq	.+6      	; 0x778 <free+0xd4>
 772:	fd 01       	movw	r30, r26
 774:	dc 01       	movw	r26, r24
 776:	f7 cf       	rjmp	.-18     	; 0x766 <free+0xc2>
 778:	8d 91       	ld	r24, X+
 77a:	9c 91       	ld	r25, X
 77c:	11 97       	sbiw	r26, 0x01	; 1
 77e:	9d 01       	movw	r18, r26
 780:	2e 5f       	subi	r18, 0xFE	; 254
 782:	3f 4f       	sbci	r19, 0xFF	; 255
 784:	82 0f       	add	r24, r18
 786:	93 1f       	adc	r25, r19
 788:	20 91 f2 09 	lds	r18, 0x09F2	; 0x8009f2 <__brkval>
 78c:	30 91 f3 09 	lds	r19, 0x09F3	; 0x8009f3 <__brkval+0x1>
 790:	28 17       	cp	r18, r24
 792:	39 07       	cpc	r19, r25
 794:	69 f4       	brne	.+26     	; 0x7b0 <free+0x10c>
 796:	30 97       	sbiw	r30, 0x00	; 0
 798:	29 f4       	brne	.+10     	; 0x7a4 <free+0x100>
 79a:	10 92 f5 09 	sts	0x09F5, r1	; 0x8009f5 <__flp+0x1>
 79e:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <__flp>
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <free+0x104>
 7a4:	13 82       	std	Z+3, r1	; 0x03
 7a6:	12 82       	std	Z+2, r1	; 0x02
 7a8:	b0 93 f3 09 	sts	0x09F3, r27	; 0x8009f3 <__brkval+0x1>
 7ac:	a0 93 f2 09 	sts	0x09F2, r26	; 0x8009f2 <__brkval>
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret

000007b6 <atoi>:
 7b6:	fc 01       	movw	r30, r24
 7b8:	88 27       	eor	r24, r24
 7ba:	99 27       	eor	r25, r25
 7bc:	e8 94       	clt
 7be:	21 91       	ld	r18, Z+
 7c0:	20 32       	cpi	r18, 0x20	; 32
 7c2:	e9 f3       	breq	.-6      	; 0x7be <atoi+0x8>
 7c4:	29 30       	cpi	r18, 0x09	; 9
 7c6:	10 f0       	brcs	.+4      	; 0x7cc <atoi+0x16>
 7c8:	2e 30       	cpi	r18, 0x0E	; 14
 7ca:	c8 f3       	brcs	.-14     	; 0x7be <atoi+0x8>
 7cc:	2b 32       	cpi	r18, 0x2B	; 43
 7ce:	39 f0       	breq	.+14     	; 0x7de <atoi+0x28>
 7d0:	2d 32       	cpi	r18, 0x2D	; 45
 7d2:	31 f4       	brne	.+12     	; 0x7e0 <atoi+0x2a>
 7d4:	68 94       	set
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <atoi+0x28>
 7d8:	19 d0       	rcall	.+50     	; 0x80c <__mulhi_const_10>
 7da:	82 0f       	add	r24, r18
 7dc:	91 1d       	adc	r25, r1
 7de:	21 91       	ld	r18, Z+
 7e0:	20 53       	subi	r18, 0x30	; 48
 7e2:	2a 30       	cpi	r18, 0x0A	; 10
 7e4:	c8 f3       	brcs	.-14     	; 0x7d8 <atoi+0x22>
 7e6:	1e f4       	brtc	.+6      	; 0x7ee <atoi+0x38>
 7e8:	90 95       	com	r25
 7ea:	81 95       	neg	r24
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	08 95       	ret

000007f0 <memset>:
 7f0:	dc 01       	movw	r26, r24
 7f2:	01 c0       	rjmp	.+2      	; 0x7f6 <memset+0x6>
 7f4:	6d 93       	st	X+, r22
 7f6:	41 50       	subi	r20, 0x01	; 1
 7f8:	50 40       	sbci	r21, 0x00	; 0
 7fa:	e0 f7       	brcc	.-8      	; 0x7f4 <memset+0x4>
 7fc:	08 95       	ret

000007fe <strcpy>:
 7fe:	fb 01       	movw	r30, r22
 800:	dc 01       	movw	r26, r24
 802:	01 90       	ld	r0, Z+
 804:	0d 92       	st	X+, r0
 806:	00 20       	and	r0, r0
 808:	e1 f7       	brne	.-8      	; 0x802 <strcpy+0x4>
 80a:	08 95       	ret

0000080c <__mulhi_const_10>:
 80c:	7a e0       	ldi	r23, 0x0A	; 10
 80e:	97 9f       	mul	r25, r23
 810:	90 2d       	mov	r25, r0
 812:	87 9f       	mul	r24, r23
 814:	80 2d       	mov	r24, r0
 816:	91 0d       	add	r25, r1
 818:	11 24       	eor	r1, r1
 81a:	08 95       	ret

0000081c <_exit>:
 81c:	f8 94       	cli

0000081e <__stop_program>:
 81e:	ff cf       	rjmp	.-2      	; 0x81e <__stop_program>

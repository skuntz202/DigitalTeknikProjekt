
DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  000008e4  00000978  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800236  00800236  000009ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000189c  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001129  00000000  00000000  000023fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a5b  00000000  00000000  00003525  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000821  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004be  00000000  00000000  00004a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	87 c0       	rjmp	.+270    	; 0x164 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	19 c2       	rjmp	.+1074   	; 0x494 <__vector_24>
  62:	00 00       	nop
  64:	ae c2       	rjmp	.+1372   	; 0x5c2 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	be c2       	rjmp	.+1404   	; 0x5ea <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	81 c0       	rjmp	.+258    	; 0x178 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e3       	ldi	r26, 0x36	; 54
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 3a       	cpi	r26, 0xA8	; 168
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4c d1       	rcall	.+664    	; 0x3b8 <main>
 120:	df c3       	rjmp	.+1982   	; 0x8e0 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer0>:
int ADCBufferIndex = 0;
float voltage = 0.f;
int ADCSampleFlag = 0;

int initTimer0(){
	TCCR0A = (1<<WGM01);	    //Sets mode to CTC
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02);			//Sets prescaler to 512
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	95 bd       	out	0x25, r25	; 37
	OCR0A =	0x7C;				//Sets compare value to 124
 12c:	9c e7       	ldi	r25, 0x7C	; 124
 12e:	97 bd       	out	0x27, r25	; 39
	OCR0B =	0x7C;
 130:	98 bd       	out	0x28, r25	; 40
	TIMSK0 = (1<<OCIE0A);
 132:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	TIFR0 = (1<<OCF0A);
 136:	85 bb       	out	0x15, r24	; 21
	return 1;
}
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <ADC_init>:

void ADC_init(){
	initTimer0();
 13e:	f2 df       	rcall	.-28     	; 0x124 <initTimer0>
	ADMUX = (1<<REFS0)|(1<<ADLAR);
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS0);
 146:	8d ea       	ldi	r24, 0xAD	; 173
 148:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	ADCSRB = (1<<ADTS1)|(1<<ADTS0);
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 152:	08 95       	ret

00000154 <ADC_storeSample>:
}

void ADC_storeSample(){
	adcSample = ADCH;
 154:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__data_end+0x1>
 15e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__data_end>
 162:	08 95       	ret

00000164 <__vector_21>:
	} else{
		ADCBufferIndex += 1;
	}*/
}

ISR(TIMER0_COMPA_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
	
}
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_29>:

ISR(ADC_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	0b b6       	in	r0, 0x3b	; 59
 184:	0f 92       	push	r0
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	ADC_storeSample();
 19e:	da df       	rcall	.-76     	; 0x154 <ADC_storeSample>
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0b be       	out	0x3b, r0	; 59
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <input_checkPacket>:
#include "input.h"
#include <stdio.h>
#include <stdlib.h>

UARTPacket input_checkPacket(char* packet){
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	8c 01       	movw	r16, r24
	UARTPacket returnData;
	returnData.type = packet[4];
 1ce:	dc 01       	movw	r26, r24
 1d0:	14 96       	adiw	r26, 0x04	; 4
 1d2:	cc 91       	ld	r28, X
	if(returnData.type == 0x01){
 1d4:	c1 30       	cpi	r28, 0x01	; 1
 1d6:	79 f4       	brne	.+30     	; 0x1f6 <input_checkPacket+0x30>
		returnData.data = (char*)calloc(2, sizeof(char));
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	18 d2       	rcall	.+1072   	; 0x612 <calloc>
 1e2:	78 2f       	mov	r23, r24
 1e4:	29 2f       	mov	r18, r25
		returnData.data[0] = packet[5];
 1e6:	f8 01       	movw	r30, r16
 1e8:	35 81       	ldd	r19, Z+5	; 0x05
 1ea:	dc 01       	movw	r26, r24
 1ec:	3c 93       	st	X, r19
		returnData.data[1] = packet[6];
 1ee:	36 81       	ldd	r19, Z+6	; 0x06
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	3c 93       	st	X, r19
 1f4:	1a c0       	rjmp	.+52     	; 0x22a <input_checkPacket+0x64>
	}
	else if(returnData.type == 0x02){
 1f6:	c2 30       	cpi	r28, 0x02	; 2
 1f8:	c1 f4       	brne	.+48     	; 0x22a <input_checkPacket+0x64>
		returnData.data = (char*)calloc(4, sizeof(char));
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	07 d2       	rcall	.+1038   	; 0x612 <calloc>
 204:	fc 01       	movw	r30, r24
 206:	78 2f       	mov	r23, r24
 208:	2f 2f       	mov	r18, r31
		returnData.data[0] = packet[5];
 20a:	d8 01       	movw	r26, r16
 20c:	15 96       	adiw	r26, 0x05	; 5
 20e:	8c 91       	ld	r24, X
 210:	15 97       	sbiw	r26, 0x05	; 5
 212:	80 83       	st	Z, r24
		returnData.data[1] = packet[6];
 214:	16 96       	adiw	r26, 0x06	; 6
 216:	8c 91       	ld	r24, X
 218:	16 97       	sbiw	r26, 0x06	; 6
 21a:	81 83       	std	Z+1, r24	; 0x01
		returnData.data[2] = packet[7];
 21c:	17 96       	adiw	r26, 0x07	; 7
 21e:	8c 91       	ld	r24, X
 220:	17 97       	sbiw	r26, 0x07	; 7
 222:	82 83       	std	Z+2, r24	; 0x02
		returnData.data[3] = packet[8];
 224:	18 96       	adiw	r26, 0x08	; 8
 226:	8c 91       	ld	r24, X
 228:	83 83       	std	Z+3, r24	; 0x03
	}
	else if(returnData.type == 0x03){}
	return returnData;
 22a:	6c 2f       	mov	r22, r28
 22c:	82 2f       	mov	r24, r18
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <transmitPacket>:
#include "input.h"

#define F_CPU 16000000UL
#include <util/delay.h>

int transmitPacket(SPIPacket packet){
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	96 2f       	mov	r25, r22
 23c:	c7 2f       	mov	r28, r23
 23e:	d8 2f       	mov	r29, r24
	//Transmits address
	packet.ACK = SPI_transmit(packet.ADDR, 1);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	89 2f       	mov	r24, r25
 246:	0b d1       	rcall	.+534    	; 0x45e <SPI_transmit>
	if(packet.ACK == 0x03){
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	41 f4       	brne	.+16     	; 0x25c <transmitPacket+0x26>
		UART_transStr("ERR: 101", 1);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	89 e0       	ldi	r24, 0x09	; 9
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	47 d1       	rcall	.+654    	; 0x4e4 <UART_transStr>
		return -1;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	9f ef       	ldi	r25, 0xFF	; 255
 25a:	ab c0       	rjmp	.+342    	; 0x3b2 <transmitPacket+0x17c>
	}
	else if(packet.ACK == 0x02){
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	41 f4       	brne	.+16     	; 0x270 <transmitPacket+0x3a>
		UART_transStr("ERR: 102", 1);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	82 e1       	ldi	r24, 0x12	; 18
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	3d d1       	rcall	.+634    	; 0x4e4 <UART_transStr>
		return -1;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	9f ef       	ldi	r25, 0xFF	; 255
 26e:	a1 c0       	rjmp	.+322    	; 0x3b2 <transmitPacket+0x17c>
	}
	else if(packet.ACK == 0x01){
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	41 f4       	brne	.+16     	; 0x284 <transmitPacket+0x4e>
		UART_transStr("ERR: 103", 1);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	8b e1       	ldi	r24, 0x1B	; 27
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	33 d1       	rcall	.+614    	; 0x4e4 <UART_transStr>
		return -1;
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	9f ef       	ldi	r25, 0xFF	; 255
 282:	97 c0       	rjmp	.+302    	; 0x3b2 <transmitPacket+0x17c>
	}
	else if(packet.ACK == 0x00){}else{
 284:	88 23       	and	r24, r24
 286:	41 f0       	breq	.+16     	; 0x298 <transmitPacket+0x62>
		UART_transStr("ERR: 104", 1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	84 e2       	ldi	r24, 0x24	; 36
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	29 d1       	rcall	.+594    	; 0x4e4 <UART_transStr>
		return -1;
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	//Transmits data
	packet.ACK = SPI_transmit(packet.DATA, 1);
 296:	8d c0       	rjmp	.+282    	; 0x3b2 <transmitPacket+0x17c>
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	8c 2f       	mov	r24, r28
 29e:	df d0       	rcall	.+446    	; 0x45e <SPI_transmit>
	if(packet.ACK == 0x03){
 2a0:	83 30       	cpi	r24, 0x03	; 3
		UART_transStr("ERR: 101", 1);
 2a2:	41 f4       	brne	.+16     	; 0x2b4 <transmitPacket+0x7e>
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	92 e0       	ldi	r25, 0x02	; 2
 2ac:	1b d1       	rcall	.+566    	; 0x4e4 <UART_transStr>
		return -1;
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x02){
 2b2:	7f c0       	rjmp	.+254    	; 0x3b2 <transmitPacket+0x17c>
 2b4:	82 30       	cpi	r24, 0x02	; 2
		UART_transStr("ERR: 102", 1);
 2b6:	41 f4       	brne	.+16     	; 0x2c8 <transmitPacket+0x92>
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	82 e1       	ldi	r24, 0x12	; 18
 2be:	92 e0       	ldi	r25, 0x02	; 2
 2c0:	11 d1       	rcall	.+546    	; 0x4e4 <UART_transStr>
		return -1;
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x01){
 2c6:	75 c0       	rjmp	.+234    	; 0x3b2 <transmitPacket+0x17c>
 2c8:	81 30       	cpi	r24, 0x01	; 1
		UART_transStr("ERR: 103", 1);
 2ca:	41 f4       	brne	.+16     	; 0x2dc <transmitPacket+0xa6>
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	8b e1       	ldi	r24, 0x1B	; 27
 2d2:	92 e0       	ldi	r25, 0x02	; 2
 2d4:	07 d1       	rcall	.+526    	; 0x4e4 <UART_transStr>
		return -1;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x00){}else{
 2da:	6b c0       	rjmp	.+214    	; 0x3b2 <transmitPacket+0x17c>
 2dc:	88 23       	and	r24, r24
		UART_transStr("ERR: 104", 1);
 2de:	41 f0       	breq	.+16     	; 0x2f0 <transmitPacket+0xba>
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	84 e2       	ldi	r24, 0x24	; 36
 2e6:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 2e8:	fd d0       	rcall	.+506    	; 0x4e4 <UART_transStr>
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	9f ef       	ldi	r25, 0xFF	; 255
	}

	//Transmits CRC
	packet.ACK = SPI_transmit(packet.CRC, 1);
 2ee:	61 c0       	rjmp	.+194    	; 0x3b2 <transmitPacket+0x17c>
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	8d 2f       	mov	r24, r29
	if(packet.ACK == 0x03){
 2f6:	b3 d0       	rcall	.+358    	; 0x45e <SPI_transmit>
 2f8:	83 30       	cpi	r24, 0x03	; 3
		UART_transStr("ERR: 101", 1);
 2fa:	41 f4       	brne	.+16     	; 0x30c <transmitPacket+0xd6>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	89 e0       	ldi	r24, 0x09	; 9
 302:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 304:	ef d0       	rcall	.+478    	; 0x4e4 <UART_transStr>
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x02){
 30a:	53 c0       	rjmp	.+166    	; 0x3b2 <transmitPacket+0x17c>
 30c:	82 30       	cpi	r24, 0x02	; 2
		UART_transStr("ERR: 102", 1);
 30e:	41 f4       	brne	.+16     	; 0x320 <transmitPacket+0xea>
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	82 e1       	ldi	r24, 0x12	; 18
 316:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 318:	e5 d0       	rcall	.+458    	; 0x4e4 <UART_transStr>
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x01){
 31e:	49 c0       	rjmp	.+146    	; 0x3b2 <transmitPacket+0x17c>
 320:	81 30       	cpi	r24, 0x01	; 1
		UART_transStr("ERR: 103", 1);
 322:	41 f4       	brne	.+16     	; 0x334 <transmitPacket+0xfe>
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	8b e1       	ldi	r24, 0x1B	; 27
 32a:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 32c:	db d0       	rcall	.+438    	; 0x4e4 <UART_transStr>
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x00){}else{
 332:	3f c0       	rjmp	.+126    	; 0x3b2 <transmitPacket+0x17c>
 334:	88 23       	and	r24, r24
		UART_transStr("ERR: 104", 1);
 336:	51 f0       	breq	.+20     	; 0x34c <transmitPacket+0x116>
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	84 e2       	ldi	r24, 0x24	; 36
 33e:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 340:	d1 d0       	rcall	.+418    	; 0x4e4 <UART_transStr>
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	//Delay
	for(int timer = 0; timer < 200; timer++){}
 346:	35 c0       	rjmp	.+106    	; 0x3b2 <transmitPacket+0x17c>
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	02 c0       	rjmp	.+4      	; 0x350 <transmitPacket+0x11a>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	88 3c       	cpi	r24, 0xC8	; 200
		
	//Gets ack
	packet.ACK = SPI_transmit(0x00, 1);
 352:	91 05       	cpc	r25, r1
 354:	cc f3       	brlt	.-14     	; 0x348 <transmitPacket+0x112>
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	80 e0       	ldi	r24, 0x00	; 0
	if(packet.ACK == 0x03){
 35c:	80 d0       	rcall	.+256    	; 0x45e <SPI_transmit>
		UART_transStr("ERR: 101", 1);
 35e:	83 30       	cpi	r24, 0x03	; 3
 360:	41 f4       	brne	.+16     	; 0x372 <transmitPacket+0x13c>
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	89 e0       	ldi	r24, 0x09	; 9
 368:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 36a:	bc d0       	rcall	.+376    	; 0x4e4 <UART_transStr>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x02){
 370:	20 c0       	rjmp	.+64     	; 0x3b2 <transmitPacket+0x17c>
		UART_transStr("ERR: 102", 1);
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	41 f4       	brne	.+16     	; 0x386 <transmitPacket+0x150>
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	82 e1       	ldi	r24, 0x12	; 18
 37c:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 37e:	b2 d0       	rcall	.+356    	; 0x4e4 <UART_transStr>
 380:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else if(packet.ACK == 0x01){return 1;}
 382:	9f ef       	ldi	r25, 0xFF	; 255
 384:	16 c0       	rjmp	.+44     	; 0x3b2 <transmitPacket+0x17c>
	else if(packet.ACK == 0x00){
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	91 f0       	breq	.+36     	; 0x3ae <transmitPacket+0x178>
		UART_transStr("ERR: 105", 1);
 38a:	81 11       	cpse	r24, r1
 38c:	08 c0       	rjmp	.+16     	; 0x39e <transmitPacket+0x168>
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	8d e2       	ldi	r24, 0x2D	; 45
 394:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 396:	a6 d0       	rcall	.+332    	; 0x4e4 <UART_transStr>
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	9f ef       	ldi	r25, 0xFF	; 255
	} else{
		UART_transStr("ERR: 104", 1);
 39c:	0a c0       	rjmp	.+20     	; 0x3b2 <transmitPacket+0x17c>
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	84 e2       	ldi	r24, 0x24	; 36
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	9e d0       	rcall	.+316    	; 0x4e4 <UART_transStr>
		return -1;
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	9f ef       	ldi	r25, 0xFF	; 255
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <transmitPacket+0x17c>
	}
	else if(packet.ACK == 0x02){
		UART_transStr("ERR: 102", 1);
		return -1;
	}
	else if(packet.ACK == 0x01){return 1;}
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
	} else{
		UART_transStr("ERR: 104", 1);
		return -1;
	}
	return 0;
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <main>:

int main(void){
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	00 d0       	rcall	.+0      	; 0x3be <main+0x6>
 3be:	1f 92       	push	r1
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
	UARTPacket receivePacket;
	SPIPacket sendPacket;
	SPI_init(MASTER);
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	30 d0       	rcall	.+96     	; 0x428 <SPI_init>
	UART_init();
 3c8:	6f d0       	rcall	.+222    	; 0x4a8 <UART_init>
	ADC_init();
 3ca:	b9 de       	rcall	.-654    	; 0x13e <ADC_init>
 3cc:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <receiveCompleteFlag>
    while(1){
		if(receiveCompleteFlag){
 3d0:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <receiveCompleteFlag+0x1>
 3d4:	89 2b       	or	r24, r25
 3d6:	29 f0       	breq	.+10     	; 0x3e2 <main+0x2a>
			UART_receiveChar();
 3d8:	a5 d0       	rcall	.+330    	; 0x524 <UART_receiveChar>
 3da:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <receiveCompleteFlag+0x1>
			receiveCompleteFlag = 0;
 3de:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <receiveCompleteFlag>
 3e2:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <packetReceiveFlag>
		}
		if(packetReceiveFlag){
 3e6:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <packetReceiveFlag+0x1>
 3ea:	89 2b       	or	r24, r25
 3ec:	39 f0       	breq	.+14     	; 0x3fc <main+0x44>
			receivePacket = input_checkPacket(buffer);
 3ee:	80 e4       	ldi	r24, 0x40	; 64
 3f0:	92 e0       	ldi	r25, 0x02	; 2
 3f2:	e9 de       	rcall	.-558    	; 0x1c6 <input_checkPacket>
 3f4:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <packetReceiveFlag+0x1>
			packetReceiveFlag = 0;
 3f8:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <packetReceiveFlag>
 3fc:	ae 01       	movw	r20, r28
		}
		packet_makePacket(AMPLITUDE, 0x3F, &sendPacket);
 3fe:	4f 5f       	subi	r20, 0xFF	; 255
 400:	5f 4f       	sbci	r21, 0xFF	; 255
 402:	6f e3       	ldi	r22, 0x3F	; 63
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	09 d0       	rcall	.+18     	; 0x41a <packet_makePacket>
		transmitPacket(sendPacket);
 408:	69 81       	ldd	r22, Y+1	; 0x01
 40a:	7a 81       	ldd	r23, Y+2	; 0x02
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	9c 81       	ldd	r25, Y+4	; 0x04
 410:	12 df       	rcall	.-476    	; 0x236 <transmitPacket>
		UART_transChar(adcSample);
 412:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
 416:	59 d0       	rcall	.+178    	; 0x4ca <UART_transChar>
 418:	d9 cf       	rjmp	.-78     	; 0x3cc <main+0x14>

0000041a <packet_makePacket>:
#include "packet.h"

void packet_makePacket(char ADDR, char DATA, SPIPacket* packet){
 41a:	fa 01       	movw	r30, r20
	char CRC = 255 - DATA;
 41c:	96 2f       	mov	r25, r22
 41e:	90 95       	com	r25
	packet->ADDR = ADDR;
 420:	80 83       	st	Z, r24
	packet->DATA = DATA;
 422:	61 83       	std	Z+1, r22	; 0x01
	packet->CRC = CRC;
 424:	92 83       	std	Z+2, r25	; 0x02
 426:	08 95       	ret

00000428 <SPI_init>:
#include <avr/interrupt.h>
#include "./SPILib.h"

/* Replace with your library code */
int SPI_init(char role){
	sei();
 428:	78 94       	sei
	if(role == MASTER){
 42a:	81 11       	cpse	r24, r1
 42c:	0a c0       	rjmp	.+20     	; 0x442 <SPI_init+0x1a>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 42e:	87 e0       	ldi	r24, 0x07	; 7
 430:	84 b9       	out	0x04, r24	; 4
		PORTB = 0x00;
 432:	15 b8       	out	0x05, r1	; 5
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
 434:	82 e5       	ldi	r24, 0x52	; 82
 436:	8c bd       	out	0x2c, r24	; 44
		SPSR = (1<<SPI2X);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	8d bd       	out	0x2d, r24	; 45
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	08 95       	ret
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = 0x00;
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
		SPSR = (1<<SPI2X);
	}
	else if(role == SLAVE){
 442:	8f 3f       	cpi	r24, 0xFF	; 255
 444:	49 f4       	brne	.+18     	; 0x458 <SPI_init+0x30>
		DDRB = (1<<PB3); //Sets MISO as output
 446:	88 e0       	ldi	r24, 0x08	; 8
 448:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE); //Initiates control register
 44e:	80 e4       	ldi	r24, 0x40	; 64
 450:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 45c:	08 95       	ret

0000045e <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	if((DDRB & 0b00000111) == 0b00000111){
 45e:	94 b1       	in	r25, 0x04	; 4
 460:	97 70       	andi	r25, 0x07	; 7
 462:	97 30       	cpi	r25, 0x07	; 7
 464:	99 f4       	brne	.+38     	; 0x48c <SPI_transmit+0x2e>
		PORTB &= 0b11111110;
 466:	95 b1       	in	r25, 0x05	; 5
 468:	9e 7f       	andi	r25, 0xFE	; 254
 46a:	95 b9       	out	0x05, r25	; 5
		SPDR = transmitionCode;
 46c:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & 0b10000000) != 0b10000000){} //Waits for transmition to finish
 46e:	0d b4       	in	r0, 0x2d	; 45
 470:	07 fe       	sbrs	r0, 7
 472:	fd cf       	rjmp	.-6      	; 0x46e <SPI_transmit+0x10>
		PORTB |= 0b00000001;
 474:	85 b1       	in	r24, 0x05	; 5
 476:	81 60       	ori	r24, 0x01	; 1
 478:	85 b9       	out	0x05, r24	; 5
		if(toggleRecieve == 1){
 47a:	61 30       	cpi	r22, 0x01	; 1
 47c:	71 05       	cpc	r23, r1
 47e:	11 f4       	brne	.+4      	; 0x484 <SPI_transmit+0x26>
			return SPDR;
 480:	8e b5       	in	r24, 0x2e	; 46
 482:	08 95       	ret
		}
		else if(toggleRecieve == 0){
 484:	67 2b       	or	r22, r23
 486:	21 f4       	brne	.+8      	; 0x490 <SPI_transmit+0x32>
			return 1;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	08 95       	ret
		}
	}
	return 0;
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	08 95       	ret
 490:	80 e0       	ldi	r24, 0x00	; 0
}
 492:	08 95       	ret

00000494 <__vector_24>:

ISR(SPI_STC_vect){
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	0f 92       	push	r0
 49c:	11 24       	eor	r1, r1
	
}
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

000004a8 <UART_init>:
	if(RX == '\r'){
		carriageReturn = 1;
	}
	else if(carriageReturn && RX == '\n'){
		receiveComplete = 1;
		bufferIndex = 0;
 4a8:	78 94       	sei
 4aa:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 4ae:	83 e3       	ldi	r24, 0x33	; 51
 4b0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 4b4:	e1 ec       	ldi	r30, 0xC1	; 193
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	88 6d       	ori	r24, 0xD8	; 216
 4bc:	80 83       	st	Z, r24
 4be:	e2 ec       	ldi	r30, 0xC2	; 194
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	86 60       	ori	r24, 0x06	; 6
 4c6:	80 83       	st	Z, r24
 4c8:	08 95       	ret

000004ca <UART_transChar>:
 4ca:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <transmitComplete>
 4ce:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <transmitComplete+0x1>
 4d2:	23 2b       	or	r18, r19
 4d4:	d1 f3       	breq	.-12     	; 0x4ca <UART_transChar>
 4d6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <transmitComplete+0x1>
 4da:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <transmitComplete>
 4de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4e2:	08 95       	ret

000004e4 <UART_transStr>:
 4e4:	ef 92       	push	r14
 4e6:	ff 92       	push	r15
 4e8:	0f 93       	push	r16
 4ea:	1f 93       	push	r17
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	8c 01       	movw	r16, r24
 4f2:	7b 01       	movw	r14, r22
 4f4:	c0 e0       	ldi	r28, 0x00	; 0
 4f6:	d0 e0       	ldi	r29, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <UART_transStr+0x1a>
 4fa:	e7 df       	rcall	.-50     	; 0x4ca <UART_transChar>
 4fc:	21 96       	adiw	r28, 0x01	; 1
 4fe:	f8 01       	movw	r30, r16
 500:	ec 0f       	add	r30, r28
 502:	fd 1f       	adc	r31, r29
 504:	80 81       	ld	r24, Z
 506:	81 11       	cpse	r24, r1
 508:	f8 cf       	rjmp	.-16     	; 0x4fa <UART_transStr+0x16>
 50a:	ef 28       	or	r14, r15
 50c:	21 f0       	breq	.+8      	; 0x516 <UART_transStr+0x32>
 50e:	8d e0       	ldi	r24, 0x0D	; 13
 510:	dc df       	rcall	.-72     	; 0x4ca <UART_transChar>
 512:	8a e0       	ldi	r24, 0x0A	; 10
 514:	da df       	rcall	.-76     	; 0x4ca <UART_transChar>
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	1f 91       	pop	r17
 51c:	0f 91       	pop	r16
 51e:	ff 90       	pop	r15
 520:	ef 90       	pop	r14
 522:	08 95       	ret

00000524 <UART_receiveChar>:
	}
}

int UART_receiveChar(){
 524:	cf 93       	push	r28
 526:	df 93       	push	r29
 528:	1f 92       	push	r1
 52a:	1f 92       	push	r1
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
	char tempBuffer[2];
	RX = UDR0;
 530:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 534:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <RX>
	buffer[bufferIndex] = RX;
 538:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <bufferIndex>
 53c:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <bufferIndex+0x1>
 540:	e0 5c       	subi	r30, 0xC0	; 192
 542:	fd 4f       	sbci	r31, 0xFD	; 253
 544:	80 83       	st	Z, r24
	if(bufferIndex == 3){
 546:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <bufferIndex>
 54a:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <bufferIndex+0x1>
 54e:	03 97       	sbiw	r24, 0x03	; 3
 550:	a9 f4       	brne	.+42     	; 0x57c <UART_receiveChar+0x58>
		if(buffer[0] == 0x55 && buffer[1] == 0xAA){
 552:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <buffer>
 556:	85 35       	cpi	r24, 0x55	; 85
 558:	89 f4       	brne	.+34     	; 0x57c <UART_receiveChar+0x58>
 55a:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <buffer+0x1>
 55e:	8a 3a       	cpi	r24, 0xAA	; 170
 560:	69 f4       	brne	.+26     	; 0x57c <UART_receiveChar+0x58>
			tempBuffer[0] = buffer[2];
 562:	e0 e4       	ldi	r30, 0x40	; 64
 564:	f2 e0       	ldi	r31, 0x02	; 2
 566:	82 81       	ldd	r24, Z+2	; 0x02
 568:	89 83       	std	Y+1, r24	; 0x01
			tempBuffer[1] = buffer[3];
 56a:	83 81       	ldd	r24, Z+3	; 0x03
 56c:	8a 83       	std	Y+2, r24	; 0x02
			packetLength = atoi(tempBuffer);
 56e:	ce 01       	movw	r24, r28
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	8a d1       	rcall	.+788    	; 0x888 <atoi>
 574:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <packetLength+0x1>
 578:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <packetLength>
		}
	}
	if(bufferIndex == packetLength && packetLength != 0){
 57c:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <bufferIndex>
 580:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <bufferIndex+0x1>
 584:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <packetLength>
 588:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <packetLength+0x1>
 58c:	28 17       	cp	r18, r24
 58e:	39 07       	cpc	r19, r25
 590:	41 f4       	brne	.+16     	; 0x5a2 <UART_receiveChar+0x7e>
 592:	89 2b       	or	r24, r25
 594:	31 f0       	breq	.+12     	; 0x5a2 <UART_receiveChar+0x7e>
		packetReceiveFlag = 1;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <packetReceiveFlag+0x1>
 59e:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <packetReceiveFlag>
	}
	bufferIndex += 1;
 5a2:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <bufferIndex>
 5a6:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <bufferIndex+0x1>
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <bufferIndex+0x1>
 5b0:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <bufferIndex>
	//checkCarriageReturn();
	return 1;
}
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <__vector_25>:


ISR(USART0_RX_vect){
 5c2:	1f 92       	push	r1
 5c4:	0f 92       	push	r0
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	0f 92       	push	r0
 5ca:	11 24       	eor	r1, r1
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
	receiveCompleteFlag = 1;
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <receiveCompleteFlag+0x1>
 5d8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <receiveCompleteFlag>
};
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	0f 90       	pop	r0
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	0f 90       	pop	r0
 5e6:	1f 90       	pop	r1
 5e8:	18 95       	reti

000005ea <__vector_27>:

ISR(USART0_TX_vect){
 5ea:	1f 92       	push	r1
 5ec:	0f 92       	push	r0
 5ee:	0f b6       	in	r0, 0x3f	; 63
 5f0:	0f 92       	push	r0
 5f2:	11 24       	eor	r1, r1
 5f4:	8f 93       	push	r24
 5f6:	9f 93       	push	r25
	transmitComplete = 1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <transmitComplete+0x1>
 600:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <transmitComplete>
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <calloc>:
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	86 9f       	mul	r24, r22
 61c:	80 01       	movw	r16, r0
 61e:	87 9f       	mul	r24, r23
 620:	10 0d       	add	r17, r0
 622:	96 9f       	mul	r25, r22
 624:	10 0d       	add	r17, r0
 626:	11 24       	eor	r1, r1
 628:	c8 01       	movw	r24, r16
 62a:	0d d0       	rcall	.+26     	; 0x646 <malloc>
 62c:	ec 01       	movw	r28, r24
 62e:	00 97       	sbiw	r24, 0x00	; 0
 630:	21 f0       	breq	.+8      	; 0x63a <calloc+0x28>
 632:	a8 01       	movw	r20, r16
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	44 d1       	rcall	.+648    	; 0x8c2 <memset>
 63a:	ce 01       	movw	r24, r28
 63c:	df 91       	pop	r29
 63e:	cf 91       	pop	r28
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	08 95       	ret

00000646 <malloc>:
 646:	0f 93       	push	r16
 648:	1f 93       	push	r17
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	91 05       	cpc	r25, r1
 652:	10 f4       	brcc	.+4      	; 0x658 <malloc+0x12>
 654:	82 e0       	ldi	r24, 0x02	; 2
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <__flp>
 65c:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <__flp+0x1>
 660:	20 e0       	ldi	r18, 0x00	; 0
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	a0 e0       	ldi	r26, 0x00	; 0
 666:	b0 e0       	ldi	r27, 0x00	; 0
 668:	30 97       	sbiw	r30, 0x00	; 0
 66a:	19 f1       	breq	.+70     	; 0x6b2 <malloc+0x6c>
 66c:	40 81       	ld	r20, Z
 66e:	51 81       	ldd	r21, Z+1	; 0x01
 670:	02 81       	ldd	r16, Z+2	; 0x02
 672:	13 81       	ldd	r17, Z+3	; 0x03
 674:	48 17       	cp	r20, r24
 676:	59 07       	cpc	r21, r25
 678:	c8 f0       	brcs	.+50     	; 0x6ac <malloc+0x66>
 67a:	84 17       	cp	r24, r20
 67c:	95 07       	cpc	r25, r21
 67e:	69 f4       	brne	.+26     	; 0x69a <malloc+0x54>
 680:	10 97       	sbiw	r26, 0x00	; 0
 682:	31 f0       	breq	.+12     	; 0x690 <malloc+0x4a>
 684:	12 96       	adiw	r26, 0x02	; 2
 686:	0c 93       	st	X, r16
 688:	12 97       	sbiw	r26, 0x02	; 2
 68a:	13 96       	adiw	r26, 0x03	; 3
 68c:	1c 93       	st	X, r17
 68e:	27 c0       	rjmp	.+78     	; 0x6de <malloc+0x98>
 690:	00 93 a6 02 	sts	0x02A6, r16	; 0x8002a6 <__flp>
 694:	10 93 a7 02 	sts	0x02A7, r17	; 0x8002a7 <__flp+0x1>
 698:	22 c0       	rjmp	.+68     	; 0x6de <malloc+0x98>
 69a:	21 15       	cp	r18, r1
 69c:	31 05       	cpc	r19, r1
 69e:	19 f0       	breq	.+6      	; 0x6a6 <malloc+0x60>
 6a0:	42 17       	cp	r20, r18
 6a2:	53 07       	cpc	r21, r19
 6a4:	18 f4       	brcc	.+6      	; 0x6ac <malloc+0x66>
 6a6:	9a 01       	movw	r18, r20
 6a8:	bd 01       	movw	r22, r26
 6aa:	ef 01       	movw	r28, r30
 6ac:	df 01       	movw	r26, r30
 6ae:	f8 01       	movw	r30, r16
 6b0:	db cf       	rjmp	.-74     	; 0x668 <malloc+0x22>
 6b2:	21 15       	cp	r18, r1
 6b4:	31 05       	cpc	r19, r1
 6b6:	f9 f0       	breq	.+62     	; 0x6f6 <malloc+0xb0>
 6b8:	28 1b       	sub	r18, r24
 6ba:	39 0b       	sbc	r19, r25
 6bc:	24 30       	cpi	r18, 0x04	; 4
 6be:	31 05       	cpc	r19, r1
 6c0:	80 f4       	brcc	.+32     	; 0x6e2 <malloc+0x9c>
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	9b 81       	ldd	r25, Y+3	; 0x03
 6c6:	61 15       	cp	r22, r1
 6c8:	71 05       	cpc	r23, r1
 6ca:	21 f0       	breq	.+8      	; 0x6d4 <malloc+0x8e>
 6cc:	fb 01       	movw	r30, r22
 6ce:	93 83       	std	Z+3, r25	; 0x03
 6d0:	82 83       	std	Z+2, r24	; 0x02
 6d2:	04 c0       	rjmp	.+8      	; 0x6dc <malloc+0x96>
 6d4:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <__flp+0x1>
 6d8:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <__flp>
 6dc:	fe 01       	movw	r30, r28
 6de:	32 96       	adiw	r30, 0x02	; 2
 6e0:	44 c0       	rjmp	.+136    	; 0x76a <malloc+0x124>
 6e2:	fe 01       	movw	r30, r28
 6e4:	e2 0f       	add	r30, r18
 6e6:	f3 1f       	adc	r31, r19
 6e8:	81 93       	st	Z+, r24
 6ea:	91 93       	st	Z+, r25
 6ec:	22 50       	subi	r18, 0x02	; 2
 6ee:	31 09       	sbc	r19, r1
 6f0:	39 83       	std	Y+1, r19	; 0x01
 6f2:	28 83       	st	Y, r18
 6f4:	3a c0       	rjmp	.+116    	; 0x76a <malloc+0x124>
 6f6:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__brkval>
 6fa:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__brkval+0x1>
 6fe:	23 2b       	or	r18, r19
 700:	41 f4       	brne	.+16     	; 0x712 <malloc+0xcc>
 702:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 706:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 70a:	30 93 a5 02 	sts	0x02A5, r19	; 0x8002a5 <__brkval+0x1>
 70e:	20 93 a4 02 	sts	0x02A4, r18	; 0x8002a4 <__brkval>
 712:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 716:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 71a:	21 15       	cp	r18, r1
 71c:	31 05       	cpc	r19, r1
 71e:	41 f4       	brne	.+16     	; 0x730 <malloc+0xea>
 720:	2d b7       	in	r18, 0x3d	; 61
 722:	3e b7       	in	r19, 0x3e	; 62
 724:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 728:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 72c:	24 1b       	sub	r18, r20
 72e:	35 0b       	sbc	r19, r21
 730:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <__brkval>
 734:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <__brkval+0x1>
 738:	e2 17       	cp	r30, r18
 73a:	f3 07       	cpc	r31, r19
 73c:	a0 f4       	brcc	.+40     	; 0x766 <malloc+0x120>
 73e:	2e 1b       	sub	r18, r30
 740:	3f 0b       	sbc	r19, r31
 742:	28 17       	cp	r18, r24
 744:	39 07       	cpc	r19, r25
 746:	78 f0       	brcs	.+30     	; 0x766 <malloc+0x120>
 748:	ac 01       	movw	r20, r24
 74a:	4e 5f       	subi	r20, 0xFE	; 254
 74c:	5f 4f       	sbci	r21, 0xFF	; 255
 74e:	24 17       	cp	r18, r20
 750:	35 07       	cpc	r19, r21
 752:	48 f0       	brcs	.+18     	; 0x766 <malloc+0x120>
 754:	4e 0f       	add	r20, r30
 756:	5f 1f       	adc	r21, r31
 758:	50 93 a5 02 	sts	0x02A5, r21	; 0x8002a5 <__brkval+0x1>
 75c:	40 93 a4 02 	sts	0x02A4, r20	; 0x8002a4 <__brkval>
 760:	81 93       	st	Z+, r24
 762:	91 93       	st	Z+, r25
 764:	02 c0       	rjmp	.+4      	; 0x76a <malloc+0x124>
 766:	e0 e0       	ldi	r30, 0x00	; 0
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	cf 01       	movw	r24, r30
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	1f 91       	pop	r17
 772:	0f 91       	pop	r16
 774:	08 95       	ret

00000776 <free>:
 776:	cf 93       	push	r28
 778:	df 93       	push	r29
 77a:	00 97       	sbiw	r24, 0x00	; 0
 77c:	09 f4       	brne	.+2      	; 0x780 <free+0xa>
 77e:	81 c0       	rjmp	.+258    	; 0x882 <free+0x10c>
 780:	fc 01       	movw	r30, r24
 782:	32 97       	sbiw	r30, 0x02	; 2
 784:	13 82       	std	Z+3, r1	; 0x03
 786:	12 82       	std	Z+2, r1	; 0x02
 788:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <__flp>
 78c:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <__flp+0x1>
 790:	10 97       	sbiw	r26, 0x00	; 0
 792:	81 f4       	brne	.+32     	; 0x7b4 <free+0x3e>
 794:	20 81       	ld	r18, Z
 796:	31 81       	ldd	r19, Z+1	; 0x01
 798:	82 0f       	add	r24, r18
 79a:	93 1f       	adc	r25, r19
 79c:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__brkval>
 7a0:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__brkval+0x1>
 7a4:	28 17       	cp	r18, r24
 7a6:	39 07       	cpc	r19, r25
 7a8:	51 f5       	brne	.+84     	; 0x7fe <free+0x88>
 7aa:	f0 93 a5 02 	sts	0x02A5, r31	; 0x8002a5 <__brkval+0x1>
 7ae:	e0 93 a4 02 	sts	0x02A4, r30	; 0x8002a4 <__brkval>
 7b2:	67 c0       	rjmp	.+206    	; 0x882 <free+0x10c>
 7b4:	ed 01       	movw	r28, r26
 7b6:	20 e0       	ldi	r18, 0x00	; 0
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	ce 17       	cp	r28, r30
 7bc:	df 07       	cpc	r29, r31
 7be:	40 f4       	brcc	.+16     	; 0x7d0 <free+0x5a>
 7c0:	4a 81       	ldd	r20, Y+2	; 0x02
 7c2:	5b 81       	ldd	r21, Y+3	; 0x03
 7c4:	9e 01       	movw	r18, r28
 7c6:	41 15       	cp	r20, r1
 7c8:	51 05       	cpc	r21, r1
 7ca:	f1 f0       	breq	.+60     	; 0x808 <free+0x92>
 7cc:	ea 01       	movw	r28, r20
 7ce:	f5 cf       	rjmp	.-22     	; 0x7ba <free+0x44>
 7d0:	d3 83       	std	Z+3, r29	; 0x03
 7d2:	c2 83       	std	Z+2, r28	; 0x02
 7d4:	40 81       	ld	r20, Z
 7d6:	51 81       	ldd	r21, Z+1	; 0x01
 7d8:	84 0f       	add	r24, r20
 7da:	95 1f       	adc	r25, r21
 7dc:	c8 17       	cp	r28, r24
 7de:	d9 07       	cpc	r29, r25
 7e0:	59 f4       	brne	.+22     	; 0x7f8 <free+0x82>
 7e2:	88 81       	ld	r24, Y
 7e4:	99 81       	ldd	r25, Y+1	; 0x01
 7e6:	84 0f       	add	r24, r20
 7e8:	95 1f       	adc	r25, r21
 7ea:	02 96       	adiw	r24, 0x02	; 2
 7ec:	91 83       	std	Z+1, r25	; 0x01
 7ee:	80 83       	st	Z, r24
 7f0:	8a 81       	ldd	r24, Y+2	; 0x02
 7f2:	9b 81       	ldd	r25, Y+3	; 0x03
 7f4:	93 83       	std	Z+3, r25	; 0x03
 7f6:	82 83       	std	Z+2, r24	; 0x02
 7f8:	21 15       	cp	r18, r1
 7fa:	31 05       	cpc	r19, r1
 7fc:	29 f4       	brne	.+10     	; 0x808 <free+0x92>
 7fe:	f0 93 a7 02 	sts	0x02A7, r31	; 0x8002a7 <__flp+0x1>
 802:	e0 93 a6 02 	sts	0x02A6, r30	; 0x8002a6 <__flp>
 806:	3d c0       	rjmp	.+122    	; 0x882 <free+0x10c>
 808:	e9 01       	movw	r28, r18
 80a:	fb 83       	std	Y+3, r31	; 0x03
 80c:	ea 83       	std	Y+2, r30	; 0x02
 80e:	49 91       	ld	r20, Y+
 810:	59 91       	ld	r21, Y+
 812:	c4 0f       	add	r28, r20
 814:	d5 1f       	adc	r29, r21
 816:	ec 17       	cp	r30, r28
 818:	fd 07       	cpc	r31, r29
 81a:	61 f4       	brne	.+24     	; 0x834 <free+0xbe>
 81c:	80 81       	ld	r24, Z
 81e:	91 81       	ldd	r25, Z+1	; 0x01
 820:	84 0f       	add	r24, r20
 822:	95 1f       	adc	r25, r21
 824:	02 96       	adiw	r24, 0x02	; 2
 826:	e9 01       	movw	r28, r18
 828:	99 83       	std	Y+1, r25	; 0x01
 82a:	88 83       	st	Y, r24
 82c:	82 81       	ldd	r24, Z+2	; 0x02
 82e:	93 81       	ldd	r25, Z+3	; 0x03
 830:	9b 83       	std	Y+3, r25	; 0x03
 832:	8a 83       	std	Y+2, r24	; 0x02
 834:	e0 e0       	ldi	r30, 0x00	; 0
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	12 96       	adiw	r26, 0x02	; 2
 83a:	8d 91       	ld	r24, X+
 83c:	9c 91       	ld	r25, X
 83e:	13 97       	sbiw	r26, 0x03	; 3
 840:	00 97       	sbiw	r24, 0x00	; 0
 842:	19 f0       	breq	.+6      	; 0x84a <free+0xd4>
 844:	fd 01       	movw	r30, r26
 846:	dc 01       	movw	r26, r24
 848:	f7 cf       	rjmp	.-18     	; 0x838 <free+0xc2>
 84a:	8d 91       	ld	r24, X+
 84c:	9c 91       	ld	r25, X
 84e:	11 97       	sbiw	r26, 0x01	; 1
 850:	9d 01       	movw	r18, r26
 852:	2e 5f       	subi	r18, 0xFE	; 254
 854:	3f 4f       	sbci	r19, 0xFF	; 255
 856:	82 0f       	add	r24, r18
 858:	93 1f       	adc	r25, r19
 85a:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__brkval>
 85e:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__brkval+0x1>
 862:	28 17       	cp	r18, r24
 864:	39 07       	cpc	r19, r25
 866:	69 f4       	brne	.+26     	; 0x882 <free+0x10c>
 868:	30 97       	sbiw	r30, 0x00	; 0
 86a:	29 f4       	brne	.+10     	; 0x876 <free+0x100>
 86c:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <__flp+0x1>
 870:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <__flp>
 874:	02 c0       	rjmp	.+4      	; 0x87a <free+0x104>
 876:	13 82       	std	Z+3, r1	; 0x03
 878:	12 82       	std	Z+2, r1	; 0x02
 87a:	b0 93 a5 02 	sts	0x02A5, r27	; 0x8002a5 <__brkval+0x1>
 87e:	a0 93 a4 02 	sts	0x02A4, r26	; 0x8002a4 <__brkval>
 882:	df 91       	pop	r29
 884:	cf 91       	pop	r28
 886:	08 95       	ret

00000888 <atoi>:
 888:	fc 01       	movw	r30, r24
 88a:	88 27       	eor	r24, r24
 88c:	99 27       	eor	r25, r25
 88e:	e8 94       	clt
 890:	21 91       	ld	r18, Z+
 892:	20 32       	cpi	r18, 0x20	; 32
 894:	e9 f3       	breq	.-6      	; 0x890 <atoi+0x8>
 896:	29 30       	cpi	r18, 0x09	; 9
 898:	10 f0       	brcs	.+4      	; 0x89e <atoi+0x16>
 89a:	2e 30       	cpi	r18, 0x0E	; 14
 89c:	c8 f3       	brcs	.-14     	; 0x890 <atoi+0x8>
 89e:	2b 32       	cpi	r18, 0x2B	; 43
 8a0:	39 f0       	breq	.+14     	; 0x8b0 <atoi+0x28>
 8a2:	2d 32       	cpi	r18, 0x2D	; 45
 8a4:	31 f4       	brne	.+12     	; 0x8b2 <atoi+0x2a>
 8a6:	68 94       	set
 8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <atoi+0x28>
 8aa:	12 d0       	rcall	.+36     	; 0x8d0 <__mulhi_const_10>
 8ac:	82 0f       	add	r24, r18
 8ae:	91 1d       	adc	r25, r1
 8b0:	21 91       	ld	r18, Z+
 8b2:	20 53       	subi	r18, 0x30	; 48
 8b4:	2a 30       	cpi	r18, 0x0A	; 10
 8b6:	c8 f3       	brcs	.-14     	; 0x8aa <atoi+0x22>
 8b8:	1e f4       	brtc	.+6      	; 0x8c0 <atoi+0x38>
 8ba:	90 95       	com	r25
 8bc:	81 95       	neg	r24
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	08 95       	ret

000008c2 <memset>:
 8c2:	dc 01       	movw	r26, r24
 8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <memset+0x6>
 8c6:	6d 93       	st	X+, r22
 8c8:	41 50       	subi	r20, 0x01	; 1
 8ca:	50 40       	sbci	r21, 0x00	; 0
 8cc:	e0 f7       	brcc	.-8      	; 0x8c6 <memset+0x4>
 8ce:	08 95       	ret

000008d0 <__mulhi_const_10>:
 8d0:	7a e0       	ldi	r23, 0x0A	; 10
 8d2:	97 9f       	mul	r25, r23
 8d4:	90 2d       	mov	r25, r0
 8d6:	87 9f       	mul	r24, r23
 8d8:	80 2d       	mov	r24, r0
 8da:	91 0d       	add	r25, r1
 8dc:	11 24       	eor	r1, r1
 8de:	08 95       	ret

000008e0 <_exit>:
 8e0:	f8 94       	cli

000008e2 <__stop_program>:
 8e2:	ff cf       	rjmp	.-2      	; 0x8e2 <__stop_program>


DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  000006f6  0000078a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800236  00800236  000007c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a5  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6e  00000000  00000000  00001ddd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000887  00000000  00000000  00002d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  000035d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000782  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000478  00000000  00000000  00003f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000440e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	87 c0       	rjmp	.+270    	; 0x164 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	81 c1       	rjmp	.+770    	; 0x364 <__vector_24>
  62:	00 00       	nop
  64:	dc c1       	rjmp	.+952    	; 0x41e <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ec c1       	rjmp	.+984    	; 0x446 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	81 c0       	rjmp	.+258    	; 0x178 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ef       	ldi	r30, 0xF6	; 246
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e3       	ldi	r26, 0x36	; 54
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 3a       	cpi	r26, 0xA4	; 164
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	c8 d0       	rcall	.+400    	; 0x2b0 <main>
 120:	e8 c2       	rjmp	.+1488   	; 0x6f2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer0>:
int ADCBufferIndex = 0;
float voltage = 0.f;
int ADCSampleFlag = 0;

int initTimer0(){
	TCCR0A = (1<<WGM01);	    //Sets mode to CTC
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02);			//Sets prescaler to 512
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	95 bd       	out	0x25, r25	; 37
	OCR0A =	0x7C;				//Sets compare value to 124
 12c:	9c e7       	ldi	r25, 0x7C	; 124
 12e:	97 bd       	out	0x27, r25	; 39
	OCR0B =	0x7C;
 130:	98 bd       	out	0x28, r25	; 40
	TIMSK0 = (1<<OCIE0A);
 132:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	TIFR0 = (1<<OCF0A);
 136:	85 bb       	out	0x15, r24	; 21
	return 1;
}
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <ADC_init>:

void ADC_init(){
	initTimer0();
 13e:	f2 df       	rcall	.-28     	; 0x124 <initTimer0>
	ADMUX = (1<<REFS0)|(1<<ADLAR);
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS0);
 146:	8d ea       	ldi	r24, 0xAD	; 173
 148:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	ADCSRB = (1<<ADTS1)|(1<<ADTS0);
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 152:	08 95       	ret

00000154 <ADC_storeSample>:
}

void ADC_storeSample(){
	adcSample = ADCH;
 154:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__data_end+0x1>
 15e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__data_end>
 162:	08 95       	ret

00000164 <__vector_21>:
	} else{
		ADCBufferIndex += 1;
	}*/
}

ISR(TIMER0_COMPA_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
	
}
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_29>:

ISR(ADC_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	0b b6       	in	r0, 0x3b	; 59
 184:	0f 92       	push	r0
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	ADC_storeSample();
 19e:	da df       	rcall	.-76     	; 0x154 <ADC_storeSample>
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0b be       	out	0x3b, r0	; 59
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <transmitPacket>:
#include "ADC.h"

#define F_CPU 16000000UL
#include <util/delay.h>

int transmitPacket(char* packet){
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	8c 01       	movw	r16, r24
	char response;
	for(int i = 0; i < 3; i++){
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
 1d4:	30 c0       	rjmp	.+96     	; 0x236 <transmitPacket+0x70>
		response = SPI_transmit(packet[i], 1);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	f8 01       	movw	r30, r16
 1dc:	ec 0f       	add	r30, r28
 1de:	fd 1f       	adc	r31, r29
 1e0:	80 81       	ld	r24, Z
 1e2:	a5 d0       	rcall	.+330    	; 0x32e <SPI_transmit>
		if(response == 0x03){
 1e4:	83 30       	cpi	r24, 0x03	; 3
 1e6:	41 f4       	brne	.+16     	; 0x1f8 <transmitPacket+0x32>
			UART_transStr("ERR: 101", 1);
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	92 e0       	ldi	r25, 0x02	; 2
 1f0:	e1 d0       	rcall	.+450    	; 0x3b4 <UART_transStr>
			return -1;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	9f ef       	ldi	r25, 0xFF	; 255
 1f6:	57 c0       	rjmp	.+174    	; 0x2a6 <transmitPacket+0xe0>
		}
		else if(response == 0x02){
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	41 f4       	brne	.+16     	; 0x20c <transmitPacket+0x46>
			UART_transStr("ERR: 102", 1);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	82 e1       	ldi	r24, 0x12	; 18
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	d7 d0       	rcall	.+430    	; 0x3b4 <UART_transStr>
			return -1;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	9f ef       	ldi	r25, 0xFF	; 255
 20a:	4d c0       	rjmp	.+154    	; 0x2a6 <transmitPacket+0xe0>
		}
		else if(response == 0x01){
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	41 f4       	brne	.+16     	; 0x220 <transmitPacket+0x5a>
			UART_transStr("ERR: 103", 1);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	8b e1       	ldi	r24, 0x1B	; 27
 216:	92 e0       	ldi	r25, 0x02	; 2
 218:	cd d0       	rcall	.+410    	; 0x3b4 <UART_transStr>
			return -1;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	9f ef       	ldi	r25, 0xFF	; 255
 21e:	43 c0       	rjmp	.+134    	; 0x2a6 <transmitPacket+0xe0>
		}
		else if(response == 0x00){}else{
 220:	88 23       	and	r24, r24
 222:	41 f0       	breq	.+16     	; 0x234 <transmitPacket+0x6e>
			UART_transStr("ERR: 104", 1);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	84 e2       	ldi	r24, 0x24	; 36
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	c3 d0       	rcall	.+390    	; 0x3b4 <UART_transStr>
			return -1;
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	9f ef       	ldi	r25, 0xFF	; 255
 232:	39 c0       	rjmp	.+114    	; 0x2a6 <transmitPacket+0xe0>
#define F_CPU 16000000UL
#include <util/delay.h>

int transmitPacket(char* packet){
	char response;
	for(int i = 0; i < 3; i++){
 234:	21 96       	adiw	r28, 0x01	; 1
 236:	c3 30       	cpi	r28, 0x03	; 3
 238:	d1 05       	cpc	r29, r1
 23a:	6c f2       	brlt	.-102    	; 0x1d6 <transmitPacket+0x10>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	01 c0       	rjmp	.+2      	; 0x244 <transmitPacket+0x7e>
		else if(response == 0x00){}else{
			UART_transStr("ERR: 104", 1);
			return -1;
		}
	}
	for(int timer = 0; timer < 200; timer++){}
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	88 3c       	cpi	r24, 0xC8	; 200
 246:	91 05       	cpc	r25, r1
	//_delay_ms(1);
	response = SPI_transmit(0x00, 1);
 248:	e4 f3       	brlt	.-8      	; 0x242 <transmitPacket+0x7c>
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	6e d0       	rcall	.+220    	; 0x32e <SPI_transmit>
	if(response == 0x03){
 252:	83 30       	cpi	r24, 0x03	; 3
		UART_transStr("ERR: 101", 1);
 254:	41 f4       	brne	.+16     	; 0x266 <transmitPacket+0xa0>
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	89 e0       	ldi	r24, 0x09	; 9
 25c:	92 e0       	ldi	r25, 0x02	; 2
 25e:	aa d0       	rcall	.+340    	; 0x3b4 <UART_transStr>
		return -1;
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(response == 0x02){
 264:	20 c0       	rjmp	.+64     	; 0x2a6 <transmitPacket+0xe0>
 266:	82 30       	cpi	r24, 0x02	; 2
		UART_transStr("ERR: 102", 1);
 268:	41 f4       	brne	.+16     	; 0x27a <transmitPacket+0xb4>
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	82 e1       	ldi	r24, 0x12	; 18
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	a0 d0       	rcall	.+320    	; 0x3b4 <UART_transStr>
		return -1;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	9f ef       	ldi	r25, 0xFF	; 255
 278:	16 c0       	rjmp	.+44     	; 0x2a6 <transmitPacket+0xe0>
	}
	else if(response == 0x01){return 1;}
 27a:	81 30       	cpi	r24, 0x01	; 1
	else if(response == 0x00){
 27c:	91 f0       	breq	.+36     	; 0x2a2 <transmitPacket+0xdc>
 27e:	81 11       	cpse	r24, r1
		UART_transStr("ERR: 105", 1);
 280:	08 c0       	rjmp	.+16     	; 0x292 <transmitPacket+0xcc>
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	8d e2       	ldi	r24, 0x2D	; 45
 288:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 28a:	94 d0       	rcall	.+296    	; 0x3b4 <UART_transStr>
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	9f ef       	ldi	r25, 0xFF	; 255
	} else{
		UART_transStr("ERR: 104", 1);
 290:	0a c0       	rjmp	.+20     	; 0x2a6 <transmitPacket+0xe0>
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	84 e2       	ldi	r24, 0x24	; 36
 298:	92 e0       	ldi	r25, 0x02	; 2
 29a:	8c d0       	rcall	.+280    	; 0x3b4 <UART_transStr>
		return -1;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	9f ef       	ldi	r25, 0xFF	; 255
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <transmitPacket+0xe0>
	}
	else if(response == 0x02){
		UART_transStr("ERR: 102", 1);
		return -1;
	}
	else if(response == 0x01){return 1;}
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
	} else{
		UART_transStr("ERR: 104", 1);
		return -1;
	}
	return 0;
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	1f 91       	pop	r17
 2ac:	0f 91       	pop	r16
 2ae:	08 95       	ret

000002b0 <main>:

int main(void){
	SPI_init(MASTER);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	24 d0       	rcall	.+72     	; 0x2fc <SPI_init>
	UART_init();
 2b4:	61 d0       	rcall	.+194    	; 0x378 <UART_init>
	ADC_init();
 2b6:	43 df       	rcall	.-378    	; 0x13e <ADC_init>
 2b8:	61 e0       	ldi	r22, 0x01	; 1
	char* packet = (char*)calloc(3, sizeof(char));
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	d6 d0       	rcall	.+428    	; 0x46e <calloc>
 2c2:	ec 01       	movw	r28, r24
 2c4:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <receiveCompleteFlag>
    while(1){
		if(receiveCompleteFlag){
 2c8:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <receiveCompleteFlag+0x1>
 2cc:	89 2b       	or	r24, r25
 2ce:	29 f0       	breq	.+10     	; 0x2da <main+0x2a>
			UART_receiveChar();
 2d0:	91 d0       	rcall	.+290    	; 0x3f4 <UART_receiveChar>
 2d2:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <receiveCompleteFlag+0x1>
			receiveCompleteFlag = 0;
 2d6:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <receiveCompleteFlag>
		}
		packet_makePacket(AMPLITUDE, 0x3F, packet);
 2da:	ae 01       	movw	r20, r28
 2dc:	6f e3       	ldi	r22, 0x3F	; 63
 2de:	82 e0       	ldi	r24, 0x02	; 2
		transmitPacket(packet);
 2e0:	06 d0       	rcall	.+12     	; 0x2ee <packet_makePacket>
 2e2:	ce 01       	movw	r24, r28
 2e4:	70 df       	rcall	.-288    	; 0x1c6 <transmitPacket>
		UART_transChar(adcSample);
 2e6:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
 2ea:	57 d0       	rcall	.+174    	; 0x39a <UART_transChar>
 2ec:	eb cf       	rjmp	.-42     	; 0x2c4 <main+0x14>

000002ee <packet_makePacket>:
#include "packet.h"

void packet_makePacket(char ADDR, char DATA, char* packet){
 2ee:	fa 01       	movw	r30, r20
	char CRC = 255 - DATA;
 2f0:	96 2f       	mov	r25, r22
 2f2:	90 95       	com	r25
	packet[0] = ADDR;
 2f4:	80 83       	st	Z, r24
	packet[1] = DATA;
 2f6:	61 83       	std	Z+1, r22	; 0x01
	packet[2] = CRC;
 2f8:	92 83       	std	Z+2, r25	; 0x02
 2fa:	08 95       	ret

000002fc <SPI_init>:
#include <avr/interrupt.h>
#include "./SPILib.h"

/* Replace with your library code */
int SPI_init(char role){
	sei();
 2fc:	78 94       	sei
	if(role == MASTER){
 2fe:	81 11       	cpse	r24, r1
 300:	08 c0       	rjmp	.+16     	; 0x312 <SPI_init+0x16>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	84 b9       	out	0x04, r24	; 4
		PORTB = 0x00;
 306:	15 b8       	out	0x05, r1	; 5
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Initiates control register
 308:	81 e5       	ldi	r24, 0x51	; 81
 30a:	8c bd       	out	0x2c, r24	; 44
		SPCR = 0b01001000; //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	08 95       	ret
	if(role == MASTER){
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = 0x00;
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //Initiates control register
	}
	else if(role == SLAVE){
 312:	8f 3f       	cpi	r24, 0xFF	; 255
 314:	49 f4       	brne	.+18     	; 0x328 <SPI_init+0x2c>
		DDRB = (1<<PB3); //Sets MISO as output
 316:	88 e0       	ldi	r24, 0x08	; 8
 318:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	85 b9       	out	0x05, r24	; 5
		SPCR = 0b01001000; //Initiates control register
 31e:	88 e4       	ldi	r24, 0x48	; 72
 320:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = 0b01001000; //Initiates control register
	}
	else{
		return 0;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 32c:	08 95       	ret

0000032e <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	if((DDRB & 0b00000111) == 0b00000111){
 32e:	94 b1       	in	r25, 0x04	; 4
 330:	97 70       	andi	r25, 0x07	; 7
 332:	97 30       	cpi	r25, 0x07	; 7
 334:	99 f4       	brne	.+38     	; 0x35c <SPI_transmit+0x2e>
		PORTB &= 0b11111110;
 336:	95 b1       	in	r25, 0x05	; 5
 338:	9e 7f       	andi	r25, 0xFE	; 254
 33a:	95 b9       	out	0x05, r25	; 5
		SPDR = transmitionCode;
 33c:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & 0b10000000) != 0b10000000){} //Waits for transmition to finish
 33e:	0d b4       	in	r0, 0x2d	; 45
 340:	07 fe       	sbrs	r0, 7
 342:	fd cf       	rjmp	.-6      	; 0x33e <SPI_transmit+0x10>
		PORTB |= 0b00000001;
 344:	85 b1       	in	r24, 0x05	; 5
 346:	81 60       	ori	r24, 0x01	; 1
 348:	85 b9       	out	0x05, r24	; 5
		if(toggleRecieve == 1){
 34a:	61 30       	cpi	r22, 0x01	; 1
 34c:	71 05       	cpc	r23, r1
 34e:	11 f4       	brne	.+4      	; 0x354 <SPI_transmit+0x26>
			return SPDR;
 350:	8e b5       	in	r24, 0x2e	; 46
 352:	08 95       	ret
		}
		else if(toggleRecieve == 0){
 354:	67 2b       	or	r22, r23
 356:	21 f4       	brne	.+8      	; 0x360 <SPI_transmit+0x32>
			return 1;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret
		}
	}
	return 0;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
 360:	80 e0       	ldi	r24, 0x00	; 0
}
 362:	08 95       	ret

00000364 <__vector_24>:

ISR(SPI_STC_vect){
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
	
}
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <UART_init>:
	if(RX == '\r'){
		carriageReturn = 1;
	}
	else if(carriageReturn && RX == '\n'){
		receiveComplete = 1;
		bufferIndex = 0;
 378:	78 94       	sei
 37a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 37e:	83 e3       	ldi	r24, 0x33	; 51
 380:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 384:	e1 ec       	ldi	r30, 0xC1	; 193
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	88 6d       	ori	r24, 0xD8	; 216
 38c:	80 83       	st	Z, r24
 38e:	e2 ec       	ldi	r30, 0xC2	; 194
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	86 60       	ori	r24, 0x06	; 6
 396:	80 83       	st	Z, r24
 398:	08 95       	ret

0000039a <UART_transChar>:
 39a:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <transmitComplete>
 39e:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <transmitComplete+0x1>
 3a2:	23 2b       	or	r18, r19
 3a4:	d1 f3       	breq	.-12     	; 0x39a <UART_transChar>
 3a6:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <transmitComplete+0x1>
 3aa:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <transmitComplete>
 3ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3b2:	08 95       	ret

000003b4 <UART_transStr>:
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	8c 01       	movw	r16, r24
 3c2:	7b 01       	movw	r14, r22
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <UART_transStr+0x1a>
 3ca:	e7 df       	rcall	.-50     	; 0x39a <UART_transChar>
 3cc:	21 96       	adiw	r28, 0x01	; 1
 3ce:	f8 01       	movw	r30, r16
 3d0:	ec 0f       	add	r30, r28
 3d2:	fd 1f       	adc	r31, r29
 3d4:	80 81       	ld	r24, Z
 3d6:	81 11       	cpse	r24, r1
 3d8:	f8 cf       	rjmp	.-16     	; 0x3ca <UART_transStr+0x16>
 3da:	ef 28       	or	r14, r15
 3dc:	21 f0       	breq	.+8      	; 0x3e6 <UART_transStr+0x32>
 3de:	8d e0       	ldi	r24, 0x0D	; 13
 3e0:	dc df       	rcall	.-72     	; 0x39a <UART_transChar>
 3e2:	8a e0       	ldi	r24, 0x0A	; 10
 3e4:	da df       	rcall	.-76     	; 0x39a <UART_transChar>
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	0f 91       	pop	r16
 3ee:	ff 90       	pop	r15
 3f0:	ef 90       	pop	r14
 3f2:	08 95       	ret

000003f4 <UART_receiveChar>:
	}
}

void UART_receiveChar(){
	RX = UDR0;
 3f4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 3f8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <RX>
	buffer[bufferIndex] = RX;
 3fc:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <bufferIndex>
 400:	f0 91 3b 02 	lds	r31, 0x023B	; 0x80023b <bufferIndex+0x1>
 404:	e4 5c       	subi	r30, 0xC4	; 196
 406:	fd 4f       	sbci	r31, 0xFD	; 253
 408:	80 83       	st	Z, r24
	bufferIndex += 1;
 40a:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <bufferIndex>
 40e:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <bufferIndex+0x1>
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <bufferIndex+0x1>
 418:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <bufferIndex>
 41c:	08 95       	ret

0000041e <__vector_25>:
	//checkCarriageReturn();
}


ISR(USART0_RX_vect){
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
	receiveCompleteFlag = 1;
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <receiveCompleteFlag+0x1>
 434:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <receiveCompleteFlag>
};
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <__vector_27>:

ISR(USART0_TX_vect){
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
	transmitComplete = 1;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <transmitComplete+0x1>
 45c:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <transmitComplete>
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	0f 90       	pop	r0
 466:	0f be       	out	0x3f, r0	; 63
 468:	0f 90       	pop	r0
 46a:	1f 90       	pop	r1
 46c:	18 95       	reti

0000046e <calloc>:
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	86 9f       	mul	r24, r22
 478:	80 01       	movw	r16, r0
 47a:	87 9f       	mul	r24, r23
 47c:	10 0d       	add	r17, r0
 47e:	96 9f       	mul	r25, r22
 480:	10 0d       	add	r17, r0
 482:	11 24       	eor	r1, r1
 484:	c8 01       	movw	r24, r16
 486:	0d d0       	rcall	.+26     	; 0x4a2 <malloc>
 488:	ec 01       	movw	r28, r24
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	21 f0       	breq	.+8      	; 0x496 <calloc+0x28>
 48e:	a8 01       	movw	r20, r16
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	27 d1       	rcall	.+590    	; 0x6e4 <memset>
 496:	ce 01       	movw	r24, r28
 498:	df 91       	pop	r29
 49a:	cf 91       	pop	r28
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	08 95       	ret

000004a2 <malloc>:
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	82 30       	cpi	r24, 0x02	; 2
 4ac:	91 05       	cpc	r25, r1
 4ae:	10 f4       	brcc	.+4      	; 0x4b4 <malloc+0x12>
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	e0 91 a2 02 	lds	r30, 0x02A2	; 0x8002a2 <__flp>
 4b8:	f0 91 a3 02 	lds	r31, 0x02A3	; 0x8002a3 <__flp+0x1>
 4bc:	20 e0       	ldi	r18, 0x00	; 0
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	a0 e0       	ldi	r26, 0x00	; 0
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	30 97       	sbiw	r30, 0x00	; 0
 4c6:	19 f1       	breq	.+70     	; 0x50e <malloc+0x6c>
 4c8:	40 81       	ld	r20, Z
 4ca:	51 81       	ldd	r21, Z+1	; 0x01
 4cc:	02 81       	ldd	r16, Z+2	; 0x02
 4ce:	13 81       	ldd	r17, Z+3	; 0x03
 4d0:	48 17       	cp	r20, r24
 4d2:	59 07       	cpc	r21, r25
 4d4:	c8 f0       	brcs	.+50     	; 0x508 <malloc+0x66>
 4d6:	84 17       	cp	r24, r20
 4d8:	95 07       	cpc	r25, r21
 4da:	69 f4       	brne	.+26     	; 0x4f6 <malloc+0x54>
 4dc:	10 97       	sbiw	r26, 0x00	; 0
 4de:	31 f0       	breq	.+12     	; 0x4ec <malloc+0x4a>
 4e0:	12 96       	adiw	r26, 0x02	; 2
 4e2:	0c 93       	st	X, r16
 4e4:	12 97       	sbiw	r26, 0x02	; 2
 4e6:	13 96       	adiw	r26, 0x03	; 3
 4e8:	1c 93       	st	X, r17
 4ea:	27 c0       	rjmp	.+78     	; 0x53a <malloc+0x98>
 4ec:	00 93 a2 02 	sts	0x02A2, r16	; 0x8002a2 <__flp>
 4f0:	10 93 a3 02 	sts	0x02A3, r17	; 0x8002a3 <__flp+0x1>
 4f4:	22 c0       	rjmp	.+68     	; 0x53a <malloc+0x98>
 4f6:	21 15       	cp	r18, r1
 4f8:	31 05       	cpc	r19, r1
 4fa:	19 f0       	breq	.+6      	; 0x502 <malloc+0x60>
 4fc:	42 17       	cp	r20, r18
 4fe:	53 07       	cpc	r21, r19
 500:	18 f4       	brcc	.+6      	; 0x508 <malloc+0x66>
 502:	9a 01       	movw	r18, r20
 504:	bd 01       	movw	r22, r26
 506:	ef 01       	movw	r28, r30
 508:	df 01       	movw	r26, r30
 50a:	f8 01       	movw	r30, r16
 50c:	db cf       	rjmp	.-74     	; 0x4c4 <malloc+0x22>
 50e:	21 15       	cp	r18, r1
 510:	31 05       	cpc	r19, r1
 512:	f9 f0       	breq	.+62     	; 0x552 <malloc+0xb0>
 514:	28 1b       	sub	r18, r24
 516:	39 0b       	sbc	r19, r25
 518:	24 30       	cpi	r18, 0x04	; 4
 51a:	31 05       	cpc	r19, r1
 51c:	80 f4       	brcc	.+32     	; 0x53e <malloc+0x9c>
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	9b 81       	ldd	r25, Y+3	; 0x03
 522:	61 15       	cp	r22, r1
 524:	71 05       	cpc	r23, r1
 526:	21 f0       	breq	.+8      	; 0x530 <malloc+0x8e>
 528:	fb 01       	movw	r30, r22
 52a:	93 83       	std	Z+3, r25	; 0x03
 52c:	82 83       	std	Z+2, r24	; 0x02
 52e:	04 c0       	rjmp	.+8      	; 0x538 <malloc+0x96>
 530:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <__flp+0x1>
 534:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <__flp>
 538:	fe 01       	movw	r30, r28
 53a:	32 96       	adiw	r30, 0x02	; 2
 53c:	44 c0       	rjmp	.+136    	; 0x5c6 <malloc+0x124>
 53e:	fe 01       	movw	r30, r28
 540:	e2 0f       	add	r30, r18
 542:	f3 1f       	adc	r31, r19
 544:	81 93       	st	Z+, r24
 546:	91 93       	st	Z+, r25
 548:	22 50       	subi	r18, 0x02	; 2
 54a:	31 09       	sbc	r19, r1
 54c:	39 83       	std	Y+1, r19	; 0x01
 54e:	28 83       	st	Y, r18
 550:	3a c0       	rjmp	.+116    	; 0x5c6 <malloc+0x124>
 552:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__brkval>
 556:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <__brkval+0x1>
 55a:	23 2b       	or	r18, r19
 55c:	41 f4       	brne	.+16     	; 0x56e <malloc+0xcc>
 55e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 562:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 566:	30 93 a1 02 	sts	0x02A1, r19	; 0x8002a1 <__brkval+0x1>
 56a:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <__brkval>
 56e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 572:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 576:	21 15       	cp	r18, r1
 578:	31 05       	cpc	r19, r1
 57a:	41 f4       	brne	.+16     	; 0x58c <malloc+0xea>
 57c:	2d b7       	in	r18, 0x3d	; 61
 57e:	3e b7       	in	r19, 0x3e	; 62
 580:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 584:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 588:	24 1b       	sub	r18, r20
 58a:	35 0b       	sbc	r19, r21
 58c:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__brkval>
 590:	f0 91 a1 02 	lds	r31, 0x02A1	; 0x8002a1 <__brkval+0x1>
 594:	e2 17       	cp	r30, r18
 596:	f3 07       	cpc	r31, r19
 598:	a0 f4       	brcc	.+40     	; 0x5c2 <malloc+0x120>
 59a:	2e 1b       	sub	r18, r30
 59c:	3f 0b       	sbc	r19, r31
 59e:	28 17       	cp	r18, r24
 5a0:	39 07       	cpc	r19, r25
 5a2:	78 f0       	brcs	.+30     	; 0x5c2 <malloc+0x120>
 5a4:	ac 01       	movw	r20, r24
 5a6:	4e 5f       	subi	r20, 0xFE	; 254
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	24 17       	cp	r18, r20
 5ac:	35 07       	cpc	r19, r21
 5ae:	48 f0       	brcs	.+18     	; 0x5c2 <malloc+0x120>
 5b0:	4e 0f       	add	r20, r30
 5b2:	5f 1f       	adc	r21, r31
 5b4:	50 93 a1 02 	sts	0x02A1, r21	; 0x8002a1 <__brkval+0x1>
 5b8:	40 93 a0 02 	sts	0x02A0, r20	; 0x8002a0 <__brkval>
 5bc:	81 93       	st	Z+, r24
 5be:	91 93       	st	Z+, r25
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <malloc+0x124>
 5c2:	e0 e0       	ldi	r30, 0x00	; 0
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	cf 01       	movw	r24, r30
 5c8:	df 91       	pop	r29
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	08 95       	ret

000005d2 <free>:
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	00 97       	sbiw	r24, 0x00	; 0
 5d8:	09 f4       	brne	.+2      	; 0x5dc <free+0xa>
 5da:	81 c0       	rjmp	.+258    	; 0x6de <free+0x10c>
 5dc:	fc 01       	movw	r30, r24
 5de:	32 97       	sbiw	r30, 0x02	; 2
 5e0:	13 82       	std	Z+3, r1	; 0x03
 5e2:	12 82       	std	Z+2, r1	; 0x02
 5e4:	a0 91 a2 02 	lds	r26, 0x02A2	; 0x8002a2 <__flp>
 5e8:	b0 91 a3 02 	lds	r27, 0x02A3	; 0x8002a3 <__flp+0x1>
 5ec:	10 97       	sbiw	r26, 0x00	; 0
 5ee:	81 f4       	brne	.+32     	; 0x610 <free+0x3e>
 5f0:	20 81       	ld	r18, Z
 5f2:	31 81       	ldd	r19, Z+1	; 0x01
 5f4:	82 0f       	add	r24, r18
 5f6:	93 1f       	adc	r25, r19
 5f8:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__brkval>
 5fc:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <__brkval+0x1>
 600:	28 17       	cp	r18, r24
 602:	39 07       	cpc	r19, r25
 604:	51 f5       	brne	.+84     	; 0x65a <free+0x88>
 606:	f0 93 a1 02 	sts	0x02A1, r31	; 0x8002a1 <__brkval+0x1>
 60a:	e0 93 a0 02 	sts	0x02A0, r30	; 0x8002a0 <__brkval>
 60e:	67 c0       	rjmp	.+206    	; 0x6de <free+0x10c>
 610:	ed 01       	movw	r28, r26
 612:	20 e0       	ldi	r18, 0x00	; 0
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	ce 17       	cp	r28, r30
 618:	df 07       	cpc	r29, r31
 61a:	40 f4       	brcc	.+16     	; 0x62c <free+0x5a>
 61c:	4a 81       	ldd	r20, Y+2	; 0x02
 61e:	5b 81       	ldd	r21, Y+3	; 0x03
 620:	9e 01       	movw	r18, r28
 622:	41 15       	cp	r20, r1
 624:	51 05       	cpc	r21, r1
 626:	f1 f0       	breq	.+60     	; 0x664 <free+0x92>
 628:	ea 01       	movw	r28, r20
 62a:	f5 cf       	rjmp	.-22     	; 0x616 <free+0x44>
 62c:	d3 83       	std	Z+3, r29	; 0x03
 62e:	c2 83       	std	Z+2, r28	; 0x02
 630:	40 81       	ld	r20, Z
 632:	51 81       	ldd	r21, Z+1	; 0x01
 634:	84 0f       	add	r24, r20
 636:	95 1f       	adc	r25, r21
 638:	c8 17       	cp	r28, r24
 63a:	d9 07       	cpc	r29, r25
 63c:	59 f4       	brne	.+22     	; 0x654 <free+0x82>
 63e:	88 81       	ld	r24, Y
 640:	99 81       	ldd	r25, Y+1	; 0x01
 642:	84 0f       	add	r24, r20
 644:	95 1f       	adc	r25, r21
 646:	02 96       	adiw	r24, 0x02	; 2
 648:	91 83       	std	Z+1, r25	; 0x01
 64a:	80 83       	st	Z, r24
 64c:	8a 81       	ldd	r24, Y+2	; 0x02
 64e:	9b 81       	ldd	r25, Y+3	; 0x03
 650:	93 83       	std	Z+3, r25	; 0x03
 652:	82 83       	std	Z+2, r24	; 0x02
 654:	21 15       	cp	r18, r1
 656:	31 05       	cpc	r19, r1
 658:	29 f4       	brne	.+10     	; 0x664 <free+0x92>
 65a:	f0 93 a3 02 	sts	0x02A3, r31	; 0x8002a3 <__flp+0x1>
 65e:	e0 93 a2 02 	sts	0x02A2, r30	; 0x8002a2 <__flp>
 662:	3d c0       	rjmp	.+122    	; 0x6de <free+0x10c>
 664:	e9 01       	movw	r28, r18
 666:	fb 83       	std	Y+3, r31	; 0x03
 668:	ea 83       	std	Y+2, r30	; 0x02
 66a:	49 91       	ld	r20, Y+
 66c:	59 91       	ld	r21, Y+
 66e:	c4 0f       	add	r28, r20
 670:	d5 1f       	adc	r29, r21
 672:	ec 17       	cp	r30, r28
 674:	fd 07       	cpc	r31, r29
 676:	61 f4       	brne	.+24     	; 0x690 <free+0xbe>
 678:	80 81       	ld	r24, Z
 67a:	91 81       	ldd	r25, Z+1	; 0x01
 67c:	84 0f       	add	r24, r20
 67e:	95 1f       	adc	r25, r21
 680:	02 96       	adiw	r24, 0x02	; 2
 682:	e9 01       	movw	r28, r18
 684:	99 83       	std	Y+1, r25	; 0x01
 686:	88 83       	st	Y, r24
 688:	82 81       	ldd	r24, Z+2	; 0x02
 68a:	93 81       	ldd	r25, Z+3	; 0x03
 68c:	9b 83       	std	Y+3, r25	; 0x03
 68e:	8a 83       	std	Y+2, r24	; 0x02
 690:	e0 e0       	ldi	r30, 0x00	; 0
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	12 96       	adiw	r26, 0x02	; 2
 696:	8d 91       	ld	r24, X+
 698:	9c 91       	ld	r25, X
 69a:	13 97       	sbiw	r26, 0x03	; 3
 69c:	00 97       	sbiw	r24, 0x00	; 0
 69e:	19 f0       	breq	.+6      	; 0x6a6 <free+0xd4>
 6a0:	fd 01       	movw	r30, r26
 6a2:	dc 01       	movw	r26, r24
 6a4:	f7 cf       	rjmp	.-18     	; 0x694 <free+0xc2>
 6a6:	8d 91       	ld	r24, X+
 6a8:	9c 91       	ld	r25, X
 6aa:	11 97       	sbiw	r26, 0x01	; 1
 6ac:	9d 01       	movw	r18, r26
 6ae:	2e 5f       	subi	r18, 0xFE	; 254
 6b0:	3f 4f       	sbci	r19, 0xFF	; 255
 6b2:	82 0f       	add	r24, r18
 6b4:	93 1f       	adc	r25, r19
 6b6:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__brkval>
 6ba:	30 91 a1 02 	lds	r19, 0x02A1	; 0x8002a1 <__brkval+0x1>
 6be:	28 17       	cp	r18, r24
 6c0:	39 07       	cpc	r19, r25
 6c2:	69 f4       	brne	.+26     	; 0x6de <free+0x10c>
 6c4:	30 97       	sbiw	r30, 0x00	; 0
 6c6:	29 f4       	brne	.+10     	; 0x6d2 <free+0x100>
 6c8:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <__flp+0x1>
 6cc:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <__flp>
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <free+0x104>
 6d2:	13 82       	std	Z+3, r1	; 0x03
 6d4:	12 82       	std	Z+2, r1	; 0x02
 6d6:	b0 93 a1 02 	sts	0x02A1, r27	; 0x8002a1 <__brkval+0x1>
 6da:	a0 93 a0 02 	sts	0x02A0, r26	; 0x8002a0 <__brkval>
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <memset>:
 6e4:	dc 01       	movw	r26, r24
 6e6:	01 c0       	rjmp	.+2      	; 0x6ea <memset+0x6>
 6e8:	6d 93       	st	X+, r22
 6ea:	41 50       	subi	r20, 0x01	; 1
 6ec:	50 40       	sbci	r21, 0x00	; 0
 6ee:	e0 f7       	brcc	.-8      	; 0x6e8 <memset+0x4>
 6f0:	08 95       	ret

000006f2 <_exit>:
 6f2:	f8 94       	cli

000006f4 <__stop_program>:
 6f4:	ff cf       	rjmp	.-2      	; 0x6f4 <__stop_program>

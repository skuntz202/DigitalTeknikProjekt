
DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000890  00000924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080020a  0080020a  0000092e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019f9  00000000  00000000  00000af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ab  00000000  00000000  000024e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc4  00000000  00000000  00003694  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00004258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a5  00000000  00000000  000044fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d2  00000000  00000000  00004da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005473  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	7e c0       	rjmp	.+252    	; 0x152 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	fa c1       	rjmp	.+1012   	; 0x456 <__vector_24>
  62:	00 00       	nop
  64:	84 c2       	rjmp	.+1288   	; 0x56e <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	94 c2       	rjmp	.+1320   	; 0x596 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	78 c0       	rjmp	.+240    	; 0x166 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e9       	ldi	r30, 0x90	; 144
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 31       	cpi	r26, 0x1C	; 28
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d9 d0       	rcall	.+434    	; 0x2d2 <main>
 120:	b5 c3       	rjmp	.+1898   	; 0x88c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer0>:
	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS0);
	ADCSRB = (1<<ADTS1)|(1<<ADTS0);
}

void ADC_storeSample(){
	adcSample = ADCH;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	84 bd       	out	0x24, r24	; 36
 128:	85 bd       	out	0x25, r24	; 37
 12a:	97 ec       	ldi	r25, 0xC7	; 199
 12c:	97 bd       	out	0x27, r25	; 39
 12e:	98 bd       	out	0x28, r25	; 40
 130:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
 134:	85 bb       	out	0x15, r24	; 21
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret

0000013c <ADC_init>:
 13c:	f3 df       	rcall	.-26     	; 0x124 <initTimer0>
 13e:	80 e6       	ldi	r24, 0x60	; 96
 140:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
 144:	8d ea       	ldi	r24, 0xAD	; 173
 146:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 150:	08 95       	ret

00000152 <__vector_21>:
	} else{
		ADCBufferIndex += 1;
	}*/
}

ISR(TIMER0_COMPA_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
		packetReceiveFlag = 1;
		timer = 0;
	} else{
		timer += 1;
	}*/
}
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <__vector_29>:

ISR(ADC_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
	//ADC_storeSample();
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <input_makePacket>:
#include "input.h"
#include <stdio.h>
#include <stdlib.h>

int input_makePacket(UARTPacket* returnData, char* packet){
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ec 01       	movw	r28, r24
	if(packet[0] != 0x55 || packet[1] != 0xAA){
 18a:	fb 01       	movw	r30, r22
 18c:	90 81       	ld	r25, Z
 18e:	95 35       	cpi	r25, 0x55	; 85
 190:	09 f0       	breq	.+2      	; 0x194 <input_makePacket+0x1a>
 192:	5f c0       	rjmp	.+190    	; 0x252 <input_makePacket+0xd8>
 194:	91 81       	ldd	r25, Z+1	; 0x01
 196:	9a 3a       	cpi	r25, 0xAA	; 170
 198:	09 f0       	breq	.+2      	; 0x19c <input_makePacket+0x22>
 19a:	5e c0       	rjmp	.+188    	; 0x258 <input_makePacket+0xde>
 19c:	8b 01       	movw	r16, r22
		return -1;
	}
	char* temp = (char*)calloc(2, sizeof(char));
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0b d2       	rcall	.+1046   	; 0x5be <calloc>
 1a8:	7c 01       	movw	r14, r24
	if(packet[4] == 0x01){
 1aa:	f8 01       	movw	r30, r16
 1ac:	84 81       	ldd	r24, Z+4	; 0x04
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	c9 f4       	brne	.+50     	; 0x1e4 <input_makePacket+0x6a>
		if(packet[7] != 0x00 || packet[8] != 0x00){
 1b2:	97 81       	ldd	r25, Z+7	; 0x07
 1b4:	91 11       	cpse	r25, r1
 1b6:	53 c0       	rjmp	.+166    	; 0x25e <input_makePacket+0xe4>
 1b8:	90 85       	ldd	r25, Z+8	; 0x08
 1ba:	91 11       	cpse	r25, r1
 1bc:	53 c0       	rjmp	.+166    	; 0x264 <input_makePacket+0xea>
			return -1;
		}
		returnData->type = packet[4];
 1be:	89 83       	std	Y+1, r24	; 0x01
		returnData->data = (char*)calloc(2, sizeof(char));
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fa d1       	rcall	.+1012   	; 0x5be <calloc>
 1ca:	9b 83       	std	Y+3, r25	; 0x03
 1cc:	8a 83       	std	Y+2, r24	; 0x02
		returnData->data[0] = packet[5];
 1ce:	f8 01       	movw	r30, r16
 1d0:	25 81       	ldd	r18, Z+5	; 0x05
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
		returnData->data[1] = packet[6];
 1d6:	f8 01       	movw	r30, r16
 1d8:	26 81       	ldd	r18, Z+6	; 0x06
 1da:	fc 01       	movw	r30, r24
 1dc:	21 83       	std	Z+1, r18	; 0x01
		temp[0] = packet[7];
		temp[1] = packet[8];
		returnData->recordLength = atoi(temp);
	}
	else if(packet[4] == 0x03){}
	return 1;
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	4b c0       	rjmp	.+150    	; 0x27a <input_makePacket+0x100>
		returnData->type = packet[4];
		returnData->data = (char*)calloc(2, sizeof(char));
		returnData->data[0] = packet[5];
		returnData->data[1] = packet[6];
	}
	else if(packet[4] == 0x02){
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	09 f0       	breq	.+2      	; 0x1ea <input_makePacket+0x70>
 1e8:	40 c0       	rjmp	.+128    	; 0x26a <input_makePacket+0xf0>
		if(packet[9] != 0x00 || packet[10] != 0x00){
 1ea:	f8 01       	movw	r30, r16
 1ec:	91 85       	ldd	r25, Z+9	; 0x09
 1ee:	91 11       	cpse	r25, r1
 1f0:	3f c0       	rjmp	.+126    	; 0x270 <input_makePacket+0xf6>
 1f2:	92 85       	ldd	r25, Z+10	; 0x0a
 1f4:	91 11       	cpse	r25, r1
 1f6:	3f c0       	rjmp	.+126    	; 0x276 <input_makePacket+0xfc>
			return -1;
		}
		returnData->type = packet[4];
 1f8:	89 83       	std	Y+1, r24	; 0x01
		returnData->data = (char*)calloc(4, sizeof(char));
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	dd d1       	rcall	.+954    	; 0x5be <calloc>
 204:	9b 83       	std	Y+3, r25	; 0x03
 206:	8a 83       	std	Y+2, r24	; 0x02
		temp[0] = packet[5];
 208:	f8 01       	movw	r30, r16
 20a:	85 81       	ldd	r24, Z+5	; 0x05
 20c:	f7 01       	movw	r30, r14
 20e:	80 83       	st	Z, r24
		temp[1] = packet[6];
 210:	f8 01       	movw	r30, r16
 212:	86 81       	ldd	r24, Z+6	; 0x06
 214:	f7 01       	movw	r30, r14
		returnData->sampleRate = atoi(temp);
 216:	81 83       	std	Z+1, r24	; 0x01
 218:	c7 01       	movw	r24, r14
 21a:	0c d3       	rcall	.+1560   	; 0x834 <atoi>
 21c:	83 70       	andi	r24, 0x03	; 3
 21e:	98 81       	ld	r25, Y
 220:	9c 7f       	andi	r25, 0xFC	; 252
 222:	d9 2e       	mov	r13, r25
 224:	d8 2a       	or	r13, r24
 226:	d8 82       	st	Y, r13
		temp[0] = packet[7];
 228:	f8 01       	movw	r30, r16
 22a:	87 81       	ldd	r24, Z+7	; 0x07
 22c:	f7 01       	movw	r30, r14
 22e:	80 83       	st	Z, r24
		temp[1] = packet[8];
 230:	f8 01       	movw	r30, r16
 232:	80 85       	ldd	r24, Z+8	; 0x08
 234:	f7 01       	movw	r30, r14
		returnData->recordLength = atoi(temp);
 236:	81 83       	std	Z+1, r24	; 0x01
 238:	c7 01       	movw	r24, r14
 23a:	fc d2       	rcall	.+1528   	; 0x834 <atoi>
 23c:	83 70       	andi	r24, 0x03	; 3
 23e:	88 0f       	add	r24, r24
 240:	88 0f       	add	r24, r24
 242:	9d 2d       	mov	r25, r13
 244:	93 7f       	andi	r25, 0xF3	; 243
 246:	d9 2e       	mov	r13, r25
 248:	d8 2a       	or	r13, r24
 24a:	d8 82       	st	Y, r13
	}
	else if(packet[4] == 0x03){}
	return 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	14 c0       	rjmp	.+40     	; 0x27a <input_makePacket+0x100>
#include <stdio.h>
#include <stdlib.h>

int input_makePacket(UARTPacket* returnData, char* packet){
	if(packet[0] != 0x55 || packet[1] != 0xAA){
		return -1;
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	9f ef       	ldi	r25, 0xFF	; 255
 256:	11 c0       	rjmp	.+34     	; 0x27a <input_makePacket+0x100>
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	9f ef       	ldi	r25, 0xFF	; 255
 25c:	0e c0       	rjmp	.+28     	; 0x27a <input_makePacket+0x100>
	}
	char* temp = (char*)calloc(2, sizeof(char));
	if(packet[4] == 0x01){
		if(packet[7] != 0x00 || packet[8] != 0x00){
			return -1;
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	9f ef       	ldi	r25, 0xFF	; 255
 262:	0b c0       	rjmp	.+22     	; 0x27a <input_makePacket+0x100>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	9f ef       	ldi	r25, 0xFF	; 255
 268:	08 c0       	rjmp	.+16     	; 0x27a <input_makePacket+0x100>
		temp[0] = packet[7];
		temp[1] = packet[8];
		returnData->recordLength = atoi(temp);
	}
	else if(packet[4] == 0x03){}
	return 1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	05 c0       	rjmp	.+10     	; 0x27a <input_makePacket+0x100>
		returnData->data[0] = packet[5];
		returnData->data[1] = packet[6];
	}
	else if(packet[4] == 0x02){
		if(packet[9] != 0x00 || packet[10] != 0x00){
			return -1;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	02 c0       	rjmp	.+4      	; 0x27a <input_makePacket+0x100>
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	9f ef       	ldi	r25, 0xFF	; 255
		temp[1] = packet[8];
		returnData->recordLength = atoi(temp);
	}
	else if(packet[4] == 0x03){}
	return 1;
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	1f 91       	pop	r17
 280:	0f 91       	pop	r16
 282:	ff 90       	pop	r15
 284:	ef 90       	pop	r14
 286:	df 90       	pop	r13
 288:	08 95       	ret

0000028a <transmitSPIPacket>:
	UART_transChar(0x00);
	UART_transChar('\n');
	UART_transChar('\r');
	for(int timer = 0; timer < 20; timer++){}
	return 1;
}
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	88 81       	ld	r24, Y
 296:	c3 d0       	rcall	.+390    	; 0x41e <SPI_transmit>
 298:	8b 83       	std	Y+3, r24	; 0x03
 29a:	61 e0       	ldi	r22, 0x01	; 1
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	be d0       	rcall	.+380    	; 0x41e <SPI_transmit>
 2a2:	8b 83       	std	Y+3, r24	; 0x03
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	b9 d0       	rcall	.+370    	; 0x41e <SPI_transmit>
 2ac:	8b 83       	std	Y+3, r24	; 0x03
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <transmitSPIPacket+0x2c>
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	84 31       	cpi	r24, 0x14	; 20
 2b8:	91 05       	cpc	r25, r1
 2ba:	e4 f3       	brlt	.-8      	; 0x2b4 <transmitSPIPacket+0x2a>
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	ad d0       	rcall	.+346    	; 0x41e <SPI_transmit>
 2c4:	8b 83       	std	Y+3, r24	; 0x03
 2c6:	f5 d0       	rcall	.+490    	; 0x4b2 <UART_transChar>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <main>:

int main(void){
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	28 97       	sbiw	r28, 0x08	; 8
 2dc:	0f b6       	in	r0, 0x3f	; 63
 2de:	f8 94       	cli
 2e0:	de bf       	out	0x3e, r29	; 62
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	cd bf       	out	0x3d, r28	; 61
	UARTPacket OscPacket;
	SPIPacket genPacket;
	genPacket.ADDR = 0x02;
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	8d 83       	std	Y+5, r24	; 0x05
	genPacket.DATA = 0x02;
 2ea:	8e 83       	std	Y+6, r24	; 0x06
	genPacket.CRC = 0x00;
 2ec:	1f 82       	std	Y+7, r1	; 0x07
	SPI_init(MASTER);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	7b d0       	rcall	.+246    	; 0x3e8 <SPI_init>
	UART_init();
 2f2:	c5 d0       	rcall	.+394    	; 0x47e <UART_init>
	ADC_init();
 2f4:	23 df       	rcall	.-442    	; 0x13c <ADC_init>
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
	char* data = "SS";
	OscPacket.recordLength = 2;
 2f8:	83 7f       	andi	r24, 0xF3	; 243
 2fa:	88 60       	ori	r24, 0x08	; 8
 2fc:	89 83       	std	Y+1, r24	; 0x01
 2fe:	61 e0       	ldi	r22, 0x01	; 1
	char* temptemp = (char*)calloc(100, sizeof(char));
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	84 e6       	ldi	r24, 0x64	; 100
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	5b d1       	rcall	.+694    	; 0x5be <calloc>
 308:	fc 01       	movw	r30, r24
 30a:	85 e5       	ldi	r24, 0x55	; 85
	temptemp[0] = 0x55;
 30c:	80 83       	st	Z, r24
 30e:	8a ea       	ldi	r24, 0xAA	; 170
	temptemp[1] = 0xAA;
 310:	81 83       	std	Z+1, r24	; 0x01
 312:	12 82       	std	Z+2, r1	; 0x02
	temptemp[2] = 0x00;
 314:	89 e0       	ldi	r24, 0x09	; 9
	temptemp[3] = 0x09;
 316:	83 83       	std	Z+3, r24	; 0x03
 318:	81 e0       	ldi	r24, 0x01	; 1
	temptemp[4] = 0x01;
 31a:	84 83       	std	Z+4, r24	; 0x04
 31c:	15 82       	std	Z+5, r1	; 0x05
	temptemp[5] = 0x00;
 31e:	8f e3       	ldi	r24, 0x3F	; 63
	temptemp[6] = 0x3F;
 320:	86 83       	std	Z+6, r24	; 0x06
 322:	17 82       	std	Z+7, r1	; 0x07
	temptemp[7] = 0x00;
 324:	10 86       	std	Z+8, r1	; 0x08
	temptemp[8] = 0x00;
 326:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <receiveCompleteFlag>
    while(1){
		if(receiveCompleteFlag){
 32a:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <receiveCompleteFlag+0x1>
 32e:	89 2b       	or	r24, r25
 330:	29 f0       	breq	.+10     	; 0x33c <main+0x6a>
			UART_receiveChar();
 332:	cc d0       	rcall	.+408    	; 0x4cc <UART_receiveChar>
 334:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <receiveCompleteFlag+0x1>
			receiveCompleteFlag = 0;
 338:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <receiveCompleteFlag>
 33c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <packetReceiveFlag>
		}
		if(packetReceiveFlag){
 340:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <packetReceiveFlag+0x1>
 344:	89 2b       	or	r24, r25
 346:	79 f3       	breq	.-34     	; 0x326 <main+0x54>
 348:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <buffer>
			input_makePacket(&OscPacket, buffer);
 34c:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <buffer+0x1>
 350:	ce 01       	movw	r24, r28
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	12 df       	rcall	.-476    	; 0x17a <input_makePacket>
 356:	00 91 16 02 	lds	r16, 0x0216	; 0x800216 <buffer>
			char* temp = buffer;
 35a:	10 91 17 02 	lds	r17, 0x0217	; 0x800217 <buffer+0x1>
			buffer = (char*)calloc(100, sizeof(char));
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	84 e6       	ldi	r24, 0x64	; 100
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	2b d1       	rcall	.+598    	; 0x5be <calloc>
 368:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <buffer+0x1>
 36c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <buffer>
			free(temp);
 370:	c8 01       	movw	r24, r16
 372:	d7 d1       	rcall	.+942    	; 0x722 <free>
			packet_makeSPIPacket(&genPacket, &OscPacket);
 374:	be 01       	movw	r22, r28
 376:	6f 5f       	subi	r22, 0xFF	; 255
 378:	7f 4f       	sbci	r23, 0xFF	; 255
 37a:	ce 01       	movw	r24, r28
 37c:	05 96       	adiw	r24, 0x05	; 5
 37e:	08 d0       	rcall	.+16     	; 0x390 <packet_makeSPIPacket>
			transmitSPIPacket(&genPacket);
 380:	ce 01       	movw	r24, r28
 382:	05 96       	adiw	r24, 0x05	; 5
 384:	82 df       	rcall	.-252    	; 0x28a <transmitSPIPacket>
 386:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <packetReceiveFlag+0x1>
			packetReceiveFlag = 0;
 38a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <packetReceiveFlag>
 38e:	cb cf       	rjmp	.-106    	; 0x326 <main+0x54>

00000390 <packet_makeSPIPacket>:
#include "packet.h"
#include <string.h>	

int packet_makeSPIPacket(SPIPacket* packet, UARTPacket* inputPacket){
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	fc 01       	movw	r30, r24
	if(inputPacket->type == 0x01){
 396:	db 01       	movw	r26, r22
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	8c 91       	ld	r24, X
 39c:	11 97       	sbiw	r26, 0x01	; 1
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	d9 f4       	brne	.+54     	; 0x3d8 <packet_makeSPIPacket+0x48>
		//Enter pressed
		if(inputPacket->data[0] == 0x00){
 3a2:	12 96       	adiw	r26, 0x02	; 2
 3a4:	0d 90       	ld	r0, X+
 3a6:	bc 91       	ld	r27, X
 3a8:	a0 2d       	mov	r26, r0
 3aa:	8c 91       	ld	r24, X
 3ac:	81 11       	cpse	r24, r1
 3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <packet_makeSPIPacket+0x28>
			packet->DATA = inputPacket->data[1];
 3b0:	11 96       	adiw	r26, 0x01	; 1
 3b2:	8c 91       	ld	r24, X
 3b4:	81 83       	std	Z+1, r24	; 0x01
 3b6:	10 c0       	rjmp	.+32     	; 0x3d8 <packet_makeSPIPacket+0x48>
		}
		//Select pressed
		else if(inputPacket->data[0] == 0x01){
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	21 f4       	brne	.+8      	; 0x3c4 <packet_makeSPIPacket+0x34>
			packet->ADDR = inputPacket->data[1];
 3bc:	11 96       	adiw	r26, 0x01	; 1
 3be:	8c 91       	ld	r24, X
 3c0:	80 83       	st	Z, r24
 3c2:	0a c0       	rjmp	.+20     	; 0x3d8 <packet_makeSPIPacket+0x48>
		}
		//Run/Stop pressed
		else if(inputPacket->data[0] == 0x02){
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	41 f4       	brne	.+16     	; 0x3d8 <packet_makeSPIPacket+0x48>
			packet->ADDR = 0x04;
 3c8:	84 e0       	ldi	r24, 0x04	; 4
 3ca:	80 83       	st	Z, r24
			packet->DATA = inputPacket->data[1];
 3cc:	eb 01       	movw	r28, r22
 3ce:	aa 81       	ldd	r26, Y+2	; 0x02
 3d0:	bb 81       	ldd	r27, Y+3	; 0x03
 3d2:	11 96       	adiw	r26, 0x01	; 1
 3d4:	8c 91       	ld	r24, X
 3d6:	81 83       	std	Z+1, r24	; 0x01
		//Reset
		else if(inputPacket->data[0] == 0x03){
			
		}
	}
	packet->CRC = 255 - packet->DATA;
 3d8:	91 81       	ldd	r25, Z+1	; 0x01
 3da:	90 95       	com	r25
 3dc:	92 83       	std	Z+2, r25	; 0x02
	return 1;
}
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	08 95       	ret

000003e8 <SPI_init>:

static int SPITransmitFlag = 0;

/* Replace with your library code */
int SPI_init(char role){
	sei();
 3e8:	78 94       	sei
	if(role == MASTER){
 3ea:	81 11       	cpse	r24, r1
 3ec:	0a c0       	rjmp	.+20     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 3ee:	87 e0       	ldi	r24, 0x07	; 7
 3f0:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
 3f6:	92 ed       	ldi	r25, 0xD2	; 210
 3f8:	9c bd       	out	0x2c, r25	; 44
		SPSR = (1<<SPI2X);
 3fa:	8d bd       	out	0x2d, r24	; 45
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 95       	ret
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = (1<<PB0);
		SPCR = (1<<SPIE)|(1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
		SPSR = (1<<SPI2X);
	}
	else if(role == SLAVE){
 402:	8f 3f       	cpi	r24, 0xFF	; 255
 404:	49 f4       	brne	.+18     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		DDRB = (1<<PB3); //Sets MISO as output
 406:	88 e0       	ldi	r24, 0x08	; 8
 408:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE); //Initiates control register
 40e:	80 e4       	ldi	r24, 0x40	; 64
 410:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 41c:	08 95       	ret

0000041e <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	PORTB &= 0b11111110;
 41e:	95 b1       	in	r25, 0x05	; 5
 420:	9e 7f       	andi	r25, 0xFE	; 254
 422:	95 b9       	out	0x05, r25	; 5
	SPDR = transmitionCode;
 424:	8e bd       	out	0x2e, r24	; 46
	while(!SPITransmitFlag){} //Waits for transmition to finish
 426:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <SPITransmitFlag>
 42a:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <SPITransmitFlag+0x1>
 42e:	89 2b       	or	r24, r25
 430:	d1 f3       	breq	.-12     	; 0x426 <SPI_transmit+0x8>
	SPITransmitFlag = 0;
 432:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <SPITransmitFlag+0x1>
 436:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <SPITransmitFlag>
	if(toggleRecieve == 1){
 43a:	61 30       	cpi	r22, 0x01	; 1
 43c:	71 05       	cpc	r23, r1
 43e:	11 f4       	brne	.+4      	; 0x444 <SPI_transmit+0x26>
		return SPDR;
 440:	8e b5       	in	r24, 0x2e	; 46
 442:	08 95       	ret
	}
	else if(toggleRecieve == 0){
 444:	67 2b       	or	r22, r23
 446:	29 f0       	breq	.+10     	; 0x452 <SPI_transmit+0x34>
		return 1;
	}
	PORTB |= 0b00000001;
 448:	85 b1       	in	r24, 0x05	; 5
 44a:	81 60       	ori	r24, 0x01	; 1
 44c:	85 b9       	out	0x05, r24	; 5
	return 0;
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret
	SPITransmitFlag = 0;
	if(toggleRecieve == 1){
		return SPDR;
	}
	else if(toggleRecieve == 0){
		return 1;
 452:	81 e0       	ldi	r24, 0x01	; 1
	}
	PORTB |= 0b00000001;
	return 0;
}
 454:	08 95       	ret

00000456 <__vector_24>:

ISR(SPI_STC_vect){
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
	SPITransmitFlag = 1;
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <SPITransmitFlag+0x1>
 46c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <SPITransmitFlag>
}
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	0f 90       	pop	r0
 476:	0f be       	out	0x3f, r0	; 63
 478:	0f 90       	pop	r0
 47a:	1f 90       	pop	r1
 47c:	18 95       	reti

0000047e <UART_init>:
	if(RX == '\r'){
		carriageReturn = 1;
	}
	else if(carriageReturn && RX == '\n'){
		receiveComplete = 1;
		bufferIndex = 0;
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	84 e6       	ldi	r24, 0x64	; 100
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	9b d0       	rcall	.+310    	; 0x5be <calloc>
 488:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <buffer+0x1>
 48c:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <buffer>
 490:	78 94       	sei
 492:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 496:	83 e3       	ldi	r24, 0x33	; 51
 498:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 49c:	e1 ec       	ldi	r30, 0xC1	; 193
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	88 6d       	ori	r24, 0xD8	; 216
 4a4:	80 83       	st	Z, r24
 4a6:	e2 ec       	ldi	r30, 0xC2	; 194
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	86 60       	ori	r24, 0x06	; 6
 4ae:	80 83       	st	Z, r24
 4b0:	08 95       	ret

000004b2 <UART_transChar>:
 4b2:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <transmitComplete>
 4b6:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <transmitComplete+0x1>
 4ba:	23 2b       	or	r18, r19
 4bc:	d1 f3       	breq	.-12     	; 0x4b2 <UART_transChar>
 4be:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <transmitComplete+0x1>
 4c2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <transmitComplete>
 4c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4ca:	08 95       	ret

000004cc <UART_receiveChar>:
	}
}

int UART_receiveChar(){
	RX = UDR0;
 4cc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4d0:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <RX>
	buffer[bufferIndex] = RX;
 4d4:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bufferIndex>
 4d8:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <bufferIndex+0x1>
 4dc:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <buffer>
 4e0:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <buffer+0x1>
 4e4:	e8 0f       	add	r30, r24
 4e6:	f9 1f       	adc	r31, r25
 4e8:	20 83       	st	Z, r18
	if(bufferIndex == 3){
 4ea:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bufferIndex>
 4ee:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <bufferIndex+0x1>
 4f2:	03 97       	sbiw	r24, 0x03	; 3
 4f4:	c1 f4       	brne	.+48     	; 0x526 <UART_receiveChar+0x5a>
		if(buffer[0] == 0x55 && buffer[1] == 0xAA){
 4f6:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <buffer>
 4fa:	f0 91 17 02 	lds	r31, 0x0217	; 0x800217 <buffer+0x1>
 4fe:	80 81       	ld	r24, Z
 500:	85 35       	cpi	r24, 0x55	; 85
 502:	89 f4       	brne	.+34     	; 0x526 <UART_receiveChar+0x5a>
 504:	81 81       	ldd	r24, Z+1	; 0x01
 506:	8a 3a       	cpi	r24, 0xAA	; 170
 508:	71 f4       	brne	.+28     	; 0x526 <UART_receiveChar+0x5a>
			tempBuffer[0] = buffer[2];
 50a:	a4 e1       	ldi	r26, 0x14	; 20
 50c:	b2 e0       	ldi	r27, 0x02	; 2
 50e:	82 81       	ldd	r24, Z+2	; 0x02
 510:	8c 93       	st	X, r24
			tempBuffer[1] = buffer[3];
 512:	83 81       	ldd	r24, Z+3	; 0x03
 514:	11 96       	adiw	r26, 0x01	; 1
 516:	8c 93       	st	X, r24
 518:	11 97       	sbiw	r26, 0x01	; 1
			packetLength = atoi(tempBuffer);
 51a:	cd 01       	movw	r24, r26
 51c:	8b d1       	rcall	.+790    	; 0x834 <atoi>
 51e:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x1>
 522:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end>
		}
	}
	if(bufferIndex == packetLength && packetLength != 0){
 526:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <bufferIndex>
 52a:	30 91 13 02 	lds	r19, 0x0213	; 0x800213 <bufferIndex+0x1>
 52e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 532:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 536:	28 17       	cp	r18, r24
 538:	39 07       	cpc	r19, r25
 53a:	69 f4       	brne	.+26     	; 0x556 <UART_receiveChar+0x8a>
 53c:	89 2b       	or	r24, r25
 53e:	59 f0       	breq	.+22     	; 0x556 <UART_receiveChar+0x8a>
		packetReceiveFlag = 1;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <packetReceiveFlag+0x1>
 548:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <packetReceiveFlag>
		bufferIndex = 0;
 54c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <bufferIndex+0x1>
 550:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <bufferIndex>
		return 1;
 554:	09 c0       	rjmp	.+18     	; 0x568 <UART_receiveChar+0x9c>
	}
	bufferIndex += 1;
 556:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <bufferIndex>
 55a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <bufferIndex+0x1>
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <bufferIndex+0x1>
 564:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <bufferIndex>
	//checkCarriageReturn();
	return 1;
}
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	08 95       	ret

0000056e <__vector_25>:


ISR(USART0_RX_vect){
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	0f 92       	push	r0
 576:	11 24       	eor	r1, r1
 578:	8f 93       	push	r24
 57a:	9f 93       	push	r25
	receiveCompleteFlag = 1;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <receiveCompleteFlag+0x1>
 584:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <receiveCompleteFlag>
};
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	0f 90       	pop	r0
 58e:	0f be       	out	0x3f, r0	; 63
 590:	0f 90       	pop	r0
 592:	1f 90       	pop	r1
 594:	18 95       	reti

00000596 <__vector_27>:

ISR(USART0_TX_vect){
 596:	1f 92       	push	r1
 598:	0f 92       	push	r0
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	0f 92       	push	r0
 59e:	11 24       	eor	r1, r1
 5a0:	8f 93       	push	r24
 5a2:	9f 93       	push	r25
	transmitComplete = 1;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <transmitComplete+0x1>
 5ac:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <transmitComplete>
 5b0:	9f 91       	pop	r25
 5b2:	8f 91       	pop	r24
 5b4:	0f 90       	pop	r0
 5b6:	0f be       	out	0x3f, r0	; 63
 5b8:	0f 90       	pop	r0
 5ba:	1f 90       	pop	r1
 5bc:	18 95       	reti

000005be <calloc>:
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	86 9f       	mul	r24, r22
 5c8:	80 01       	movw	r16, r0
 5ca:	87 9f       	mul	r24, r23
 5cc:	10 0d       	add	r17, r0
 5ce:	96 9f       	mul	r25, r22
 5d0:	10 0d       	add	r17, r0
 5d2:	11 24       	eor	r1, r1
 5d4:	c8 01       	movw	r24, r16
 5d6:	0d d0       	rcall	.+26     	; 0x5f2 <malloc>
 5d8:	ec 01       	movw	r28, r24
 5da:	00 97       	sbiw	r24, 0x00	; 0
 5dc:	21 f0       	breq	.+8      	; 0x5e6 <calloc+0x28>
 5de:	a8 01       	movw	r20, r16
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	44 d1       	rcall	.+648    	; 0x86e <memset>
 5e6:	ce 01       	movw	r24, r28
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	08 95       	ret

000005f2 <malloc>:
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	82 30       	cpi	r24, 0x02	; 2
 5fc:	91 05       	cpc	r25, r1
 5fe:	10 f4       	brcc	.+4      	; 0x604 <malloc+0x12>
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__flp>
 608:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <__flp+0x1>
 60c:	20 e0       	ldi	r18, 0x00	; 0
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	a0 e0       	ldi	r26, 0x00	; 0
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	30 97       	sbiw	r30, 0x00	; 0
 616:	19 f1       	breq	.+70     	; 0x65e <malloc+0x6c>
 618:	40 81       	ld	r20, Z
 61a:	51 81       	ldd	r21, Z+1	; 0x01
 61c:	02 81       	ldd	r16, Z+2	; 0x02
 61e:	13 81       	ldd	r17, Z+3	; 0x03
 620:	48 17       	cp	r20, r24
 622:	59 07       	cpc	r21, r25
 624:	c8 f0       	brcs	.+50     	; 0x658 <malloc+0x66>
 626:	84 17       	cp	r24, r20
 628:	95 07       	cpc	r25, r21
 62a:	69 f4       	brne	.+26     	; 0x646 <malloc+0x54>
 62c:	10 97       	sbiw	r26, 0x00	; 0
 62e:	31 f0       	breq	.+12     	; 0x63c <malloc+0x4a>
 630:	12 96       	adiw	r26, 0x02	; 2
 632:	0c 93       	st	X, r16
 634:	12 97       	sbiw	r26, 0x02	; 2
 636:	13 96       	adiw	r26, 0x03	; 3
 638:	1c 93       	st	X, r17
 63a:	27 c0       	rjmp	.+78     	; 0x68a <malloc+0x98>
 63c:	00 93 1a 02 	sts	0x021A, r16	; 0x80021a <__flp>
 640:	10 93 1b 02 	sts	0x021B, r17	; 0x80021b <__flp+0x1>
 644:	22 c0       	rjmp	.+68     	; 0x68a <malloc+0x98>
 646:	21 15       	cp	r18, r1
 648:	31 05       	cpc	r19, r1
 64a:	19 f0       	breq	.+6      	; 0x652 <malloc+0x60>
 64c:	42 17       	cp	r20, r18
 64e:	53 07       	cpc	r21, r19
 650:	18 f4       	brcc	.+6      	; 0x658 <malloc+0x66>
 652:	9a 01       	movw	r18, r20
 654:	bd 01       	movw	r22, r26
 656:	ef 01       	movw	r28, r30
 658:	df 01       	movw	r26, r30
 65a:	f8 01       	movw	r30, r16
 65c:	db cf       	rjmp	.-74     	; 0x614 <malloc+0x22>
 65e:	21 15       	cp	r18, r1
 660:	31 05       	cpc	r19, r1
 662:	f9 f0       	breq	.+62     	; 0x6a2 <malloc+0xb0>
 664:	28 1b       	sub	r18, r24
 666:	39 0b       	sbc	r19, r25
 668:	24 30       	cpi	r18, 0x04	; 4
 66a:	31 05       	cpc	r19, r1
 66c:	80 f4       	brcc	.+32     	; 0x68e <malloc+0x9c>
 66e:	8a 81       	ldd	r24, Y+2	; 0x02
 670:	9b 81       	ldd	r25, Y+3	; 0x03
 672:	61 15       	cp	r22, r1
 674:	71 05       	cpc	r23, r1
 676:	21 f0       	breq	.+8      	; 0x680 <malloc+0x8e>
 678:	fb 01       	movw	r30, r22
 67a:	93 83       	std	Z+3, r25	; 0x03
 67c:	82 83       	std	Z+2, r24	; 0x02
 67e:	04 c0       	rjmp	.+8      	; 0x688 <malloc+0x96>
 680:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <__flp+0x1>
 684:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <__flp>
 688:	fe 01       	movw	r30, r28
 68a:	32 96       	adiw	r30, 0x02	; 2
 68c:	44 c0       	rjmp	.+136    	; 0x716 <malloc+0x124>
 68e:	fe 01       	movw	r30, r28
 690:	e2 0f       	add	r30, r18
 692:	f3 1f       	adc	r31, r19
 694:	81 93       	st	Z+, r24
 696:	91 93       	st	Z+, r25
 698:	22 50       	subi	r18, 0x02	; 2
 69a:	31 09       	sbc	r19, r1
 69c:	39 83       	std	Y+1, r19	; 0x01
 69e:	28 83       	st	Y, r18
 6a0:	3a c0       	rjmp	.+116    	; 0x716 <malloc+0x124>
 6a2:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
 6a6:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
 6aa:	23 2b       	or	r18, r19
 6ac:	41 f4       	brne	.+16     	; 0x6be <malloc+0xcc>
 6ae:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 6b2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 6b6:	30 93 19 02 	sts	0x0219, r19	; 0x800219 <__brkval+0x1>
 6ba:	20 93 18 02 	sts	0x0218, r18	; 0x800218 <__brkval>
 6be:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 6c2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 6c6:	21 15       	cp	r18, r1
 6c8:	31 05       	cpc	r19, r1
 6ca:	41 f4       	brne	.+16     	; 0x6dc <malloc+0xea>
 6cc:	2d b7       	in	r18, 0x3d	; 61
 6ce:	3e b7       	in	r19, 0x3e	; 62
 6d0:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 6d4:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 6d8:	24 1b       	sub	r18, r20
 6da:	35 0b       	sbc	r19, r21
 6dc:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <__brkval>
 6e0:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <__brkval+0x1>
 6e4:	e2 17       	cp	r30, r18
 6e6:	f3 07       	cpc	r31, r19
 6e8:	a0 f4       	brcc	.+40     	; 0x712 <malloc+0x120>
 6ea:	2e 1b       	sub	r18, r30
 6ec:	3f 0b       	sbc	r19, r31
 6ee:	28 17       	cp	r18, r24
 6f0:	39 07       	cpc	r19, r25
 6f2:	78 f0       	brcs	.+30     	; 0x712 <malloc+0x120>
 6f4:	ac 01       	movw	r20, r24
 6f6:	4e 5f       	subi	r20, 0xFE	; 254
 6f8:	5f 4f       	sbci	r21, 0xFF	; 255
 6fa:	24 17       	cp	r18, r20
 6fc:	35 07       	cpc	r19, r21
 6fe:	48 f0       	brcs	.+18     	; 0x712 <malloc+0x120>
 700:	4e 0f       	add	r20, r30
 702:	5f 1f       	adc	r21, r31
 704:	50 93 19 02 	sts	0x0219, r21	; 0x800219 <__brkval+0x1>
 708:	40 93 18 02 	sts	0x0218, r20	; 0x800218 <__brkval>
 70c:	81 93       	st	Z+, r24
 70e:	91 93       	st	Z+, r25
 710:	02 c0       	rjmp	.+4      	; 0x716 <malloc+0x124>
 712:	e0 e0       	ldi	r30, 0x00	; 0
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	cf 01       	movw	r24, r30
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	0f 91       	pop	r16
 720:	08 95       	ret

00000722 <free>:
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	00 97       	sbiw	r24, 0x00	; 0
 728:	09 f4       	brne	.+2      	; 0x72c <free+0xa>
 72a:	81 c0       	rjmp	.+258    	; 0x82e <free+0x10c>
 72c:	fc 01       	movw	r30, r24
 72e:	32 97       	sbiw	r30, 0x02	; 2
 730:	13 82       	std	Z+3, r1	; 0x03
 732:	12 82       	std	Z+2, r1	; 0x02
 734:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <__flp>
 738:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <__flp+0x1>
 73c:	10 97       	sbiw	r26, 0x00	; 0
 73e:	81 f4       	brne	.+32     	; 0x760 <free+0x3e>
 740:	20 81       	ld	r18, Z
 742:	31 81       	ldd	r19, Z+1	; 0x01
 744:	82 0f       	add	r24, r18
 746:	93 1f       	adc	r25, r19
 748:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
 74c:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
 750:	28 17       	cp	r18, r24
 752:	39 07       	cpc	r19, r25
 754:	51 f5       	brne	.+84     	; 0x7aa <free+0x88>
 756:	f0 93 19 02 	sts	0x0219, r31	; 0x800219 <__brkval+0x1>
 75a:	e0 93 18 02 	sts	0x0218, r30	; 0x800218 <__brkval>
 75e:	67 c0       	rjmp	.+206    	; 0x82e <free+0x10c>
 760:	ed 01       	movw	r28, r26
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	ce 17       	cp	r28, r30
 768:	df 07       	cpc	r29, r31
 76a:	40 f4       	brcc	.+16     	; 0x77c <free+0x5a>
 76c:	4a 81       	ldd	r20, Y+2	; 0x02
 76e:	5b 81       	ldd	r21, Y+3	; 0x03
 770:	9e 01       	movw	r18, r28
 772:	41 15       	cp	r20, r1
 774:	51 05       	cpc	r21, r1
 776:	f1 f0       	breq	.+60     	; 0x7b4 <free+0x92>
 778:	ea 01       	movw	r28, r20
 77a:	f5 cf       	rjmp	.-22     	; 0x766 <free+0x44>
 77c:	d3 83       	std	Z+3, r29	; 0x03
 77e:	c2 83       	std	Z+2, r28	; 0x02
 780:	40 81       	ld	r20, Z
 782:	51 81       	ldd	r21, Z+1	; 0x01
 784:	84 0f       	add	r24, r20
 786:	95 1f       	adc	r25, r21
 788:	c8 17       	cp	r28, r24
 78a:	d9 07       	cpc	r29, r25
 78c:	59 f4       	brne	.+22     	; 0x7a4 <free+0x82>
 78e:	88 81       	ld	r24, Y
 790:	99 81       	ldd	r25, Y+1	; 0x01
 792:	84 0f       	add	r24, r20
 794:	95 1f       	adc	r25, r21
 796:	02 96       	adiw	r24, 0x02	; 2
 798:	91 83       	std	Z+1, r25	; 0x01
 79a:	80 83       	st	Z, r24
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	9b 81       	ldd	r25, Y+3	; 0x03
 7a0:	93 83       	std	Z+3, r25	; 0x03
 7a2:	82 83       	std	Z+2, r24	; 0x02
 7a4:	21 15       	cp	r18, r1
 7a6:	31 05       	cpc	r19, r1
 7a8:	29 f4       	brne	.+10     	; 0x7b4 <free+0x92>
 7aa:	f0 93 1b 02 	sts	0x021B, r31	; 0x80021b <__flp+0x1>
 7ae:	e0 93 1a 02 	sts	0x021A, r30	; 0x80021a <__flp>
 7b2:	3d c0       	rjmp	.+122    	; 0x82e <free+0x10c>
 7b4:	e9 01       	movw	r28, r18
 7b6:	fb 83       	std	Y+3, r31	; 0x03
 7b8:	ea 83       	std	Y+2, r30	; 0x02
 7ba:	49 91       	ld	r20, Y+
 7bc:	59 91       	ld	r21, Y+
 7be:	c4 0f       	add	r28, r20
 7c0:	d5 1f       	adc	r29, r21
 7c2:	ec 17       	cp	r30, r28
 7c4:	fd 07       	cpc	r31, r29
 7c6:	61 f4       	brne	.+24     	; 0x7e0 <free+0xbe>
 7c8:	80 81       	ld	r24, Z
 7ca:	91 81       	ldd	r25, Z+1	; 0x01
 7cc:	84 0f       	add	r24, r20
 7ce:	95 1f       	adc	r25, r21
 7d0:	02 96       	adiw	r24, 0x02	; 2
 7d2:	e9 01       	movw	r28, r18
 7d4:	99 83       	std	Y+1, r25	; 0x01
 7d6:	88 83       	st	Y, r24
 7d8:	82 81       	ldd	r24, Z+2	; 0x02
 7da:	93 81       	ldd	r25, Z+3	; 0x03
 7dc:	9b 83       	std	Y+3, r25	; 0x03
 7de:	8a 83       	std	Y+2, r24	; 0x02
 7e0:	e0 e0       	ldi	r30, 0x00	; 0
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	12 96       	adiw	r26, 0x02	; 2
 7e6:	8d 91       	ld	r24, X+
 7e8:	9c 91       	ld	r25, X
 7ea:	13 97       	sbiw	r26, 0x03	; 3
 7ec:	00 97       	sbiw	r24, 0x00	; 0
 7ee:	19 f0       	breq	.+6      	; 0x7f6 <free+0xd4>
 7f0:	fd 01       	movw	r30, r26
 7f2:	dc 01       	movw	r26, r24
 7f4:	f7 cf       	rjmp	.-18     	; 0x7e4 <free+0xc2>
 7f6:	8d 91       	ld	r24, X+
 7f8:	9c 91       	ld	r25, X
 7fa:	11 97       	sbiw	r26, 0x01	; 1
 7fc:	9d 01       	movw	r18, r26
 7fe:	2e 5f       	subi	r18, 0xFE	; 254
 800:	3f 4f       	sbci	r19, 0xFF	; 255
 802:	82 0f       	add	r24, r18
 804:	93 1f       	adc	r25, r19
 806:	20 91 18 02 	lds	r18, 0x0218	; 0x800218 <__brkval>
 80a:	30 91 19 02 	lds	r19, 0x0219	; 0x800219 <__brkval+0x1>
 80e:	28 17       	cp	r18, r24
 810:	39 07       	cpc	r19, r25
 812:	69 f4       	brne	.+26     	; 0x82e <free+0x10c>
 814:	30 97       	sbiw	r30, 0x00	; 0
 816:	29 f4       	brne	.+10     	; 0x822 <free+0x100>
 818:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <__flp+0x1>
 81c:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__flp>
 820:	02 c0       	rjmp	.+4      	; 0x826 <free+0x104>
 822:	13 82       	std	Z+3, r1	; 0x03
 824:	12 82       	std	Z+2, r1	; 0x02
 826:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <__brkval+0x1>
 82a:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <__brkval>
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <atoi>:
 834:	fc 01       	movw	r30, r24
 836:	88 27       	eor	r24, r24
 838:	99 27       	eor	r25, r25
 83a:	e8 94       	clt
 83c:	21 91       	ld	r18, Z+
 83e:	20 32       	cpi	r18, 0x20	; 32
 840:	e9 f3       	breq	.-6      	; 0x83c <atoi+0x8>
 842:	29 30       	cpi	r18, 0x09	; 9
 844:	10 f0       	brcs	.+4      	; 0x84a <atoi+0x16>
 846:	2e 30       	cpi	r18, 0x0E	; 14
 848:	c8 f3       	brcs	.-14     	; 0x83c <atoi+0x8>
 84a:	2b 32       	cpi	r18, 0x2B	; 43
 84c:	39 f0       	breq	.+14     	; 0x85c <atoi+0x28>
 84e:	2d 32       	cpi	r18, 0x2D	; 45
 850:	31 f4       	brne	.+12     	; 0x85e <atoi+0x2a>
 852:	68 94       	set
 854:	03 c0       	rjmp	.+6      	; 0x85c <atoi+0x28>
 856:	12 d0       	rcall	.+36     	; 0x87c <__mulhi_const_10>
 858:	82 0f       	add	r24, r18
 85a:	91 1d       	adc	r25, r1
 85c:	21 91       	ld	r18, Z+
 85e:	20 53       	subi	r18, 0x30	; 48
 860:	2a 30       	cpi	r18, 0x0A	; 10
 862:	c8 f3       	brcs	.-14     	; 0x856 <atoi+0x22>
 864:	1e f4       	brtc	.+6      	; 0x86c <atoi+0x38>
 866:	90 95       	com	r25
 868:	81 95       	neg	r24
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	08 95       	ret

0000086e <memset>:
 86e:	dc 01       	movw	r26, r24
 870:	01 c0       	rjmp	.+2      	; 0x874 <memset+0x6>
 872:	6d 93       	st	X+, r22
 874:	41 50       	subi	r20, 0x01	; 1
 876:	50 40       	sbci	r21, 0x00	; 0
 878:	e0 f7       	brcc	.-8      	; 0x872 <memset+0x4>
 87a:	08 95       	ret

0000087c <__mulhi_const_10>:
 87c:	7a e0       	ldi	r23, 0x0A	; 10
 87e:	97 9f       	mul	r25, r23
 880:	90 2d       	mov	r25, r0
 882:	87 9f       	mul	r24, r23
 884:	80 2d       	mov	r24, r0
 886:	91 0d       	add	r25, r1
 888:	11 24       	eor	r1, r1
 88a:	08 95       	ret

0000088c <_exit>:
 88c:	f8 94       	cli

0000088e <__stop_program>:
 88e:	ff cf       	rjmp	.-2      	; 0x88e <__stop_program>

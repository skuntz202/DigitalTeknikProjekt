
DigitalTeknikProjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  000008cc  00000960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800236  00800236  00000996  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018c1  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111e  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ff  00000000  00000000  00003527  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000818  00000000  00000000  000041a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000476  00000000  00000000  000049bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00004e32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	87 c0       	rjmp	.+270    	; 0x164 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0d c2       	rjmp	.+1050   	; 0x47c <__vector_24>
  62:	00 00       	nop
  64:	a2 c2       	rjmp	.+1348   	; 0x5aa <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	b2 c2       	rjmp	.+1380   	; 0x5d2 <__vector_27>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	81 c0       	rjmp	.+258    	; 0x178 <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ec       	ldi	r30, 0xCC	; 204
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e3       	ldi	r26, 0x36	; 54
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 3a       	cpi	r26, 0xA8	; 168
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4c d1       	rcall	.+664    	; 0x3b8 <main>
 120:	d3 c3       	rjmp	.+1958   	; 0x8c8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer0>:
int ADCBufferIndex = 0;
float voltage = 0.f;
int ADCSampleFlag = 0;

int initTimer0(){
	TCCR0A = (1<<WGM01);	    //Sets mode to CTC
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS02);			//Sets prescaler to 512
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	95 bd       	out	0x25, r25	; 37
	OCR0A =	0x7C;				//Sets compare value to 124
 12c:	9c e7       	ldi	r25, 0x7C	; 124
 12e:	97 bd       	out	0x27, r25	; 39
	OCR0B =	0x7C;
 130:	98 bd       	out	0x28, r25	; 40
	TIMSK0 = (1<<OCIE0A);
 132:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
	TIFR0 = (1<<OCF0A);
 136:	85 bb       	out	0x15, r24	; 21
	return 1;
}
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	08 95       	ret

0000013e <ADC_init>:

void ADC_init(){
	initTimer0();
 13e:	f2 df       	rcall	.-28     	; 0x124 <initTimer0>
	ADMUX = (1<<REFS0)|(1<<ADLAR);
 140:	80 e6       	ldi	r24, 0x60	; 96
 142:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS0);
 146:	8d ea       	ldi	r24, 0xAD	; 173
 148:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
	ADCSRB = (1<<ADTS1)|(1<<ADTS0);
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
 152:	08 95       	ret

00000154 <ADC_storeSample>:
}

void ADC_storeSample(){
	adcSample = ADCH;
 154:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__data_end+0x1>
 15e:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__data_end>
 162:	08 95       	ret

00000164 <__vector_21>:
	} else{
		ADCBufferIndex += 1;
	}*/
}

ISR(TIMER0_COMPA_vect){
 164:	1f 92       	push	r1
 166:	0f 92       	push	r0
 168:	0f b6       	in	r0, 0x3f	; 63
 16a:	0f 92       	push	r0
 16c:	11 24       	eor	r1, r1
	
}
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <__vector_29>:

ISR(ADC_vect){
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	0b b6       	in	r0, 0x3b	; 59
 184:	0f 92       	push	r0
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
	ADC_storeSample();
 19e:	da df       	rcall	.-76     	; 0x154 <ADC_storeSample>
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0b be       	out	0x3b, r0	; 59
 1bc:	0f 90       	pop	r0
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	0f 90       	pop	r0
 1c2:	1f 90       	pop	r1
 1c4:	18 95       	reti

000001c6 <input_checkPacket>:
#include "input.h"
#include <stdio.h>
#include <stdlib.h>

UARTPacket input_checkPacket(char* packet){
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	8c 01       	movw	r16, r24
	UARTPacket returnData;
	returnData.type = packet[4];
 1ce:	dc 01       	movw	r26, r24
 1d0:	14 96       	adiw	r26, 0x04	; 4
 1d2:	cc 91       	ld	r28, X
	if(returnData.type == 0x01){
 1d4:	c1 30       	cpi	r28, 0x01	; 1
 1d6:	79 f4       	brne	.+30     	; 0x1f6 <input_checkPacket+0x30>
		returnData.data = (char*)calloc(2, sizeof(char));
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0c d2       	rcall	.+1048   	; 0x5fa <calloc>
 1e2:	78 2f       	mov	r23, r24
 1e4:	29 2f       	mov	r18, r25
		returnData.data[0] = packet[5];
 1e6:	f8 01       	movw	r30, r16
 1e8:	35 81       	ldd	r19, Z+5	; 0x05
 1ea:	dc 01       	movw	r26, r24
 1ec:	3c 93       	st	X, r19
		returnData.data[1] = packet[6];
 1ee:	36 81       	ldd	r19, Z+6	; 0x06
 1f0:	11 96       	adiw	r26, 0x01	; 1
 1f2:	3c 93       	st	X, r19
 1f4:	1a c0       	rjmp	.+52     	; 0x22a <input_checkPacket+0x64>
	}
	else if(returnData.type == 0x02){
 1f6:	c2 30       	cpi	r28, 0x02	; 2
 1f8:	c1 f4       	brne	.+48     	; 0x22a <input_checkPacket+0x64>
		returnData.data = (char*)calloc(4, sizeof(char));
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	fb d1       	rcall	.+1014   	; 0x5fa <calloc>
 204:	fc 01       	movw	r30, r24
 206:	78 2f       	mov	r23, r24
 208:	2f 2f       	mov	r18, r31
		returnData.data[0] = packet[5];
 20a:	d8 01       	movw	r26, r16
 20c:	15 96       	adiw	r26, 0x05	; 5
 20e:	8c 91       	ld	r24, X
 210:	15 97       	sbiw	r26, 0x05	; 5
 212:	80 83       	st	Z, r24
		returnData.data[1] = packet[6];
 214:	16 96       	adiw	r26, 0x06	; 6
 216:	8c 91       	ld	r24, X
 218:	16 97       	sbiw	r26, 0x06	; 6
 21a:	81 83       	std	Z+1, r24	; 0x01
		returnData.data[2] = packet[7];
 21c:	17 96       	adiw	r26, 0x07	; 7
 21e:	8c 91       	ld	r24, X
 220:	17 97       	sbiw	r26, 0x07	; 7
 222:	82 83       	std	Z+2, r24	; 0x02
		returnData.data[3] = packet[8];
 224:	18 96       	adiw	r26, 0x08	; 8
 226:	8c 91       	ld	r24, X
 228:	83 83       	std	Z+3, r24	; 0x03
	}
	else if(returnData.type == 0x03){}
	return returnData;
 22a:	6c 2f       	mov	r22, r28
 22c:	82 2f       	mov	r24, r18
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <transmitPacket>:
#include "input.h"

#define F_CPU 16000000UL
#include <util/delay.h>

int transmitPacket(SPIPacket packet){
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	96 2f       	mov	r25, r22
 23c:	c7 2f       	mov	r28, r23
 23e:	d8 2f       	mov	r29, r24
	//Transmits address
	packet.ACK = SPI_transmit(packet.ADDR, 1);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	89 2f       	mov	r24, r25
 246:	ff d0       	rcall	.+510    	; 0x446 <SPI_transmit>
	if(packet.ACK == 0x03){
 248:	83 30       	cpi	r24, 0x03	; 3
 24a:	41 f4       	brne	.+16     	; 0x25c <transmitPacket+0x26>
		UART_transStr("ERR: 101", 1);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	89 e0       	ldi	r24, 0x09	; 9
 252:	92 e0       	ldi	r25, 0x02	; 2
 254:	3b d1       	rcall	.+630    	; 0x4cc <UART_transStr>
		return -1;
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	9f ef       	ldi	r25, 0xFF	; 255
 25a:	ab c0       	rjmp	.+342    	; 0x3b2 <transmitPacket+0x17c>
	}
	else if(packet.ACK == 0x02){
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	41 f4       	brne	.+16     	; 0x270 <transmitPacket+0x3a>
		UART_transStr("ERR: 102", 1);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	70 e0       	ldi	r23, 0x00	; 0
 264:	82 e1       	ldi	r24, 0x12	; 18
 266:	92 e0       	ldi	r25, 0x02	; 2
 268:	31 d1       	rcall	.+610    	; 0x4cc <UART_transStr>
		return -1;
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	9f ef       	ldi	r25, 0xFF	; 255
 26e:	a1 c0       	rjmp	.+322    	; 0x3b2 <transmitPacket+0x17c>
	}
	else if(packet.ACK == 0x01){
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	41 f4       	brne	.+16     	; 0x284 <transmitPacket+0x4e>
		UART_transStr("ERR: 103", 1);
 274:	61 e0       	ldi	r22, 0x01	; 1
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	8b e1       	ldi	r24, 0x1B	; 27
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	27 d1       	rcall	.+590    	; 0x4cc <UART_transStr>
		return -1;
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	9f ef       	ldi	r25, 0xFF	; 255
 282:	97 c0       	rjmp	.+302    	; 0x3b2 <transmitPacket+0x17c>
	}
	else if(packet.ACK == 0x00){}else{
 284:	88 23       	and	r24, r24
 286:	41 f0       	breq	.+16     	; 0x298 <transmitPacket+0x62>
		UART_transStr("ERR: 104", 1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	84 e2       	ldi	r24, 0x24	; 36
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	1d d1       	rcall	.+570    	; 0x4cc <UART_transStr>
		return -1;
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	//Transmits data
	packet.ACK = SPI_transmit(packet.DATA, 1);
 296:	8d c0       	rjmp	.+282    	; 0x3b2 <transmitPacket+0x17c>
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	8c 2f       	mov	r24, r28
 29e:	d3 d0       	rcall	.+422    	; 0x446 <SPI_transmit>
	if(packet.ACK == 0x03){
 2a0:	83 30       	cpi	r24, 0x03	; 3
		UART_transStr("ERR: 101", 1);
 2a2:	41 f4       	brne	.+16     	; 0x2b4 <transmitPacket+0x7e>
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	89 e0       	ldi	r24, 0x09	; 9
 2aa:	92 e0       	ldi	r25, 0x02	; 2
 2ac:	0f d1       	rcall	.+542    	; 0x4cc <UART_transStr>
		return -1;
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x02){
 2b2:	7f c0       	rjmp	.+254    	; 0x3b2 <transmitPacket+0x17c>
 2b4:	82 30       	cpi	r24, 0x02	; 2
		UART_transStr("ERR: 102", 1);
 2b6:	41 f4       	brne	.+16     	; 0x2c8 <transmitPacket+0x92>
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	70 e0       	ldi	r23, 0x00	; 0
 2bc:	82 e1       	ldi	r24, 0x12	; 18
 2be:	92 e0       	ldi	r25, 0x02	; 2
 2c0:	05 d1       	rcall	.+522    	; 0x4cc <UART_transStr>
		return -1;
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x01){
 2c6:	75 c0       	rjmp	.+234    	; 0x3b2 <transmitPacket+0x17c>
 2c8:	81 30       	cpi	r24, 0x01	; 1
		UART_transStr("ERR: 103", 1);
 2ca:	41 f4       	brne	.+16     	; 0x2dc <transmitPacket+0xa6>
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	8b e1       	ldi	r24, 0x1B	; 27
 2d2:	92 e0       	ldi	r25, 0x02	; 2
 2d4:	fb d0       	rcall	.+502    	; 0x4cc <UART_transStr>
		return -1;
 2d6:	8f ef       	ldi	r24, 0xFF	; 255
 2d8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x00){}else{
 2da:	6b c0       	rjmp	.+214    	; 0x3b2 <transmitPacket+0x17c>
 2dc:	88 23       	and	r24, r24
		UART_transStr("ERR: 104", 1);
 2de:	41 f0       	breq	.+16     	; 0x2f0 <transmitPacket+0xba>
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	70 e0       	ldi	r23, 0x00	; 0
 2e4:	84 e2       	ldi	r24, 0x24	; 36
 2e6:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 2e8:	f1 d0       	rcall	.+482    	; 0x4cc <UART_transStr>
 2ea:	8f ef       	ldi	r24, 0xFF	; 255
 2ec:	9f ef       	ldi	r25, 0xFF	; 255
	}

	//Transmits CRC
	packet.ACK = SPI_transmit(packet.CRC, 1);
 2ee:	61 c0       	rjmp	.+194    	; 0x3b2 <transmitPacket+0x17c>
 2f0:	61 e0       	ldi	r22, 0x01	; 1
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	8d 2f       	mov	r24, r29
	if(packet.ACK == 0x03){
 2f6:	a7 d0       	rcall	.+334    	; 0x446 <SPI_transmit>
 2f8:	83 30       	cpi	r24, 0x03	; 3
		UART_transStr("ERR: 101", 1);
 2fa:	41 f4       	brne	.+16     	; 0x30c <transmitPacket+0xd6>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	89 e0       	ldi	r24, 0x09	; 9
 302:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 304:	e3 d0       	rcall	.+454    	; 0x4cc <UART_transStr>
 306:	8f ef       	ldi	r24, 0xFF	; 255
 308:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x02){
 30a:	53 c0       	rjmp	.+166    	; 0x3b2 <transmitPacket+0x17c>
 30c:	82 30       	cpi	r24, 0x02	; 2
		UART_transStr("ERR: 102", 1);
 30e:	41 f4       	brne	.+16     	; 0x320 <transmitPacket+0xea>
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	82 e1       	ldi	r24, 0x12	; 18
 316:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 318:	d9 d0       	rcall	.+434    	; 0x4cc <UART_transStr>
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x01){
 31e:	49 c0       	rjmp	.+146    	; 0x3b2 <transmitPacket+0x17c>
 320:	81 30       	cpi	r24, 0x01	; 1
		UART_transStr("ERR: 103", 1);
 322:	41 f4       	brne	.+16     	; 0x334 <transmitPacket+0xfe>
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	8b e1       	ldi	r24, 0x1B	; 27
 32a:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 32c:	cf d0       	rcall	.+414    	; 0x4cc <UART_transStr>
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x00){}else{
 332:	3f c0       	rjmp	.+126    	; 0x3b2 <transmitPacket+0x17c>
 334:	88 23       	and	r24, r24
		UART_transStr("ERR: 104", 1);
 336:	51 f0       	breq	.+20     	; 0x34c <transmitPacket+0x116>
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	84 e2       	ldi	r24, 0x24	; 36
 33e:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 340:	c5 d0       	rcall	.+394    	; 0x4cc <UART_transStr>
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	//Delay
	for(int timer = 0; timer < 200; timer++){}
 346:	35 c0       	rjmp	.+106    	; 0x3b2 <transmitPacket+0x17c>
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	02 c0       	rjmp	.+4      	; 0x350 <transmitPacket+0x11a>
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	88 3c       	cpi	r24, 0xC8	; 200
		
	//Gets ack
	packet.ACK = SPI_transmit(0x00, 1);
 352:	91 05       	cpc	r25, r1
 354:	cc f3       	brlt	.-14     	; 0x348 <transmitPacket+0x112>
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	80 e0       	ldi	r24, 0x00	; 0
	if(packet.ACK == 0x03){
 35c:	74 d0       	rcall	.+232    	; 0x446 <SPI_transmit>
		UART_transStr("ERR: 101", 1);
 35e:	83 30       	cpi	r24, 0x03	; 3
 360:	41 f4       	brne	.+16     	; 0x372 <transmitPacket+0x13c>
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	89 e0       	ldi	r24, 0x09	; 9
 368:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 36a:	b0 d0       	rcall	.+352    	; 0x4cc <UART_transStr>
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else if(packet.ACK == 0x02){
 370:	20 c0       	rjmp	.+64     	; 0x3b2 <transmitPacket+0x17c>
		UART_transStr("ERR: 102", 1);
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	41 f4       	brne	.+16     	; 0x386 <transmitPacket+0x150>
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	82 e1       	ldi	r24, 0x12	; 18
 37c:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 37e:	a6 d0       	rcall	.+332    	; 0x4cc <UART_transStr>
 380:	8f ef       	ldi	r24, 0xFF	; 255
	}
	else if(packet.ACK == 0x01){return 1;}
 382:	9f ef       	ldi	r25, 0xFF	; 255
 384:	16 c0       	rjmp	.+44     	; 0x3b2 <transmitPacket+0x17c>
	else if(packet.ACK == 0x00){
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	91 f0       	breq	.+36     	; 0x3ae <transmitPacket+0x178>
		UART_transStr("ERR: 105", 1);
 38a:	81 11       	cpse	r24, r1
 38c:	08 c0       	rjmp	.+16     	; 0x39e <transmitPacket+0x168>
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	8d e2       	ldi	r24, 0x2D	; 45
 394:	92 e0       	ldi	r25, 0x02	; 2
		return -1;
 396:	9a d0       	rcall	.+308    	; 0x4cc <UART_transStr>
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	9f ef       	ldi	r25, 0xFF	; 255
	} else{
		UART_transStr("ERR: 104", 1);
 39c:	0a c0       	rjmp	.+20     	; 0x3b2 <transmitPacket+0x17c>
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	84 e2       	ldi	r24, 0x24	; 36
 3a4:	92 e0       	ldi	r25, 0x02	; 2
 3a6:	92 d0       	rcall	.+292    	; 0x4cc <UART_transStr>
		return -1;
 3a8:	8f ef       	ldi	r24, 0xFF	; 255
 3aa:	9f ef       	ldi	r25, 0xFF	; 255
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <transmitPacket+0x17c>
	}
	else if(packet.ACK == 0x02){
		UART_transStr("ERR: 102", 1);
		return -1;
	}
	else if(packet.ACK == 0x01){return 1;}
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	90 e0       	ldi	r25, 0x00	; 0
	} else{
		UART_transStr("ERR: 104", 1);
		return -1;
	}
	return 0;
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <main>:

int main(void){
	UARTPacket receivePacket;
	SPIPacket sendPacket;
	SPI_init(MASTER);
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	2a d0       	rcall	.+84     	; 0x410 <SPI_init>
	UART_init();
 3bc:	69 d0       	rcall	.+210    	; 0x490 <UART_init>
	ADC_init();
 3be:	bf de       	rcall	.-642    	; 0x13e <ADC_init>
 3c0:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <receiveCompleteFlag>
    while(1){
		if(receiveCompleteFlag){
 3c4:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <receiveCompleteFlag+0x1>
 3c8:	89 2b       	or	r24, r25
 3ca:	29 f0       	breq	.+10     	; 0x3d6 <main+0x1e>
			UART_receiveChar();
 3cc:	9f d0       	rcall	.+318    	; 0x50c <UART_receiveChar>
 3ce:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <receiveCompleteFlag+0x1>
			receiveCompleteFlag = 0;
 3d2:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <receiveCompleteFlag>
 3d6:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <packetReceiveFlag>
		}
		if(packetReceiveFlag){
 3da:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <packetReceiveFlag+0x1>
 3de:	89 2b       	or	r24, r25
 3e0:	39 f0       	breq	.+14     	; 0x3f0 <main+0x38>
			receivePacket = input_checkPacket(buffer);
 3e2:	80 e4       	ldi	r24, 0x40	; 64
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	ef de       	rcall	.-546    	; 0x1c6 <input_checkPacket>
 3e8:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <packetReceiveFlag+0x1>
			packetReceiveFlag = 0;
 3ec:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <packetReceiveFlag>
 3f0:	c1 2c       	mov	r12, r1
		}
		packet_makePacket(AMPLITUDE, 0x3F, sendPacket);
 3f2:	d1 2c       	mov	r13, r1
 3f4:	76 01       	movw	r14, r12
 3f6:	a7 01       	movw	r20, r14
 3f8:	96 01       	movw	r18, r12
 3fa:	6f e3       	ldi	r22, 0x3F	; 63
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	07 d0       	rcall	.+14     	; 0x40e <packet_makePacket>
		transmitPacket(sendPacket);
 400:	c7 01       	movw	r24, r14
 402:	b6 01       	movw	r22, r12
 404:	18 df       	rcall	.-464    	; 0x236 <transmitPacket>
 406:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <__data_end>
		UART_transChar(adcSample);
 40a:	53 d0       	rcall	.+166    	; 0x4b2 <UART_transChar>
 40c:	d9 cf       	rjmp	.-78     	; 0x3c0 <main+0x8>

0000040e <packet_makePacket>:
#include "packet.h"

void packet_makePacket(char ADDR, char DATA, SPIPacket packet){
 40e:	08 95       	ret

00000410 <SPI_init>:
#include <avr/interrupt.h>
#include "./SPILib.h"

/* Replace with your library code */
int SPI_init(char role){
	sei();
 410:	78 94       	sei
	if(role == MASTER){
 412:	81 11       	cpse	r24, r1
 414:	0a c0       	rjmp	.+20     	; 0x42a <SPI_init+0x1a>
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
 416:	87 e0       	ldi	r24, 0x07	; 7
 418:	84 b9       	out	0x04, r24	; 4
		PORTB = 0x00;
 41a:	15 b8       	out	0x05, r1	; 5
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
 41c:	82 e5       	ldi	r24, 0x52	; 82
 41e:	8c bd       	out	0x2c, r24	; 44
		SPSR = (1<<SPI2X);
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	8d bd       	out	0x2d, r24	; 45
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
	}
	return 1;
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	08 95       	ret
		DDRB = (1<<PB0)|(1<<PB1)|(1<<PB2); //Sets ss-not, MOSI and SCK to be outputs
		PORTB = 0x00;
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1); //Initiates control register
		SPSR = (1<<SPI2X);
	}
	else if(role == SLAVE){
 42a:	8f 3f       	cpi	r24, 0xFF	; 255
 42c:	49 f4       	brne	.+18     	; 0x440 <SPI_init+0x30>
		DDRB = (1<<PB3); //Sets MISO as output
 42e:	88 e0       	ldi	r24, 0x08	; 8
 430:	84 b9       	out	0x04, r24	; 4
		PORTB = (1<<PB0); //Sets clock to pull high
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	85 b9       	out	0x05, r24	; 5
		SPCR = (1<<SPE); //Initiates control register
 436:	80 e4       	ldi	r24, 0x40	; 64
 438:	8c bd       	out	0x2c, r24	; 44
	}
	else{
		return 0;
	}
	return 1;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	08 95       	ret
		DDRB = (1<<PB3); //Sets MISO as output
		PORTB = (1<<PB0); //Sets clock to pull high
		SPCR = (1<<SPE); //Initiates control register
	}
	else{
		return 0;
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 1;
}
 444:	08 95       	ret

00000446 <SPI_transmit>:

char SPI_transmit(char transmitionCode, int toggleRecieve){
	if((DDRB & 0b00000111) == 0b00000111){
 446:	94 b1       	in	r25, 0x04	; 4
 448:	97 70       	andi	r25, 0x07	; 7
 44a:	97 30       	cpi	r25, 0x07	; 7
 44c:	99 f4       	brne	.+38     	; 0x474 <SPI_transmit+0x2e>
		PORTB &= 0b11111110;
 44e:	95 b1       	in	r25, 0x05	; 5
 450:	9e 7f       	andi	r25, 0xFE	; 254
 452:	95 b9       	out	0x05, r25	; 5
		SPDR = transmitionCode;
 454:	8e bd       	out	0x2e, r24	; 46
		while((SPSR & 0b10000000) != 0b10000000){} //Waits for transmition to finish
 456:	0d b4       	in	r0, 0x2d	; 45
 458:	07 fe       	sbrs	r0, 7
 45a:	fd cf       	rjmp	.-6      	; 0x456 <SPI_transmit+0x10>
		PORTB |= 0b00000001;
 45c:	85 b1       	in	r24, 0x05	; 5
 45e:	81 60       	ori	r24, 0x01	; 1
 460:	85 b9       	out	0x05, r24	; 5
		if(toggleRecieve == 1){
 462:	61 30       	cpi	r22, 0x01	; 1
 464:	71 05       	cpc	r23, r1
 466:	11 f4       	brne	.+4      	; 0x46c <SPI_transmit+0x26>
			return SPDR;
 468:	8e b5       	in	r24, 0x2e	; 46
 46a:	08 95       	ret
		}
		else if(toggleRecieve == 0){
 46c:	67 2b       	or	r22, r23
 46e:	21 f4       	brne	.+8      	; 0x478 <SPI_transmit+0x32>
			return 1;
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	08 95       	ret
		}
	}
	return 0;
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	08 95       	ret
 478:	80 e0       	ldi	r24, 0x00	; 0
}
 47a:	08 95       	ret

0000047c <__vector_24>:

ISR(SPI_STC_vect){
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
	
}
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <UART_init>:
	if(RX == '\r'){
		carriageReturn = 1;
	}
	else if(carriageReturn && RX == '\n'){
		receiveComplete = 1;
		bufferIndex = 0;
 490:	78 94       	sei
 492:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 496:	83 e3       	ldi	r24, 0x33	; 51
 498:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
 49c:	e1 ec       	ldi	r30, 0xC1	; 193
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	88 6d       	ori	r24, 0xD8	; 216
 4a4:	80 83       	st	Z, r24
 4a6:	e2 ec       	ldi	r30, 0xC2	; 194
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	86 60       	ori	r24, 0x06	; 6
 4ae:	80 83       	st	Z, r24
 4b0:	08 95       	ret

000004b2 <UART_transChar>:
 4b2:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <transmitComplete>
 4b6:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <transmitComplete+0x1>
 4ba:	23 2b       	or	r18, r19
 4bc:	d1 f3       	breq	.-12     	; 0x4b2 <UART_transChar>
 4be:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <transmitComplete+0x1>
 4c2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <transmitComplete>
 4c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 4ca:	08 95       	ret

000004cc <UART_transStr>:
 4cc:	ef 92       	push	r14
 4ce:	ff 92       	push	r15
 4d0:	0f 93       	push	r16
 4d2:	1f 93       	push	r17
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	8c 01       	movw	r16, r24
 4da:	7b 01       	movw	r14, r22
 4dc:	c0 e0       	ldi	r28, 0x00	; 0
 4de:	d0 e0       	ldi	r29, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <UART_transStr+0x1a>
 4e2:	e7 df       	rcall	.-50     	; 0x4b2 <UART_transChar>
 4e4:	21 96       	adiw	r28, 0x01	; 1
 4e6:	f8 01       	movw	r30, r16
 4e8:	ec 0f       	add	r30, r28
 4ea:	fd 1f       	adc	r31, r29
 4ec:	80 81       	ld	r24, Z
 4ee:	81 11       	cpse	r24, r1
 4f0:	f8 cf       	rjmp	.-16     	; 0x4e2 <UART_transStr+0x16>
 4f2:	ef 28       	or	r14, r15
 4f4:	21 f0       	breq	.+8      	; 0x4fe <UART_transStr+0x32>
 4f6:	8d e0       	ldi	r24, 0x0D	; 13
 4f8:	dc df       	rcall	.-72     	; 0x4b2 <UART_transChar>
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	da df       	rcall	.-76     	; 0x4b2 <UART_transChar>
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	ff 90       	pop	r15
 508:	ef 90       	pop	r14
 50a:	08 95       	ret

0000050c <UART_receiveChar>:
	}
}

int UART_receiveChar(){
 50c:	cf 93       	push	r28
 50e:	df 93       	push	r29
 510:	1f 92       	push	r1
 512:	1f 92       	push	r1
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
	char tempBuffer[2];
	RX = UDR0;
 518:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 51c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <RX>
	buffer[bufferIndex] = RX;
 520:	e0 91 3e 02 	lds	r30, 0x023E	; 0x80023e <bufferIndex>
 524:	f0 91 3f 02 	lds	r31, 0x023F	; 0x80023f <bufferIndex+0x1>
 528:	e0 5c       	subi	r30, 0xC0	; 192
 52a:	fd 4f       	sbci	r31, 0xFD	; 253
 52c:	80 83       	st	Z, r24
	if(bufferIndex == 3){
 52e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <bufferIndex>
 532:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <bufferIndex+0x1>
 536:	03 97       	sbiw	r24, 0x03	; 3
 538:	a9 f4       	brne	.+42     	; 0x564 <UART_receiveChar+0x58>
		if(buffer[0] == 0x55 && buffer[1] == 0xAA){
 53a:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <buffer>
 53e:	85 35       	cpi	r24, 0x55	; 85
 540:	89 f4       	brne	.+34     	; 0x564 <UART_receiveChar+0x58>
 542:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <buffer+0x1>
 546:	8a 3a       	cpi	r24, 0xAA	; 170
 548:	69 f4       	brne	.+26     	; 0x564 <UART_receiveChar+0x58>
			tempBuffer[0] = buffer[2];
 54a:	e0 e4       	ldi	r30, 0x40	; 64
 54c:	f2 e0       	ldi	r31, 0x02	; 2
 54e:	82 81       	ldd	r24, Z+2	; 0x02
 550:	89 83       	std	Y+1, r24	; 0x01
			tempBuffer[1] = buffer[3];
 552:	83 81       	ldd	r24, Z+3	; 0x03
 554:	8a 83       	std	Y+2, r24	; 0x02
			packetLength = atoi(tempBuffer);
 556:	ce 01       	movw	r24, r28
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	8a d1       	rcall	.+788    	; 0x870 <atoi>
 55c:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <packetLength+0x1>
 560:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <packetLength>
		}
	}
	if(bufferIndex == packetLength && packetLength != 0){
 564:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <bufferIndex>
 568:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <bufferIndex+0x1>
 56c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <packetLength>
 570:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <packetLength+0x1>
 574:	28 17       	cp	r18, r24
 576:	39 07       	cpc	r19, r25
 578:	41 f4       	brne	.+16     	; 0x58a <UART_receiveChar+0x7e>
 57a:	89 2b       	or	r24, r25
 57c:	31 f0       	breq	.+12     	; 0x58a <UART_receiveChar+0x7e>
		packetReceiveFlag = 1;
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <packetReceiveFlag+0x1>
 586:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <packetReceiveFlag>
	}
	bufferIndex += 1;
 58a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <bufferIndex>
 58e:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <bufferIndex+0x1>
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <bufferIndex+0x1>
 598:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <bufferIndex>
	//checkCarriageReturn();
	return 1;
}
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0f 90       	pop	r0
 5a2:	0f 90       	pop	r0
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	08 95       	ret

000005aa <__vector_25>:


ISR(USART0_RX_vect){
 5aa:	1f 92       	push	r1
 5ac:	0f 92       	push	r0
 5ae:	0f b6       	in	r0, 0x3f	; 63
 5b0:	0f 92       	push	r0
 5b2:	11 24       	eor	r1, r1
 5b4:	8f 93       	push	r24
 5b6:	9f 93       	push	r25
	receiveCompleteFlag = 1;
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <receiveCompleteFlag+0x1>
 5c0:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <receiveCompleteFlag>
};
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

000005d2 <__vector_27>:

ISR(USART0_TX_vect){
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	8f 93       	push	r24
 5de:	9f 93       	push	r25
	transmitComplete = 1;
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <transmitComplete+0x1>
 5e8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <transmitComplete>
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <calloc>:
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	86 9f       	mul	r24, r22
 604:	80 01       	movw	r16, r0
 606:	87 9f       	mul	r24, r23
 608:	10 0d       	add	r17, r0
 60a:	96 9f       	mul	r25, r22
 60c:	10 0d       	add	r17, r0
 60e:	11 24       	eor	r1, r1
 610:	c8 01       	movw	r24, r16
 612:	0d d0       	rcall	.+26     	; 0x62e <malloc>
 614:	ec 01       	movw	r28, r24
 616:	00 97       	sbiw	r24, 0x00	; 0
 618:	21 f0       	breq	.+8      	; 0x622 <calloc+0x28>
 61a:	a8 01       	movw	r20, r16
 61c:	60 e0       	ldi	r22, 0x00	; 0
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	44 d1       	rcall	.+648    	; 0x8aa <memset>
 622:	ce 01       	movw	r24, r28
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	08 95       	ret

0000062e <malloc>:
 62e:	0f 93       	push	r16
 630:	1f 93       	push	r17
 632:	cf 93       	push	r28
 634:	df 93       	push	r29
 636:	82 30       	cpi	r24, 0x02	; 2
 638:	91 05       	cpc	r25, r1
 63a:	10 f4       	brcc	.+4      	; 0x640 <malloc+0x12>
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <__flp>
 644:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <__flp+0x1>
 648:	20 e0       	ldi	r18, 0x00	; 0
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	a0 e0       	ldi	r26, 0x00	; 0
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	30 97       	sbiw	r30, 0x00	; 0
 652:	19 f1       	breq	.+70     	; 0x69a <malloc+0x6c>
 654:	40 81       	ld	r20, Z
 656:	51 81       	ldd	r21, Z+1	; 0x01
 658:	02 81       	ldd	r16, Z+2	; 0x02
 65a:	13 81       	ldd	r17, Z+3	; 0x03
 65c:	48 17       	cp	r20, r24
 65e:	59 07       	cpc	r21, r25
 660:	c8 f0       	brcs	.+50     	; 0x694 <malloc+0x66>
 662:	84 17       	cp	r24, r20
 664:	95 07       	cpc	r25, r21
 666:	69 f4       	brne	.+26     	; 0x682 <malloc+0x54>
 668:	10 97       	sbiw	r26, 0x00	; 0
 66a:	31 f0       	breq	.+12     	; 0x678 <malloc+0x4a>
 66c:	12 96       	adiw	r26, 0x02	; 2
 66e:	0c 93       	st	X, r16
 670:	12 97       	sbiw	r26, 0x02	; 2
 672:	13 96       	adiw	r26, 0x03	; 3
 674:	1c 93       	st	X, r17
 676:	27 c0       	rjmp	.+78     	; 0x6c6 <malloc+0x98>
 678:	00 93 a6 02 	sts	0x02A6, r16	; 0x8002a6 <__flp>
 67c:	10 93 a7 02 	sts	0x02A7, r17	; 0x8002a7 <__flp+0x1>
 680:	22 c0       	rjmp	.+68     	; 0x6c6 <malloc+0x98>
 682:	21 15       	cp	r18, r1
 684:	31 05       	cpc	r19, r1
 686:	19 f0       	breq	.+6      	; 0x68e <malloc+0x60>
 688:	42 17       	cp	r20, r18
 68a:	53 07       	cpc	r21, r19
 68c:	18 f4       	brcc	.+6      	; 0x694 <malloc+0x66>
 68e:	9a 01       	movw	r18, r20
 690:	bd 01       	movw	r22, r26
 692:	ef 01       	movw	r28, r30
 694:	df 01       	movw	r26, r30
 696:	f8 01       	movw	r30, r16
 698:	db cf       	rjmp	.-74     	; 0x650 <malloc+0x22>
 69a:	21 15       	cp	r18, r1
 69c:	31 05       	cpc	r19, r1
 69e:	f9 f0       	breq	.+62     	; 0x6de <malloc+0xb0>
 6a0:	28 1b       	sub	r18, r24
 6a2:	39 0b       	sbc	r19, r25
 6a4:	24 30       	cpi	r18, 0x04	; 4
 6a6:	31 05       	cpc	r19, r1
 6a8:	80 f4       	brcc	.+32     	; 0x6ca <malloc+0x9c>
 6aa:	8a 81       	ldd	r24, Y+2	; 0x02
 6ac:	9b 81       	ldd	r25, Y+3	; 0x03
 6ae:	61 15       	cp	r22, r1
 6b0:	71 05       	cpc	r23, r1
 6b2:	21 f0       	breq	.+8      	; 0x6bc <malloc+0x8e>
 6b4:	fb 01       	movw	r30, r22
 6b6:	93 83       	std	Z+3, r25	; 0x03
 6b8:	82 83       	std	Z+2, r24	; 0x02
 6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <malloc+0x96>
 6bc:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <__flp+0x1>
 6c0:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <__flp>
 6c4:	fe 01       	movw	r30, r28
 6c6:	32 96       	adiw	r30, 0x02	; 2
 6c8:	44 c0       	rjmp	.+136    	; 0x752 <malloc+0x124>
 6ca:	fe 01       	movw	r30, r28
 6cc:	e2 0f       	add	r30, r18
 6ce:	f3 1f       	adc	r31, r19
 6d0:	81 93       	st	Z+, r24
 6d2:	91 93       	st	Z+, r25
 6d4:	22 50       	subi	r18, 0x02	; 2
 6d6:	31 09       	sbc	r19, r1
 6d8:	39 83       	std	Y+1, r19	; 0x01
 6da:	28 83       	st	Y, r18
 6dc:	3a c0       	rjmp	.+116    	; 0x752 <malloc+0x124>
 6de:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__brkval>
 6e2:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__brkval+0x1>
 6e6:	23 2b       	or	r18, r19
 6e8:	41 f4       	brne	.+16     	; 0x6fa <malloc+0xcc>
 6ea:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 6ee:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 6f2:	30 93 a5 02 	sts	0x02A5, r19	; 0x8002a5 <__brkval+0x1>
 6f6:	20 93 a4 02 	sts	0x02A4, r18	; 0x8002a4 <__brkval>
 6fa:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 6fe:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 702:	21 15       	cp	r18, r1
 704:	31 05       	cpc	r19, r1
 706:	41 f4       	brne	.+16     	; 0x718 <malloc+0xea>
 708:	2d b7       	in	r18, 0x3d	; 61
 70a:	3e b7       	in	r19, 0x3e	; 62
 70c:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 710:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 714:	24 1b       	sub	r18, r20
 716:	35 0b       	sbc	r19, r21
 718:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <__brkval>
 71c:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <__brkval+0x1>
 720:	e2 17       	cp	r30, r18
 722:	f3 07       	cpc	r31, r19
 724:	a0 f4       	brcc	.+40     	; 0x74e <malloc+0x120>
 726:	2e 1b       	sub	r18, r30
 728:	3f 0b       	sbc	r19, r31
 72a:	28 17       	cp	r18, r24
 72c:	39 07       	cpc	r19, r25
 72e:	78 f0       	brcs	.+30     	; 0x74e <malloc+0x120>
 730:	ac 01       	movw	r20, r24
 732:	4e 5f       	subi	r20, 0xFE	; 254
 734:	5f 4f       	sbci	r21, 0xFF	; 255
 736:	24 17       	cp	r18, r20
 738:	35 07       	cpc	r19, r21
 73a:	48 f0       	brcs	.+18     	; 0x74e <malloc+0x120>
 73c:	4e 0f       	add	r20, r30
 73e:	5f 1f       	adc	r21, r31
 740:	50 93 a5 02 	sts	0x02A5, r21	; 0x8002a5 <__brkval+0x1>
 744:	40 93 a4 02 	sts	0x02A4, r20	; 0x8002a4 <__brkval>
 748:	81 93       	st	Z+, r24
 74a:	91 93       	st	Z+, r25
 74c:	02 c0       	rjmp	.+4      	; 0x752 <malloc+0x124>
 74e:	e0 e0       	ldi	r30, 0x00	; 0
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	cf 01       	movw	r24, r30
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	08 95       	ret

0000075e <free>:
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	00 97       	sbiw	r24, 0x00	; 0
 764:	09 f4       	brne	.+2      	; 0x768 <free+0xa>
 766:	81 c0       	rjmp	.+258    	; 0x86a <free+0x10c>
 768:	fc 01       	movw	r30, r24
 76a:	32 97       	sbiw	r30, 0x02	; 2
 76c:	13 82       	std	Z+3, r1	; 0x03
 76e:	12 82       	std	Z+2, r1	; 0x02
 770:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <__flp>
 774:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <__flp+0x1>
 778:	10 97       	sbiw	r26, 0x00	; 0
 77a:	81 f4       	brne	.+32     	; 0x79c <free+0x3e>
 77c:	20 81       	ld	r18, Z
 77e:	31 81       	ldd	r19, Z+1	; 0x01
 780:	82 0f       	add	r24, r18
 782:	93 1f       	adc	r25, r19
 784:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__brkval>
 788:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__brkval+0x1>
 78c:	28 17       	cp	r18, r24
 78e:	39 07       	cpc	r19, r25
 790:	51 f5       	brne	.+84     	; 0x7e6 <free+0x88>
 792:	f0 93 a5 02 	sts	0x02A5, r31	; 0x8002a5 <__brkval+0x1>
 796:	e0 93 a4 02 	sts	0x02A4, r30	; 0x8002a4 <__brkval>
 79a:	67 c0       	rjmp	.+206    	; 0x86a <free+0x10c>
 79c:	ed 01       	movw	r28, r26
 79e:	20 e0       	ldi	r18, 0x00	; 0
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	ce 17       	cp	r28, r30
 7a4:	df 07       	cpc	r29, r31
 7a6:	40 f4       	brcc	.+16     	; 0x7b8 <free+0x5a>
 7a8:	4a 81       	ldd	r20, Y+2	; 0x02
 7aa:	5b 81       	ldd	r21, Y+3	; 0x03
 7ac:	9e 01       	movw	r18, r28
 7ae:	41 15       	cp	r20, r1
 7b0:	51 05       	cpc	r21, r1
 7b2:	f1 f0       	breq	.+60     	; 0x7f0 <free+0x92>
 7b4:	ea 01       	movw	r28, r20
 7b6:	f5 cf       	rjmp	.-22     	; 0x7a2 <free+0x44>
 7b8:	d3 83       	std	Z+3, r29	; 0x03
 7ba:	c2 83       	std	Z+2, r28	; 0x02
 7bc:	40 81       	ld	r20, Z
 7be:	51 81       	ldd	r21, Z+1	; 0x01
 7c0:	84 0f       	add	r24, r20
 7c2:	95 1f       	adc	r25, r21
 7c4:	c8 17       	cp	r28, r24
 7c6:	d9 07       	cpc	r29, r25
 7c8:	59 f4       	brne	.+22     	; 0x7e0 <free+0x82>
 7ca:	88 81       	ld	r24, Y
 7cc:	99 81       	ldd	r25, Y+1	; 0x01
 7ce:	84 0f       	add	r24, r20
 7d0:	95 1f       	adc	r25, r21
 7d2:	02 96       	adiw	r24, 0x02	; 2
 7d4:	91 83       	std	Z+1, r25	; 0x01
 7d6:	80 83       	st	Z, r24
 7d8:	8a 81       	ldd	r24, Y+2	; 0x02
 7da:	9b 81       	ldd	r25, Y+3	; 0x03
 7dc:	93 83       	std	Z+3, r25	; 0x03
 7de:	82 83       	std	Z+2, r24	; 0x02
 7e0:	21 15       	cp	r18, r1
 7e2:	31 05       	cpc	r19, r1
 7e4:	29 f4       	brne	.+10     	; 0x7f0 <free+0x92>
 7e6:	f0 93 a7 02 	sts	0x02A7, r31	; 0x8002a7 <__flp+0x1>
 7ea:	e0 93 a6 02 	sts	0x02A6, r30	; 0x8002a6 <__flp>
 7ee:	3d c0       	rjmp	.+122    	; 0x86a <free+0x10c>
 7f0:	e9 01       	movw	r28, r18
 7f2:	fb 83       	std	Y+3, r31	; 0x03
 7f4:	ea 83       	std	Y+2, r30	; 0x02
 7f6:	49 91       	ld	r20, Y+
 7f8:	59 91       	ld	r21, Y+
 7fa:	c4 0f       	add	r28, r20
 7fc:	d5 1f       	adc	r29, r21
 7fe:	ec 17       	cp	r30, r28
 800:	fd 07       	cpc	r31, r29
 802:	61 f4       	brne	.+24     	; 0x81c <free+0xbe>
 804:	80 81       	ld	r24, Z
 806:	91 81       	ldd	r25, Z+1	; 0x01
 808:	84 0f       	add	r24, r20
 80a:	95 1f       	adc	r25, r21
 80c:	02 96       	adiw	r24, 0x02	; 2
 80e:	e9 01       	movw	r28, r18
 810:	99 83       	std	Y+1, r25	; 0x01
 812:	88 83       	st	Y, r24
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	9b 83       	std	Y+3, r25	; 0x03
 81a:	8a 83       	std	Y+2, r24	; 0x02
 81c:	e0 e0       	ldi	r30, 0x00	; 0
 81e:	f0 e0       	ldi	r31, 0x00	; 0
 820:	12 96       	adiw	r26, 0x02	; 2
 822:	8d 91       	ld	r24, X+
 824:	9c 91       	ld	r25, X
 826:	13 97       	sbiw	r26, 0x03	; 3
 828:	00 97       	sbiw	r24, 0x00	; 0
 82a:	19 f0       	breq	.+6      	; 0x832 <free+0xd4>
 82c:	fd 01       	movw	r30, r26
 82e:	dc 01       	movw	r26, r24
 830:	f7 cf       	rjmp	.-18     	; 0x820 <free+0xc2>
 832:	8d 91       	ld	r24, X+
 834:	9c 91       	ld	r25, X
 836:	11 97       	sbiw	r26, 0x01	; 1
 838:	9d 01       	movw	r18, r26
 83a:	2e 5f       	subi	r18, 0xFE	; 254
 83c:	3f 4f       	sbci	r19, 0xFF	; 255
 83e:	82 0f       	add	r24, r18
 840:	93 1f       	adc	r25, r19
 842:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__brkval>
 846:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__brkval+0x1>
 84a:	28 17       	cp	r18, r24
 84c:	39 07       	cpc	r19, r25
 84e:	69 f4       	brne	.+26     	; 0x86a <free+0x10c>
 850:	30 97       	sbiw	r30, 0x00	; 0
 852:	29 f4       	brne	.+10     	; 0x85e <free+0x100>
 854:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <__flp+0x1>
 858:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <__flp>
 85c:	02 c0       	rjmp	.+4      	; 0x862 <free+0x104>
 85e:	13 82       	std	Z+3, r1	; 0x03
 860:	12 82       	std	Z+2, r1	; 0x02
 862:	b0 93 a5 02 	sts	0x02A5, r27	; 0x8002a5 <__brkval+0x1>
 866:	a0 93 a4 02 	sts	0x02A4, r26	; 0x8002a4 <__brkval>
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <atoi>:
 870:	fc 01       	movw	r30, r24
 872:	88 27       	eor	r24, r24
 874:	99 27       	eor	r25, r25
 876:	e8 94       	clt
 878:	21 91       	ld	r18, Z+
 87a:	20 32       	cpi	r18, 0x20	; 32
 87c:	e9 f3       	breq	.-6      	; 0x878 <atoi+0x8>
 87e:	29 30       	cpi	r18, 0x09	; 9
 880:	10 f0       	brcs	.+4      	; 0x886 <atoi+0x16>
 882:	2e 30       	cpi	r18, 0x0E	; 14
 884:	c8 f3       	brcs	.-14     	; 0x878 <atoi+0x8>
 886:	2b 32       	cpi	r18, 0x2B	; 43
 888:	39 f0       	breq	.+14     	; 0x898 <atoi+0x28>
 88a:	2d 32       	cpi	r18, 0x2D	; 45
 88c:	31 f4       	brne	.+12     	; 0x89a <atoi+0x2a>
 88e:	68 94       	set
 890:	03 c0       	rjmp	.+6      	; 0x898 <atoi+0x28>
 892:	12 d0       	rcall	.+36     	; 0x8b8 <__mulhi_const_10>
 894:	82 0f       	add	r24, r18
 896:	91 1d       	adc	r25, r1
 898:	21 91       	ld	r18, Z+
 89a:	20 53       	subi	r18, 0x30	; 48
 89c:	2a 30       	cpi	r18, 0x0A	; 10
 89e:	c8 f3       	brcs	.-14     	; 0x892 <atoi+0x22>
 8a0:	1e f4       	brtc	.+6      	; 0x8a8 <atoi+0x38>
 8a2:	90 95       	com	r25
 8a4:	81 95       	neg	r24
 8a6:	9f 4f       	sbci	r25, 0xFF	; 255
 8a8:	08 95       	ret

000008aa <memset>:
 8aa:	dc 01       	movw	r26, r24
 8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <memset+0x6>
 8ae:	6d 93       	st	X+, r22
 8b0:	41 50       	subi	r20, 0x01	; 1
 8b2:	50 40       	sbci	r21, 0x00	; 0
 8b4:	e0 f7       	brcc	.-8      	; 0x8ae <memset+0x4>
 8b6:	08 95       	ret

000008b8 <__mulhi_const_10>:
 8b8:	7a e0       	ldi	r23, 0x0A	; 10
 8ba:	97 9f       	mul	r25, r23
 8bc:	90 2d       	mov	r25, r0
 8be:	87 9f       	mul	r24, r23
 8c0:	80 2d       	mov	r24, r0
 8c2:	91 0d       	add	r25, r1
 8c4:	11 24       	eor	r1, r1
 8c6:	08 95       	ret

000008c8 <_exit>:
 8c8:	f8 94       	cli

000008ca <__stop_program>:
 8ca:	ff cf       	rjmp	.-2      	; 0x8ca <__stop_program>
